$#include <QRegion>

class QRegion {
Q_OBJECT
signals:
public:
	 enum RegionType { Rectangle, Ellipse };
	 struct QRegionData;

	 QRegion ();
	 QRegion (int x, int y, int w, int h, RegionType t=Rectangle);
	 QRegion (const QRect &r, RegionType t=Rectangle);
	 QRegion (const QPolygon &pa, Qt::FillRule fillRule=Qt::OddEvenFill);
	 QRegion (const QRegion &region);
	 QRegion (const QBitmap &bitmap);
	 ~QRegion ();
	 QRegion & operator= (const QRegion &);
	 bool isEmpty () const;
	 bool contains (const QPoint &p) const;
	 bool contains (const QRect &r) const;
	 void translate (int dx, int dy);
	 void translate (const QPoint &p);
	 QRegion unite (const QRegion &r) const;
	 QRegion intersect (const QRegion &r) const;
	 QRegion subtract (const QRegion &r) const;
	 QRegion eor (const QRegion &r) const;
	 QRect boundingRect () const;
	 QVector< QRect > rects () const;
	 void setRects (const QRect *rect, int num);
	 const QRegion operator| (const QRegion &r) const;
	 const QRegion operator+ (const QRegion &r) const;
	 const QRegion operator & (const QRegion &r) const;
	 const QRegion operator- (const QRegion &r) const;
	 const QRegion operator^ (const QRegion &r) const;
	 QRegion & operator|= (const QRegion &r);
	 QRegion & operator+= (const QRegion &r);
	 QRegion & operator &= (const QRegion &r);
	 QRegion & operator-= (const QRegion &r);
	 QRegion & operator^= (const QRegion &r);
	 bool operator== (const QRegion &r) const;
	 bool operator!= (const QRegion &r) const;
	 operator QVariant () const;

};
$#include <QStyleOption>

class QStyleOption {
Q_OBJECT
signals:
public:
	 enum OptionType {         SO_Default, SO_FocusRect, SO_Button, SO_Tab,         SO_MenuItem, SO_Frame, SO_ProgressBar, SO_ToolBox,         SO_Header, SO_Q3DockWindow, SO_DockWidget, SO_Q3ListViewItem,         SO_ViewItem, SO_TabWidgetFrame, SO_TabBarBase, SO_RubberBand,         SO_Complex = 0xf0000, SO_Slider, SO_SpinBox, SO_ToolButton,         SO_ComboBox, SO_Q3ListView, SO_TitleBar, SO_CustomBase = 0xf00,         SO_ComplexCustomBase = 0xf000000       };
	 enum { Type = SO_Default };
	 enum { Version = 1 };

	 QStyleOption (int version=QStyleOption::Version, int type=SO_Default);
	 QStyleOption (const QStyleOption &other);
	 ~QStyleOption ();
	 void init (const QWidget *w);
	 QStyleOption & operator= (const QStyleOption &other);
	 int version;
	 int type;
	 QStyle::State state;
	 Qt::LayoutDirection direction;
	 QRect rect;
	 QPalette palette;

};
$#include <QFontMetricsF>

class QFontMetricsF {
Q_OBJECT
signals:
public:

	 qreal ascent () const;
	 qreal descent () const;
	 qreal height () const;
	 qreal leading () const;
	 qreal lineSpacing () const;
	 qreal minLeftBearing () const;
	 qreal minRightBearing () const;
	 qreal maxWidth () const;
	 bool inFont (QChar) const;
	 qreal leftBearing (QChar) const;
	 qreal rightBearing (QChar) const;
	 qreal width (const QString& ) const;
	 qreal width (QChar) const;
	 QRectF boundingRect (const QString& ) const;
	 QRectF boundingRect (QChar) const;
	 QRectF boundingRect (const QRectF &r, int flags, const QString& , int tabstops=0, int *tabarray=0) const;
	 QSizeF size (int flags, const QString &str, int tabstops=0, int *tabarray=0) const;
	 qreal underlinePos () const;
	 qreal overlinePos () const;
	 qreal strikeOutPos () const;
	 qreal lineWidth () const;
	 bool operator== (const QFontMetricsF &other);
	 bool operator!= (const QFontMetricsF &other);

};
$#include <QTextFormat>

class QTextFormat {
Q_OBJECT
signals:
public:
	 enum FormatType {         InvalidFormat = -1, BlockFormat = 1, CharFormat = 2, ListFormat = 3,         TableFormat = 4, FrameFormat = 5, UserFormat = 100       };
	 enum Property {         ObjectIndex = 0x0, CssFloat = 0x0800, LayoutDirection = 0x0801, OutlinePen = 0x810,         BackgroundBrush = 0x820, ForegroundBrush = 0x821, BlockAlignment = 0x1010, BlockTopMargin = 0x1030,         BlockBottomMargin = 0x1031, BlockLeftMargin = 0x1032, BlockRightMargin = 0x1033, TextIndent = 0x1034,         BlockIndent = 0x1040, BlockNonBreakableLines = 0x1050, BlockTrailingHorizontalRulerWidth = 0x1060, FontFamily = 0x2000,         FontPointSize = 0x2001, FontSizeAdjustment = 0x2002, FontSizeIncrement = FontSizeAdjustment, FontWeight = 0x2003,         FontItalic = 0x2004, FontUnderline = 0x2005, FontOverline = 0x2006, FontStrikeOut = 0x2007,         FontFixedPitch = 0x2008, TextUnderlineColor = 0x2010, TextVerticalAlignment = 0x2021, IsAnchor = 0x2030,         AnchorHref = 0x2031, AnchorName = 0x2032, ObjectType = 0x2f00, ListStyle = 0x3000,         ListIndent = 0x3001, FrameBorder = 0x4000, FrameMargin = 0x4001, FramePadding = 0x4002,         FrameWidth = 0x4003, FrameHeight = 0x4004, TableColumns = 0x4100, TableColumnWidthConstraints = 0x4101,         TableCellSpacing = 0x4102, TableCellPadding = 0x4103, TableCellRowSpan = 0x4810, TableCellColumnSpan = 0x4811,         ImageName = 0x5000, ImageWidth = 0x5010, ImageHeight = 0x5011, DocumentFragmentMark = 0x6000,         UserProperty = 0x100000       };
	 enum ObjectTypes { NoObject, ImageObject, TableObject };

	 QTextFormat ();
	 QTextFormat (int type);
	 QTextFormat (const QTextFormat &rhs);
	 QTextFormat & operator= (const QTextFormat &rhs);
	 ~QTextFormat ();
	 void merge (const QTextFormat &other);
	 bool isValid () const;
	 int type () const;
	 int objectIndex () const;
	 void setObjectIndex (int object);
	 QVariant property (int propertyId) const;
	 void setProperty (int propertyId, const QVariant &value);
	 void clearProperty (int propertyId);
	 bool hasProperty (int propertyId) const;
	 bool boolProperty (int propertyId) const;
	 int intProperty (int propertyId) const;
	 qreal doubleProperty (int propertyId) const;
	 QString stringProperty (int propertyId) const;
	 QColor colorProperty (int propertyId) const;
	 QPen penProperty (int propertyId) const;
	 QBrush brushProperty (int propertyId) const;
	 QTextLength lengthProperty (int propertyId) const;
	 QVector< QTextLength > lengthVectorProperty (int propertyId) const;
	 void setProperty (int propertyId, const QVector< QTextLength > &lengths);
	 QMap< int, QVariant > properties () const;
	 void setObjectType (int type);
	 int objectType () const;
	 bool isCharFormat () const;
	 bool isBlockFormat () const;
	 bool isListFormat () const;
	 bool isFrameFormat () const;
	 bool isImageFormat () const;
	 bool isTableFormat () const;
	 QTextBlockFormat toBlockFormat () const;
	 QTextCharFormat toCharFormat () const;
	 QTextListFormat toListFormat () const;
	 QTextTableFormat toTableFormat () const;
	 QTextFrameFormat toFrameFormat () const;
	 QTextImageFormat toImageFormat () const;
	 bool operator== (const QTextFormat &rhs) const;
	 bool operator!= (const QTextFormat &rhs) const;
	 operator QVariant () const;
	 void setLayoutDirection (Qt::LayoutDirection direction);
	 Qt::LayoutDirection layoutDirection () const;
	 void setBackground (const QBrush &brush);
	 QBrush background () const;
	 void clearBackground ();
	 void setForeground (const QBrush &brush);
	 QBrush foreground () const;
	 void clearForeground ();

};
$#include <QTextLine>

class QTextLine {
Q_OBJECT
signals:
public:
	 enum Edge { Leading, Trailing };
	 enum CursorPosition { CursorBetweenCharacters, CursorOnCharacter };

	 QTextLine ();
	 bool isValid () const;
	 QRectF rect () const;
	 qreal x () const;
	 qreal y () const;
	 qreal width () const;
	 qreal ascent () const;
	 qreal descent () const;
	 qreal height () const;
	 qreal naturalTextWidth () const;
	 QRectF naturalTextRect () const;
	 qreal cursorToX (int *cursorPos, Edge edge=Leading) const;
	 qreal cursorToX (int cursorPos, Edge edge=Leading) const;
	 int xToCursor (qreal x, CursorPosition=CursorBetweenCharacters) const;
	 void setLineWidth (qreal width);
	 void setNumColumns (int columns);
	 void setPosition (const QPointF &pos);
	 int textStart () const;
	 int textLength () const;
	 int lineNumber () const;
	 void draw (QPainter *p, const QPointF &point, const QTextLayout::FormatRange *selection=0) const;

};
$#include <QTextOption>

class QTextOption {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags Flags;
	 enum WrapMode {         NoWrap, WordWrap, ManualWrap, WrapAnywhere,         WrapAtWordBoundaryOrAnywhere       };
	 enum Flag { IncludeTrailingSpaces = 0x80000000 };

	 QTextOption ();
	 QTextOption (Qt::Alignment alignment);
	 ~QTextOption ();
	 QTextOption (const QTextOption &o);
	 QTextOption & operator= (const QTextOption &o);
	 void setAlignment (Qt::Alignment alignment);
	 Qt::Alignment alignment () const;
	 void setTextDirection (Qt::LayoutDirection aDirection);
	 Qt::LayoutDirection textDirection () const;
	 void setWrapMode (WrapMode wrap);
	 WrapMode wrapMode () const;
	 void setFlags (Flags flags);
	 Flags flags () const;
	 void setTabStop (qreal tabStop);
	 qreal tabStop () const;
	 void setTabArray (QList< qreal > tabStops);
	 QList< qreal > tabArray () const;
	 void setUseDesignMetrics (bool b);
	 bool useDesignMetrics () const;

};
$#include <QPainterPath>

class QPainterPath {
Q_OBJECT
signals:
public:
	 enum ElementType { MoveToElement, LineToElement, CurveToElement, CurveToDataElement };
	 class Element;

	 QPainterPath ();
	 QPainterPath (const QPointF &startPoint);
	 QPainterPath (const QPainterPath &other);
	 QPainterPath & operator= (const QPainterPath &other);
	 ~QPainterPath ();
	 void closeSubpath ();
	 void moveTo (const QPointF &p);
	 void moveTo (qreal x, qreal y);
	 void lineTo (const QPointF &p);
	 void lineTo (qreal x, qreal y);
	 void arcTo (const QRectF &rect, qreal startAngle, qreal arcLength);
	 void arcTo (qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLength);
	 void cubicTo (const QPointF &ctrlPt1, const QPointF &ctrlPt2, const QPointF &endPt);
	 void cubicTo (qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y, qreal endPtx, qreal endPty);
	 void quadTo (const QPointF &ctrlPt, const QPointF &endPt);
	 void quadTo (qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty);
	 QPointF currentPosition () const;
	 void addRect (const QRectF &rect);
	 void addRect (qreal x, qreal y, qreal w, qreal h);
	 void addEllipse (const QRectF &rect);
	 void addEllipse (qreal x, qreal y, qreal w, qreal h);
	 void addPolygon (const QPolygonF &polygon);
	 void addText (const QPointF &point, const QFont &f, const QString &text);
	 void addText (qreal x, qreal y, const QFont &f, const QString &text);
	 void addPath (const QPainterPath &path);
	 void addRegion (const QRegion &region);
	 void connectPath (const QPainterPath &path);
	 bool contains (const QPointF &pt) const;
	 bool contains (const QRectF &rect) const;
	 bool intersects (const QRectF &rect) const;
	 QRectF boundingRect () const;
	 QRectF controlPointRect () const;
	 Qt::FillRule fillRule () const;
	 void setFillRule (Qt::FillRule fillRule);
	 bool isEmpty () const;
	 QPainterPath toReversed () const;
	 QList< QPolygonF > toSubpathPolygons (const QMatrix &matrix=QMatrix()) const;
	 QList< QPolygonF > toFillPolygons (const QMatrix &matrix=QMatrix()) const;
	 QPolygonF toFillPolygon (const QMatrix &matrix=QMatrix()) const;
	 int elementCount () const;
	 const QPainterPath::Element & elementAt (int i) const;
	 bool operator== (const QPainterPath &other) const;
	 bool operator!= (const QPainterPath &other) const;

};
$#include <QImageWriter>

class QImageWriter {
Q_OBJECT
signals:
public:
	 enum ImageWriterError { UnknownError, DeviceError, UnsupportedFormatError };

	 QImageWriter ();
	 QImageWriter (QIODevice *device, const QByteArray &format);
	 QImageWriter (const QString &fileName, const QByteArray &format=QByteArray());
	 ~QImageWriter ();
	 void setFormat (const QByteArray &format);
	 QByteArray format () const;
	 void setDevice (QIODevice *device);
	 void setFileName (const QString &fileName);
	 QString fileName () const;
	 void setQuality (int quality);
	 int quality () const;
	 void setGamma (float gamma);
	 float gamma () const;
	 void setDescription (const QString &description);
	 QString description () const;
	 bool canWrite () const;
	 bool write (const QImage &image);
	 ImageWriterError error () const;
	 QString errorString () const;
	 static QList< QByteArray > supportedImageFormats ();

};
$#include <QTextLength>

class QTextLength {
Q_OBJECT
signals:
public:
	 enum Type { VariableLength = 0, FixedLength, PercentageLength };

	 QTextLength ();
	 QTextLength (Type type, qreal value);
	 Type type () const;
	 qreal value (qreal maximumLength) const;
	 qreal rawValue () const;
	 bool operator== (const QTextLength &other) const;
	 bool operator!= (const QTextLength &other) const;
	 operator QVariant () const;

};
$#include <QAccessible>

class QAccessible {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags State;
	 typedef LuaQtGenericFlags Relation;
	class  InterfaceFactory ;
	class  UpdateHandler ;
	class  RootObjectHandler ;
	 enum Event {         SoundPlayed = 0x0001, Alert = 0x0002, ForegroundChanged = 0x0003, MenuStart = 0x0004,         MenuEnd = 0x0005, PopupMenuStart = 0x0006, PopupMenuEnd = 0x0007, ContextHelpStart = 0x000C,         ContextHelpEnd = 0x000D, DragDropStart = 0x000E, DragDropEnd = 0x000F, DialogStart = 0x0010,         DialogEnd = 0x0011, ScrollingStart = 0x0012, ScrollingEnd = 0x0013, MenuCommand = 0x0018,         ObjectCreated = 0x8000, ObjectDestroyed = 0x8001, ObjectShow = 0x8002, ObjectHide = 0x8003,         ObjectReorder = 0x8004, Focus = 0x8005, Selection = 0x8006, SelectionAdd = 0x8007,         SelectionRemove = 0x8008, SelectionWithin = 0x8009, StateChanged = 0x800A, LocationChanged = 0x800B,         NameChanged = 0x800C, DescriptionChanged = 0x800D, ValueChanged = 0x800E, ParentChanged = 0x800F,         HelpChanged = 0x80A0, DefaultActionChanged = 0x80B0, AcceleratorChanged = 0x80C0       };
	 enum StateFlag {         Normal = 0x00000000, Unavailable = 0x00000001, Selected = 0x00000002, Focused = 0x00000004,         Pressed = 0x00000008, Checked = 0x00000010, Mixed = 0x00000020, ReadOnly = 0x00000040,         HotTracked = 0x00000080, DefaultButton = 0x00000100, Expanded = 0x00000200, Collapsed = 0x00000400,         Busy = 0x00000800, Marqueed = 0x00002000, Animated = 0x00004000, Invisible = 0x00008000,         Offscreen = 0x00010000, Sizeable = 0x00020000, Movable = 0x00040000, SelfVoicing = 0x00080000,         Focusable = 0x00100000, Selectable = 0x00200000, Linked = 0x00400000, Traversed = 0x00800000,         MultiSelectable = 0x01000000, ExtSelectable = 0x02000000, Protected = 0x20000000, HasPopup = 0x40000000,         Modal = 0x80000000       };
	 enum Role {         NoRole = 0x00000000, TitleBar = 0x00000001, MenuBar = 0x00000002, ScrollBar = 0x00000003,         Grip = 0x00000004, Sound = 0x00000005, Cursor = 0x00000006, Caret = 0x00000007,         AlertMessage = 0x00000008, Window = 0x00000009, Client = 0x0000000A, PopupMenu = 0x0000000B,         MenuItem = 0x0000000C, ToolTip = 0x0000000D, Application = 0x0000000E, Document = 0x0000000F,         Pane = 0x00000010, Chart = 0x00000011, Dialog = 0x00000012, Border = 0x00000013,         Grouping = 0x00000014, Separator = 0x00000015, ToolBar = 0x00000016, StatusBar = 0x00000017,         Table = 0x00000018, ColumnHeader = 0x00000019, RowHeader = 0x0000001A, Column = 0x0000001B,         Row = 0x0000001C, Cell = 0x0000001D, Link = 0x0000001E, HelpBalloon = 0x0000001F,         Assistant = 0x00000020, List = 0x00000021, ListItem = 0x00000022, Tree = 0x00000023,         TreeItem = 0x00000024, PageTab = 0x00000025, PropertyPage = 0x00000026, Indicator = 0x00000027,         Graphic = 0x00000028, StaticText = 0x00000029, EditableText = 0x0000002A, PushButton = 0x0000002B,         CheckBox = 0x0000002C, RadioButton = 0x0000002D, ComboBox = 0x0000002E, ProgressBar = 0x00000030,         Dial = 0x00000031, HotkeyField = 0x00000032, Slider = 0x00000033, SpinBox = 0x00000034,         Canvas = 0x00000035, Animation = 0x00000036, Equation = 0x00000037, ButtonDropDown = 0x00000038,         ButtonMenu = 0x00000039, ButtonDropGrid = 0x0000003A, Whitespace = 0x0000003B, PageTabList = 0x0000003C,         Clock = 0x0000003D, Splitter = 0x0000003E, LayeredPane = 0x0000003F, UserRole = 0x0000ffff       };
	 enum Text {         Name = 0, Description, Value, Help,         Accelerator, UserText = 0x0000ffff       };
	 enum RelationFlag {         Unrelated = 0x00000000, Self = 0x00000001, Ancestor = 0x00000002, Child = 0x00000004,         Descendent = 0x00000008, Sibling = 0x00000010, HierarchyMask = 0x000000ff, Up = 0x00000100,         Down = 0x00000200, Left = 0x00000400, Right = 0x00000800, Covers = 0x00001000,         Covered = 0x00002000, GeometryMask = 0x0000ff00, FocusChild = 0x00010000, Label = 0x00020000,         Labelled = 0x00040000, Controller = 0x00080000, Controlled = 0x00100000, LogicalMask = 0x00ff0000       };
	 enum Action {         DefaultAction = 0, Press = -1, FirstStandardAction = Press, SetFocus = -2,         Increase = -3, Decrease = -4, Accept = -5, Cancel = -6,         Select = -7, ClearSelection = -8, RemoveSelection = -9, ExtendSelection = -10,         AddToSelection = -11, LastStandardAction = AddToSelection       };

	 static void installFactory (InterfaceFactory);
	 static void removeFactory (InterfaceFactory);
	 static UpdateHandler installUpdateHandler (UpdateHandler);
	 static RootObjectHandler installRootObjectHandler (RootObjectHandler);
	 static QAccessibleInterface * queryAccessibleInterface (QObject *);
	 static void updateAccessibility (QObject *, int who, Event reason);
	 static bool isActive ();
	 static void setRootObject (QObject *);
	 static void initialize ();
	 static void cleanup ();
	 static void installFactory (InterfaceFactory);
	 static void removeFactory (InterfaceFactory);
	 static UpdateHandler installUpdateHandler (UpdateHandler);
	 static RootObjectHandler installRootObjectHandler (RootObjectHandler);
	 static QAccessibleInterface * queryAccessibleInterface (QObject *);
	 static void updateAccessibility (QObject *, int who, Event reason);
	 static bool isActive ();
	 static void setRootObject (QObject *);
	 static void initialize ();
	 static void cleanup ();

};
$#include <QStyleFactory>

class QStyleFactory {
Q_OBJECT
signals:
public:

	 static QStringList keys ();
	 static QStyle * create (const QString &);
	 static QStringList keys ();
	 static QStyle * create (const QString &);

};
$#include <QPainter>

class QPainter {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags RenderHints;
	 enum RenderHint { Antialiasing = 0x01, TextAntialiasing = 0x02, SmoothPixmapTransform = 0x04 };
	 enum CompositionMode {         CompositionMode_SourceOver, CompositionMode_DestinationOver, CompositionMode_Clear, CompositionMode_Source,         CompositionMode_Destination, CompositionMode_SourceIn, CompositionMode_DestinationIn, CompositionMode_SourceOut,         CompositionMode_DestinationOut, CompositionMode_SourceAtop, CompositionMode_DestinationAtop, CompositionMode_Xor       };

	 QPainter ();
	 QPainter (QPaintDevice *);
	 ~QPainter ();
	 QPaintDevice * device () const;
	 bool begin (QPaintDevice *);
	 bool end ();
	 bool isActive () const;
	 void initFrom (const QWidget *widget);
	 void setCompositionMode (CompositionMode mode);
	 CompositionMode compositionMode () const;
	 const QFont & font () const;
	 void setFont (const QFont &f);
	 QFontInfo fontInfo () const;
	 void setPen (const QColor &color);
	 void setPen (const QPen &pen);
	 void setPen (Qt::PenStyle style);
	 const QPen & pen () const;
	 void setBrush (const QBrush &brush);
	 void setBrush (Qt::BrushStyle style);
	 const QBrush & brush () const;
	 void setBackgroundMode (Qt::BGMode mode);
	 Qt::BGMode backgroundMode () const;
	 QPoint brushOrigin () const;
	 void setBrushOrigin (int x, int y);
	 void setBrushOrigin (const QPoint &);
	 void setBrushOrigin (const QPointF &);
	 void setBackground (const QBrush &bg);
	 const QBrush & background () const;
	 QRegion clipRegion () const;
	 QPainterPath clipPath () const;
	 void setClipRect (const QRectF &, Qt::ClipOperation op=Qt::ReplaceClip);
	 void setClipRect (const QRect &, Qt::ClipOperation op=Qt::ReplaceClip);
	 void setClipRect (int x, int y, int w, int h, Qt::ClipOperation op=Qt::ReplaceClip);
	 void setClipRegion (const QRegion &, Qt::ClipOperation op=Qt::ReplaceClip);
	 void setClipPath (const QPainterPath &path, Qt::ClipOperation op=Qt::ReplaceClip);
	 void setClipping (bool enable);
	 bool hasClipping () const;
	 void save ();
	 void restore ();
	 void setMatrix (const QMatrix &matrix, bool combine=false);
	 const QMatrix & matrix () const;
	 const QMatrix & deviceMatrix () const;
	 void resetMatrix ();
	 void setMatrixEnabled (bool enabled);
	 bool matrixEnabled () const;
	 void scale (qreal sx, qreal sy);
	 void shear (qreal sh, qreal sv);
	 void rotate (qreal a);
	 void translate (const QPointF &offset);
	 void translate (const QPoint &offset);
	 void translate (qreal dx, qreal dy);
	 QRect window () const;
	 void setWindow (const QRect &window);
	 void setWindow (int x, int y, int w, int h);
	 QRect viewport () const;
	 void setViewport (const QRect &viewport);
	 void setViewport (int x, int y, int w, int h);
	 void setViewTransformEnabled (bool enable);
	 bool viewTransformEnabled () const;
	 void strokePath (const QPainterPath &path, const QPen &pen);
	 void fillPath (const QPainterPath &path, const QBrush &brush);
	 void drawPath (const QPainterPath &path);
	 void drawPoint (const QPointF &pt);
	 void drawPoint (const QPoint &p);
	 void drawPoint (int x, int y);
	 void drawPoints (const QPointF *points, int pointCount);
	 void drawPoints (const QPolygonF &points);
	 void drawPoints (const QPoint *points, int pointCount);
	 void drawPoints (const QPolygon &points);
	 void drawLine (const QLineF &line);
	 void drawLine (const QLine &line);
	 void drawLine (int x1, int y1, int x2, int y2);
	 void drawLine (const QPoint &p1, const QPoint &p2);
	 void drawLine (const QPointF &p1, const QPointF &p2);
	 void drawLines (const QLineF *lines, int lineCount);
	 void drawLines (const QVector< QLineF > &lines);
	 void drawLines (const QPointF *pointPairs, int lineCount);
	 void drawLines (const QVector< QPointF > &pointPairs);
	 void drawLines (const QLine *lines, int lineCount);
	 void drawLines (const QVector< QLine > &lines);
	 void drawLines (const QPoint *pointPairs, int lineCount);
	 void drawLines (const QVector< QPoint > &pointPairs);
	 void drawRect (const QRectF &rect);
	 void drawRect (int x1, int y1, int w, int h);
	 void drawRect (const QRect &rect);
	 void drawRects (const QRectF *rects, int rectCount);
	 void drawRects (const QVector< QRectF > &rectangles);
	 void drawRects (const QRect *rects, int rectCount);
	 void drawRects (const QVector< QRect > &rectangles);
	 void drawEllipse (const QRectF &r);
	 void drawEllipse (const QRect &r);
	 void drawEllipse (int x, int y, int w, int h);
	 void drawPolyline (const QPointF *points, int pointCount);
	 void drawPolyline (const QPolygonF &polyline);
	 void drawPolyline (const QPoint *points, int pointCount);
	 void drawPolyline (const QPolygon &polygon);
	 void drawPolygon (const QPointF *points, int pointCount, Qt::FillRule fillRule=Qt::OddEvenFill);
	 void drawPolygon (const QPolygonF &polygon, Qt::FillRule fillRule=Qt::OddEvenFill);
	 void drawPolygon (const QPoint *points, int pointCount, Qt::FillRule fillRule=Qt::OddEvenFill);
	 void drawPolygon (const QPolygon &polygon, Qt::FillRule fillRule=Qt::OddEvenFill);
	 void drawConvexPolygon (const QPointF *points, int pointCount);
	 void drawConvexPolygon (const QPolygonF &polygon);
	 void drawConvexPolygon (const QPoint *points, int pointCount);
	 void drawConvexPolygon (const QPolygon &polygon);
	 void drawArc (const QRectF &rect, int a, int alen);
	 void drawArc (const QRect &, int a, int alen);
	 void drawArc (int x, int y, int w, int h, int a, int alen);
	 void drawPie (const QRectF &rect, int a, int alen);
	 void drawPie (int x, int y, int w, int h, int a, int alen);
	 void drawPie (const QRect &, int a, int alen);
	 void drawChord (const QRectF &rect, int a, int alen);
	 void drawChord (int x, int y, int w, int h, int a, int alen);
	 void drawChord (const QRect &, int a, int alen);
	 void drawRoundRect (const QRectF &r, int xround=25, int yround=25);
	 void drawRoundRect (int x, int y, int w, int h, int=25, int=25);
	 void drawRoundRect (const QRect &r, int xround=25, int yround=25);
	 void drawTiledPixmap (const QRectF &rect, const QPixmap &pm, const QPointF &offset=QPointF());
	 void drawTiledPixmap (int x, int y, int w, int h, const QPixmap &, int sx=0, int sy=0);
	 void drawTiledPixmap (const QRect &, const QPixmap &, const QPoint &=QPoint());
	 void drawPicture (const QPointF &p, const QPicture &picture);
	 void drawPicture (int x, int y, const QPicture &picture);
	 void drawPicture (const QPoint &p, const QPicture &picture);
	 void drawPixmap (const QRectF &targetRect, const QPixmap &pixmap, const QRectF &sourceRect);
	 void drawPixmap (const QRect &targetRect, const QPixmap &pixmap, const QRect &sourceRect);
	 void drawPixmap (int x, int y, int w, int h, const QPixmap &pm, int sx, int sy, int sw, int sh);
	 void drawPixmap (int x, int y, const QPixmap &pm, int sx, int sy, int sw, int sh);
	 void drawPixmap (const QPointF &p, const QPixmap &pm, const QRectF &sr);
	 void drawPixmap (const QPoint &p, const QPixmap &pm, const QRect &sr);
	 void drawPixmap (const QPointF &p, const QPixmap &pm);
	 void drawPixmap (const QPoint &p, const QPixmap &pm);
	 void drawPixmap (int x, int y, const QPixmap &pm);
	 void drawPixmap (const QRect &r, const QPixmap &pm);
	 void drawPixmap (int x, int y, int w, int h, const QPixmap &pm);
	 void drawImage (const QRectF &targetRect, const QImage &image, const QRectF &sourceRect, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void drawImage (const QRect &targetRect, const QImage &image, const QRect &sourceRect, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void drawImage (const QPointF &p, const QImage &image, const QRectF &sr, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void drawImage (const QPoint &p, const QImage &image, const QRect &sr, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void drawImage (const QRectF &r, const QImage &image);
	 void drawImage (const QRect &r, const QImage &image);
	 void drawImage (const QPointF &p, const QImage &image);
	 void drawImage (const QPoint &p, const QImage &image);
	 void drawImage (int x, int y, const QImage &image, int sx=0, int sy=0, int sw=-1, int sh=-1, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void setLayoutDirection (Qt::LayoutDirection direction);
	 Qt::LayoutDirection layoutDirection () const;
	 void drawText (const QPointF &p, const QString &s);
	 void drawText (const QPoint &p, const QString &s);
	 void drawText (int x, int y, const QString &s);
	 void drawText (const QRectF &r, int flags, const QString &text, QRectF *br=0);
	 void drawText (const QRect &r, int flags, const QString &text, QRect *br=0);
	 void drawText (int x, int y, int w, int h, int flags, const QString &text, QRect *br=0);
	 void drawText (const QRectF &r, const QString &text, const QTextOption &o=QTextOption());
	 QRectF boundingRect (const QRectF &rect, int flags, const QString &text);
	 QRect boundingRect (const QRect &rect, int flags, const QString &text);
	 QRect boundingRect (int x, int y, int w, int h, int flags, const QString &text);
	 QRectF boundingRect (const QRectF &rect, const QString &text, const QTextOption &o=QTextOption());
	 void drawTextItem (const QPointF &p, const QTextItem &ti);
	 void drawTextItem (int x, int y, const QTextItem &ti);
	 void drawTextItem (const QPoint &p, const QTextItem &ti);
	 void fillRect (const QRectF &, const QBrush &);
	 void fillRect (int x, int y, int w, int h, const QBrush &);
	 void fillRect (const QRect &, const QBrush &);
	 void eraseRect (const QRectF &);
	 void eraseRect (int x, int y, int w, int h);
	 void eraseRect (const QRect &);
	 void setRenderHint (RenderHint hint, bool on=true);
	 RenderHints renderHints () const;
	 QPaintEngine * paintEngine () const;
	 static void setRedirected (const QPaintDevice *device, QPaintDevice *replacement, const QPoint &offset=QPoint());
	 static QPaintDevice * redirected (const QPaintDevice *device, QPoint *offset=0);
	 static void restoreRedirected (const QPaintDevice *device);

};
$#include <QPaintEngine>

class QPaintEngine {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags PaintEngineFeatures;
	 typedef LuaQtGenericFlags DirtyFlags;
	 enum PaintEngineFeature {         PrimitiveTransform = 0x00000001, PatternTransform = 0x00000002, PixmapTransform = 0x00000004, PatternBrush = 0x00000008,         LinearGradientFill = 0x00000010, RadialGradientFill = 0x00000020, ConicalGradientFill = 0x00000040, AlphaBlend = 0x00000080,         PorterDuff = 0x00000100, PainterPaths = 0x00000200, Antialiasing = 0x00000400, BrushStroke = 0x00000800,         PaintOutsidePaintEvent = 0x20000000, AllFeatures = 0xffffffff       };
	 enum DirtyFlag {         DirtyPen = 0x0001, DirtyBrush = 0x0002, DirtyBrushOrigin = 0x0004, DirtyFont = 0x0008,         DirtyBackground = 0x0010, DirtyBackgroundMode = 0x0020, DirtyTransform = 0x0040, DirtyClipRegion = 0x0080,         DirtyClipPath = 0x0100, DirtyHints = 0x0200, DirtyCompositionMode = 0x0400, AllDirty = 0xffff       };
	 enum PolygonDrawMode { OddEvenMode, WindingMode, ConvexMode, PolylineMode };
	 enum Type {         X11, Windows, QuickDraw, CoreGraphics,         MacPrinter, QWindowSystem, PostScript, OpenGL,         Picture, SVG, Raster, User = 50,         MaxUser = 100       };

	 QPaintEngine (PaintEngineFeatures features=0);
	 virtual ~QPaintEngine ();
	 bool isActive () const;
	 void setActive (bool newState);
	 virtual bool begin (QPaintDevice *pdev)=0;
	 virtual bool end ()=0;
	 virtual void updateState (const QPaintEngineState &state)=0;
	 virtual void drawRects (const QRect *rects, int rectCount);
	 virtual void drawRects (const QRectF *rects, int rectCount);
	 virtual void drawLines (const QLine *lines, int lineCount);
	 virtual void drawLines (const QLineF *lines, int lineCount);
	 virtual void drawEllipse (const QRectF &r);
	 virtual void drawEllipse (const QRect &r);
	 virtual void drawPath (const QPainterPath &path);
	 virtual void drawPoints (const QPointF *points, int pointCount);
	 virtual void drawPoints (const QPoint *points, int pointCount);
	 virtual void drawPolygon (const QPointF *points, int pointCount, PolygonDrawMode mode);
	 virtual void drawPolygon (const QPoint *points, int pointCount, PolygonDrawMode mode);
	 virtual void drawPixmap (const QRectF &r, const QPixmap &pm, const QRectF &sr)=0;
	 virtual void drawTextItem (const QPointF &p, const QTextItem &textItem);
	 virtual void drawTiledPixmap (const QRectF &r, const QPixmap &pixmap, const QPointF &s);
	 virtual void drawImage (const QRectF &r, const QImage &pm, const QRectF &sr, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 void setPaintDevice (QPaintDevice *device);
	 QPaintDevice * paintDevice () const;
	 void setSystemClip (const QRegion &baseClip);
	 QRegion systemClip () const;
	 virtual QPoint coordinateOffset () const;
	 virtual Type type () const =0;
	 void fix_neg_rect (int *x, int *y, int *w, int *h);
	 bool testDirty (DirtyFlags df);
	 void setDirty (DirtyFlags df);
	 void clearDirty (DirtyFlags df);
	 bool hasFeature (PaintEngineFeatures feature) const;
	 QPainter * painter () const;
	 void syncState ();
	
};
$#include <QPalette>

class QPalette {
Q_OBJECT
signals:
public:
	 enum ColorGroup {         Active, Disabled, Inactive, NColorGroups,         Current, All, Normal = Active       };
	 enum ColorRole {         Foreground, Button, Light, Midlight,         Dark, Mid, Text, BrightText,         ButtonText, Base, Background, Shadow,         Highlight, HighlightedText, Link, LinkVisited,         AlternateBase, NColorRoles, NoRole = NColorRoles       };

	 QPalette ();
	 QPalette (const QColor &button);
	 QPalette (Qt::GlobalColor button);
	 QPalette (const QColor &button, const QColor &background);
	 QPalette (const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
	 QPalette (const QColor &foreground, const QColor &background, const QColor &light, const QColor &dark, const QColor &mid, const QColor &text, const QColor &base);
	 QPalette (const QPalette &palette);
	 ~QPalette ();
	 QPalette & operator= (const QPalette &palette);
	 operator QVariant () const;
	 ColorGroup currentColorGroup () const;
	 void setCurrentColorGroup (ColorGroup cg);
	 const QColor & color (ColorGroup cg, ColorRole cr) const;
	 const QBrush & brush (ColorGroup cg, ColorRole cr) const;
	 void setColor (ColorGroup cg, ColorRole cr, const QColor &color);
	 void setColor (ColorRole cr, const QColor &color);
	 void setBrush (ColorRole cr, const QBrush &brush);
	 void setBrush (ColorGroup cg, ColorRole cr, const QBrush &brush);
	 void setColorGroup (ColorGroup cr, const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
	 bool isEqual (ColorGroup cr1, ColorGroup cr2) const;
	 const QColor & color (ColorRole cr) const;
	 const QBrush & brush (ColorRole cr) const;
	 const QBrush & foreground () const;
	 const QBrush & button () const;
	 const QBrush & light () const;
	 const QBrush & dark () const;
	 const QBrush & mid () const;
	 const QBrush & text () const;
	 const QBrush & base () const;
	 const QBrush & alternateBase () const;
	 const QBrush & background () const;
	 const QBrush & midlight () const;
	 const QBrush & brightText () const;
	 const QBrush & buttonText () const;
	 const QBrush & shadow () const;
	 const QBrush & highlight () const;
	 const QBrush & highlightedText () const;
	 const QBrush & link () const;
	 const QBrush & linkVisited () const;
	 bool operator== (const QPalette &p) const;
	 bool operator!= (const QPalette &p) const;
	 bool isCopyOf (const QPalette &p) const;
	 int serialNumber () const;
	 QPalette resolve (const QPalette &) const;
	 uint resolve () const;
	 void resolve (uint mask);

};
$#include <QPaintDevice>

class QPaintDevice {
Q_OBJECT
signals:
public:
	 enum PaintDeviceMetric {         PdmWidth = 1, PdmHeight, PdmWidthMM, PdmHeightMM,         PdmNumColors, PdmDepth, PdmDpiX, PdmDpiY,         PdmPhysicalDpiX, PdmPhysicalDpiY       };

	 virtual ~QPaintDevice ();
	 virtual int devType () const;
	 bool paintingActive () const;
	 virtual QPaintEngine * paintEngine () const =0;
	 int width () const;
	 int height () const;
	 int widthMM () const;
	 int heightMM () const;
	 int logicalDpiX () const;
	 int logicalDpiY () const;
	 int physicalDpiX () const;
	 int physicalDpiY () const;
	 int numColors () const;
	 int depth () const;
		protected  virtual int metric (PaintDeviceMetric metric) const;

};
$#include <QCursor>

class QCursor {
Q_OBJECT
signals:
public:

	 QCursor ();
	 QCursor (Qt::CursorShape shape);
	 QCursor (const QBitmap &bitmap, const QBitmap &mask, int hotX=-1, int hotY=-1);
	 QCursor (const QPixmap &pixmap, int hotX=-1, int hotY=-1);
	 QCursor (const QCursor &cursor);
	 ~QCursor ();
	 QCursor & operator= (const QCursor &cursor);
	 operator QVariant () const;
	 Qt::CursorShape shape () const;
	 void setShape (Qt::CursorShape newShape);
	 const QBitmap * bitmap () const;
	 const QBitmap * mask () const;
	 QPixmap pixmap () const;
	 QPoint hotSpot () const;
	 static QPoint pos ();
	 static void setPos (int x, int y);
	 static void setPos (const QPoint &p);

};
$#include <QWhatsThis>

class QWhatsThis {
Q_OBJECT
signals:
public:

	 static void enterWhatsThisMode ();
	 static bool inWhatsThisMode ();
	 static void leaveWhatsThisMode ();
	 static void showText (const QPoint &pos, const QString &text, QWidget *w=0);
	 static void hideText ();
	 static QAction * createAction (QObject *parent=0);
	 static void enterWhatsThisMode ();
	 static bool inWhatsThisMode ();
	 static void leaveWhatsThisMode ();
	 static void showText (const QPoint &pos, const QString &text, QWidget *w=0);
	 static void hideText ();
	 static QAction * createAction (QObject *parent=0);

};
$#include <QToolTip>

class QToolTip {
Q_OBJECT
signals:
public:

	 static void showText (const QPoint &pos, const QString &text, QWidget *w=0);
	 static QPalette palette ();
	 static void showText (const QPoint &pos, const QString &text, QWidget *w=0);
	 static QPalette palette ();

};
$#include <QLayoutItem>

class QLayoutItem {
Q_OBJECT
signals:
public:

	 QLayoutItem (Qt::Alignment alignment=0);
	 virtual ~QLayoutItem ();
	 virtual QSize sizeHint () const =0;
	 virtual QSize minimumSize () const =0;
	 virtual QSize maximumSize () const =0;
	 virtual Qt::Orientations expandingDirections () const =0;
	 virtual void setGeometry (const QRect &)=0;
	 virtual QRect geometry () const =0;
	 virtual bool isEmpty () const =0;
	 virtual bool hasHeightForWidth () const;
	 virtual int heightForWidth (int) const;
	 virtual int minimumHeightForWidth (int) const;
	 virtual void invalidate ();
	 virtual QWidget * widget ();
	 virtual QLayout * layout ();
	 virtual QSpacerItem * spacerItem ();
	 Qt::Alignment alignment () const;
	 void setAlignment (Qt::Alignment a);

};
$#include <QImageIOHandler>

class QImageIOHandler {
Q_OBJECT
signals:
public:
	 enum ImageOption {         Size, ClipRect, Description, ScaledClipRect,         ScaledSize, CompressionRatio, Gamma, Quality,         Name, SubType, IncrementalReading, Endianness       };

	 QImageIOHandler ();
	 virtual ~QImageIOHandler ();
	 void setDevice (QIODevice *device);
	 void setFormat (const QByteArray &format);
	 QByteArray format () const;
	 virtual QByteArray name () const =0;
	 virtual bool canRead () const =0;
	 virtual bool read (QImage *image)=0;
	 virtual bool write (const QImage &image);
	 virtual QVariant option (ImageOption option) const;
	 virtual void setOption (ImageOption option, const QVariant &value);
	 virtual bool supportsOption (ImageOption option) const;
	 virtual bool jumpToNextImage ();
	 virtual bool jumpToImage (int imageNumber);
	 virtual int loopCount () const;
	 virtual int imageCount () const;
	 virtual int nextImageDelay () const;
	 virtual int currentImageNumber () const;
	 virtual QRect currentImageRect () const;
	
};
$#include <QTextDocumentFragment>

class QTextDocumentFragment {
Q_OBJECT
signals:
public:

	 QTextDocumentFragment ();
	 QTextDocumentFragment (const QTextDocument *document);
	 QTextDocumentFragment (const QTextCursor &range);
	 QTextDocumentFragment (const QTextDocumentFragment &rhs);
	 QTextDocumentFragment & operator= (const QTextDocumentFragment &rhs);
	 ~QTextDocumentFragment ();
	 bool isEmpty () const;
	 QString toPlainText () const;
	 QString toHtml () const;
	 static QTextDocumentFragment fromPlainText (const QString &plainText);
	 static QTextDocumentFragment fromHtml (const QString &html);

};
$#include <QTextCursor>

class QTextCursor {
Q_OBJECT
signals:
public:
	 enum MoveMode { MoveAnchor, KeepAnchor };
	 enum MoveOperation {         NoMove, Start, Up, StartOfLine,         StartOfBlock, StartOfWord, PreviousBlock, PreviousCharacter,         PreviousWord, Left, WordLeft, End,         Down, EndOfLine, EndOfWord, EndOfBlock,         NextBlock, NextCharacter, NextWord, Right,         WordRight       };
	 enum SelectionType { WordUnderCursor, LineUnderCursor };

	 QTextCursor ();
	 QTextCursor (QTextDocument *document);
	 QTextCursor (QTextDocumentPrivate *p, int pos);
	 QTextCursor (QTextFrame *frame);
	 QTextCursor (const QTextBlock &block);
	 QTextCursor (QTextCursorPrivate *d);
	 QTextCursor (const QTextCursor &cursor);
	 QTextCursor & operator= (const QTextCursor &other);
	 ~QTextCursor ();
	 bool isNull () const;
	 void setPosition (int pos, MoveMode mode=MoveAnchor);
	 int position () const;
	 int anchor () const;
	 void insertText (const QString &text);
	 void insertText (const QString &text, const QTextCharFormat &format);
	 bool movePosition (MoveOperation op, MoveMode=MoveAnchor, int n=1);
	 void deleteChar ();
	 void deletePreviousChar ();
	 void select (SelectionType selection);
	 bool hasSelection () const;
	 bool hasComplexSelection () const;
	 void removeSelectedText ();
	 void clearSelection ();
	 int selectionStart () const;
	 int selectionEnd () const;
	 QString selectedText () const;
	 QTextDocumentFragment selection () const;
	 void selectedTableCells (int *firstRow, int *numRows, int *firstColumn, int *numColumns) const;
	 QTextBlock block () const;
	 QTextCharFormat charFormat () const;
	 void setCharFormat (const QTextCharFormat &format);
	 void mergeCharFormat (const QTextCharFormat &modifier);
	 QTextBlockFormat blockFormat () const;
	 void setBlockFormat (const QTextBlockFormat &format);
	 void mergeBlockFormat (const QTextBlockFormat &modifier);
	 QTextCharFormat blockCharFormat () const;
	 void setBlockCharFormat (const QTextCharFormat &format);
	 void mergeBlockCharFormat (const QTextCharFormat &modifier);
	 bool atBlockStart () const;
	 bool atBlockEnd () const;
	 bool atStart () const;
	 bool atEnd () const;
	 void insertBlock ();
	 void insertBlock (const QTextBlockFormat &format);
	 void insertBlock (const QTextBlockFormat &format, const QTextCharFormat &charFormat);
	 QTextList * insertList (const QTextListFormat &format);
	 QTextList * insertList (QTextListFormat::Style style);
	 QTextList * createList (const QTextListFormat &format);
	 QTextList * createList (QTextListFormat::Style style);
	 QTextList * currentList () const;
	 QTextTable * insertTable (int rows, int cols, const QTextTableFormat &format);
	 QTextTable * insertTable (int rows, int cols);
	 QTextTable * currentTable () const;
	 QTextFrame * insertFrame (const QTextFrameFormat &format);
	 QTextFrame * currentFrame () const;
	 void insertFragment (const QTextDocumentFragment &fragment);
	 void insertImage (const QTextImageFormat &format);
	 void insertImage (const QString &name);
	 void beginEditBlock ();
	 void joinPreviousEditBlock ();
	 void endEditBlock ();
	 bool operator!= (const QTextCursor &rhs) const;
	 bool operator< (const QTextCursor &rhs) const;
	 bool operator<= (const QTextCursor &rhs) const;
	 bool operator== (const QTextCursor &rhs) const;
	 bool operator>= (const QTextCursor &rhs) const;
	 bool operator> (const QTextCursor &rhs) const;
	 bool isCopyOf (const QTextCursor &other) const;

};
$#include <QTextFragment>

class QTextFragment {
Q_OBJECT
signals:
public:

	 QTextFragment (const QTextDocumentPrivate *priv, int f, int fe);
	 QTextFragment ();
	 QTextFragment (const QTextFragment &o);
	 QTextFragment & operator= (const QTextFragment &o);
	 bool isValid () const;
	 bool operator== (const QTextFragment &o) const;
	 bool operator!= (const QTextFragment &o) const;
	 bool operator< (const QTextFragment &o) const;
	 int position () const;
	 int length () const;
	 bool contains (int position) const;
	 QTextCharFormat charFormat () const;
	 int charFormatIndex () const;
	 QString text () const;

};
$#include <QColormap>

class QColormap {
Q_OBJECT
signals:
public:
	 enum Mode { Direct, Indexed, Gray };

	 QColormap (const QColormap &colormap);
	 ~QColormap ();
	 QColormap & operator= (const QColormap &colormap);
	 Mode mode () const;
	 int depth () const;
	 int size () const;
	 uint pixel (const QColor &color) const;
	 const QColor colorAt (uint pixel) const;
	 const QVector< QColor > colormap () const;
	 static void initialize ();
	 static void cleanup ();
	 static QColormap instance (int screen=-1);

};
$#include <QIcon>

class QIcon {
Q_OBJECT
signals:
public:
	 enum Mode { Normal, Disabled, Active };
	 enum State { On, Off };

	 QIcon ();
	 QIcon (const QPixmap &pixmap);
	 QIcon (const QIcon &other);
	 QIcon (const QString &fileName);
	 QIcon (QIconEngine *engine);
	 ~QIcon ();
	 QIcon & operator= (const QIcon &other);
	 operator QVariant () const;
	 QPixmap pixmap (const QSize &size, Mode mode=Normal, State state=Off) const;
	 QPixmap pixmap (int w, int h, Mode mode=Normal, State state=Off) const;
	 QPixmap pixmap (int extent, Mode mode=Normal, State state=Off) const;
	 QSize actualSize (const QSize &size, Mode mode=Normal, State state=Off) const;
	 void paint (QPainter *painter, const QRect &rect, Qt::Alignment alignment=Qt::AlignCenter, Mode mode=Normal, State state=Off) const;
	 void paint (QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment=Qt::AlignCenter, Mode mode=Normal, State state=Off) const;
	 bool isNull () const;
	 bool isDetached () const;
	 int serialNumber () const;
	 void addPixmap (const QPixmap &pixmap, Mode mode=Normal, State state=Off);
	 void addFile (const QString &fileName, const QSize &size=QSize(), Mode mode=Normal, State state=Off);

};
$#include <QItemEditorFactory>

class QItemEditorFactory {
Q_OBJECT
signals:
public:

	 QItemEditorFactory ();
	 virtual ~QItemEditorFactory ();
	 virtual QWidget * createEditor (QVariant::Type type, QWidget *parent) const;
	 virtual QByteArray valuePropertyName (QVariant::Type type) const;
	 void registerEditor (QVariant::Type type, QItemEditorCreatorBase *creator);
	 static const QItemEditorFactory * defaultFactory ();
	 static void setDefaultFactory (QItemEditorFactory *factory);

};
$#include <QColor>

class QColor {
Q_OBJECT
signals:
public:
	 enum Spec { Invalid, Rgb, Hsv, Cmyk };

	 QColor ();
	 QColor (Qt::GlobalColor color);
	 QColor (int r, int g, int b, int a=255);
	 QColor (QRgb rgb);
	 QColor (const QString &name);
	 QColor (const char *name);
	 QColor (const QColor &color);
	 bool isValid () const;
	 QString name () const;
	 void setNamedColor (const QString &name);
	 Spec spec () const;
	 int alpha () const;
	 void setAlpha (int alpha);
	 qreal alphaF () const;
	 void setAlphaF (qreal alpha);
	 int red () const;
	 int green () const;
	 int blue () const;
	 void setRed (int red);
	 void setGreen (int green);
	 void setBlue (int blue);
	 qreal redF () const;
	 qreal greenF () const;
	 qreal blueF () const;
	 void setRedF (qreal red);
	 void setGreenF (qreal green);
	 void setBlueF (qreal blue);
	 void getRgb (int *r, int *g, int *b, int *a=0) const;
	 void setRgb (int r, int g, int b, int a=255);
	 void getRgbF (qreal *r, qreal *g, qreal *b, qreal *a=0) const;
	 void setRgbF (qreal r, qreal g, qreal b, qreal a=1.0);
	 QRgb rgba () const;
	 void setRgba (QRgb rgba);
	 QRgb rgb () const;
	 void setRgb (QRgb rgb);
	 int hue () const;
	 int saturation () const;
	 int value () const;
	 qreal hueF () const;
	 qreal saturationF () const;
	 qreal valueF () const;
	 void getHsv (int *h, int *s, int *v, int *a=0) const;
	 void setHsv (int h, int s, int v, int a=255);
	 void getHsvF (qreal *h, qreal *s, qreal *v, qreal *a=0) const;
	 void setHsvF (qreal h, qreal s, qreal v, qreal a=1.0);
	 int cyan () const;
	 int magenta () const;
	 int yellow () const;
	 int black () const;
	 qreal cyanF () const;
	 qreal magentaF () const;
	 qreal yellowF () const;
	 qreal blackF () const;
	 void getCmyk (int *c, int *m, int *y, int *k, int *a=0);
	 void setCmyk (int c, int m, int y, int k, int a=255);
	 void getCmykF (qreal *c, qreal *m, qreal *y, qreal *k, qreal *a=0);
	 void setCmykF (qreal c, qreal m, qreal y, qreal k, qreal a=1.0);
	 QColor toRgb () const;
	 QColor toHsv () const;
	 QColor toCmyk () const;
	 QColor convertTo (Spec colorSpec) const;
	 QColor light (int f=150) const;
	 QColor dark (int f=200) const;
	 QColor & operator= (const QColor &);
	 QColor & operator= (Qt::GlobalColor color);
	 bool operator== (const QColor &c) const;
	 bool operator!= (const QColor &c) const;
	 operator QVariant () const;
	 static QStringList colorNames ();
	 static QColor fromRgb (QRgb rgb);
	 static QColor fromRgba (QRgb rgba);
	 static QColor fromRgb (int r, int g, int b, int a=255);
	 static QColor fromRgbF (qreal r, qreal g, qreal b, qreal a=1.0);
	 static QColor fromHsv (int h, int s, int v, int a=255);
	 static QColor fromHsvF (qreal h, qreal s, qreal v, qreal a=1.0);
	 static QColor fromCmyk (int c, int m, int y, int k, int a=255);
	 static QColor fromCmykF (qreal c, qreal m, qreal y, qreal k, qreal a=1.0);

};
$#include <QMatrix>

class QMatrix {
Q_OBJECT
signals:
public:

	 QMatrix ();
	 QMatrix (qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
	 QMatrix (const QMatrix &matrix);
	 void setMatrix (qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
	 qreal m11 () const;
	 qreal m12 () const;
	 qreal m21 () const;
	 qreal m22 () const;
	 qreal dx () const;
	 qreal dy () const;
	 void map (int x, int y, int *tx, int *ty) const;
	 void map (qreal x, qreal y, qreal *tx, qreal *ty) const;
	 QRect mapRect (const QRect &) const;
	 QRectF mapRect (const QRectF &) const;
	 QPoint map (const QPoint &p) const;
	 QPointF map (const QPointF &p) const;
	 QLine map (const QLine &l) const;
	 QLineF map (const QLineF &l) const;
	 QPolygonF map (const QPolygonF &a) const;
	 QPolygon map (const QPolygon &a) const;
	 QRegion map (const QRegion &r) const;
	 QPainterPath map (const QPainterPath &p) const;
	 QPolygon mapToPolygon (const QRect &r) const;
	 void reset ();
	 bool isIdentity () const;
	 QMatrix & translate (qreal dx, qreal dy);
	 QMatrix & scale (qreal sx, qreal sy);
	 QMatrix & shear (qreal sh, qreal sv);
	 QMatrix & rotate (qreal a);
	 bool isInvertible () const;
	 qreal det () const;
	 QMatrix inverted (bool *invertible=0) const;
	 bool operator== (const QMatrix &) const;
	 bool operator!= (const QMatrix &) const;
	 QMatrix & operator *= (const QMatrix &);
	 QMatrix operator * (const QMatrix &o) const;
	 QMatrix & operator= (const QMatrix &);

};
$#include <QTextLayout>

class QTextLayout {
Q_OBJECT
signals:
public:
	 enum CursorMode { SkipCharacters, SkipWords };
	 struct FormatRange;

	 QTextLayout ();
	 QTextLayout (const QString &text);
	 QTextLayout (const QString &text, const QFont &font, QPaintDevice *paintdevice=0);
	 QTextLayout (const QTextBlock &b);
	 ~QTextLayout ();
	 void setFont (const QFont &f);
	 QFont font () const;
	 void setText (const QString& );
	 QString text () const;
	 void setTextOption (const QTextOption &option);
	 QTextOption textOption () const;
	 void setPreeditArea (int position, const QString &text);
	 int preeditAreaPosition () const;
	 QString preeditAreaText () const;
	 void setAdditionalFormats (const QList< FormatRange > &overrides);
	 QList< FormatRange > additionalFormats () const;
	 void clearAdditionalFormats ();
	 void setCacheEnabled (bool enable);
	 bool cacheEnabled () const;
	 void beginLayout ();
	 void endLayout ();
	 QTextLine createLine ();
	 int lineCount () const;
	 QTextLine lineAt (int i) const;
	 QTextLine lineForTextPosition (int pos) const;
	 bool isValidCursorPosition (int pos) const;
	 int nextCursorPosition (int oldPos, CursorMode mode=SkipCharacters) const;
	 int previousCursorPosition (int oldPos, CursorMode mode=SkipCharacters) const;
	 void draw (QPainter *p, const QPointF &pos, const QVector< FormatRange > &selections=QVector< FormatRange >(), const QRectF &clip=QRectF()) const;
	 void drawCursor (QPainter *p, const QPointF &pos, int cursorPosition) const;
	 QPointF position () const;
	 void setPosition (const QPointF &p);
	 QRectF boundingRect () const;
	 qreal minimumWidth () const;
	 qreal maximumWidth () const;
	 QTextEngine * engine () const;

};
$#include <QTextInlineObject>

class QTextInlineObject {
Q_OBJECT
signals:
public:

	 QTextInlineObject (int i, QTextEngine *e);
	 QTextInlineObject ();
	 bool isValid () const;
	 QRectF rect () const;
	 qreal width () const;
	 qreal ascent () const;
	 qreal descent () const;
	 qreal height () const;
	 Qt::LayoutDirection textDirection () const;
	 void setWidth (qreal w);
	 void setAscent (qreal a);
	 void setDescent (qreal d);
	 int textPosition () const;
	 int formatIndex () const;
	 QTextFormat format () const;

};
$#include <QAccessibleBridge>

class QAccessibleBridge {
Q_OBJECT
signals:
public:

	 virtual ~QAccessibleBridge ();
	 virtual void setRootObject (QAccessibleInterface *)=0;
	 virtual void notifyAccessibilityUpdate (int, QAccessibleInterface *, int)=0;

};
$#include <QImageReader>

class QImageReader {
Q_OBJECT
signals:
public:
	 enum ImageReaderError {         UnknownError, FileNotFoundError, DeviceError, UnsupportedFormatError,         InvalidDataError       };

	 QImageReader ();
	 QImageReader (QIODevice *device, const QByteArray &format=QByteArray());
	 QImageReader (const QString &fileName, const QByteArray &format=QByteArray());
	 ~QImageReader ();
	 void setFormat (const QByteArray &format);
	 QByteArray format () const;
	 void setDevice (QIODevice *device);
	 void setFileName (const QString &fileName);
	 QString fileName () const;
	 QSize size () const;
	 void setClipRect (const QRect &rect);
	 QRect clipRect () const;
	 void setScaledSize (const QSize &size);
	 QSize scaledSize () const;
	 void setScaledClipRect (const QRect &rect);
	 QRect scaledClipRect () const;
	 bool canRead () const;
	 QImage read ();
	 bool jumpToNextImage ();
	 bool jumpToImage (int imageNumber);
	 int loopCount () const;
	 int imageCount () const;
	 int nextImageDelay () const;
	 int currentImageNumber () const;
	 QRect currentImageRect () const;
	 ImageReaderError error () const;
	 QString errorString () const;
	 static QByteArray imageFormat (const QString &fileName);
	 static QByteArray imageFormat (QIODevice *device);
	 static QList< QByteArray > supportedImageFormats ();

};
$#include <QTreeWidgetItem>

class QTreeWidgetItem {
Q_OBJECT
signals:
public:
	 enum { Type = 0, UserType = 1000 };

	 QTreeWidgetItem (int type=Type);
	 QTreeWidgetItem (QTreeWidget *view, int type=Type);
	 QTreeWidgetItem (QTreeWidget *view, QTreeWidgetItem *after, int type=Type);
	 QTreeWidgetItem (QTreeWidgetItem *parent, int type=Type);
	 QTreeWidgetItem (QTreeWidgetItem *parent, QTreeWidgetItem *after, int type=Type);
	 virtual ~QTreeWidgetItem ();
	 virtual QTreeWidgetItem * clone () const;
	 QTreeWidget * treeWidget () const;
	 Qt::ItemFlags flags () const;
	 void setFlags (Qt::ItemFlags flags);
	 QString text (int column) const;
	 void setText (int column, const QString &text);
	 QIcon icon (int column) const;
	 void setIcon (int column, const QIcon &icon);
	 QString statusTip (int column) const;
	 void setStatusTip (int column, const QString &statusTip);
	 QString toolTip (int column) const;
	 void setToolTip (int column, const QString &toolTip);
	 QString whatsThis (int column) const;
	 void setWhatsThis (int column, const QString &whatsThis);
	 QFont font (int column) const;
	 void setFont (int column, const QFont &font);
	 int textAlignment (int column) const;
	 void setTextAlignment (int column, int alignment);
	 QColor backgroundColor (int column) const;
	 void setBackgroundColor (int column, const QColor &color);
	 QColor textColor (int column) const;
	 void setTextColor (int column, const QColor &color);
	 Qt::CheckState checkState (int column) const;
	 void setCheckState (int column, Qt::CheckState state);
	 virtual QVariant data (int column, int role) const;
	 virtual void setData (int column, int role, const QVariant &value);
	 virtual bool operator< (const QTreeWidgetItem &other) const;
	 virtual void read (QDataStream &in);
	 virtual void write (QDataStream &out) const;
	 QTreeWidgetItem & operator= (const QTreeWidgetItem &other);
	 QTreeWidgetItem * parent () const;
	 QTreeWidgetItem * child (int index) const;
	 int childCount () const;
	 int columnCount () const;
	 int indexOfChild (QTreeWidgetItem *child) const;
	 void addChild (QTreeWidgetItem *child);
	 void insertChild (int index, QTreeWidgetItem *child);
	 QTreeWidgetItem * takeChild (int index);
	 int type () const;

};
$#include <QFontMetrics>

class QFontMetrics {
Q_OBJECT
signals:
public:

	 int ascent () const;
	 int descent () const;
	 int height () const;
	 int leading () const;
	 int lineSpacing () const;
	 int minLeftBearing () const;
	 int minRightBearing () const;
	 int maxWidth () const;
	 bool inFont (QChar) const;
	 int leftBearing (QChar) const;
	 int rightBearing (QChar) const;
	 int width (const QString &, int len=-1) const;
	 int width (QChar) const;
	 int charWidth (const QString &str, int pos) const;
	 QRect boundingRect (QChar) const;
	 QRect boundingRect (const QString &text) const;
	 QRect boundingRect (const QRect &r, int flags, const QString &text, int tabstops=0, int *tabarray=0) const;
	 QRect boundingRect (int x, int y, int w, int h, int flags, const QString &text, int tabstops=0, int *tabarray=0) const;
	 QSize size (int flags, const QString &str, int tabstops=0, int *tabarray=0) const;
	 int underlinePos () const;
	 int overlinePos () const;
	 int strikeOutPos () const;
	 int lineWidth () const;
	 bool operator== (const QFontMetrics &other);
	 bool operator!= (const QFontMetrics &other);

};
$#include <QIconEngine>

class QIconEngine {
Q_OBJECT
signals:
public:

	 virtual ~QIconEngine ();
	 virtual void paint (QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state)=0;
	 virtual QSize actualSize (const QSize &size, QIcon::Mode mode, QIcon::State state);
	 virtual QPixmap pixmap (const QSize &size, QIcon::Mode mode, QIcon::State state);
	 virtual void addPixmap (const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
	 virtual void addFile (const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);

};
$#include <QItemEditorCreatorBase>

class QItemEditorCreatorBase {
Q_OBJECT
signals:
public:

	 virtual ~QItemEditorCreatorBase ();
	 virtual QWidget * createWidget (QWidget *parent) const =0;
	 virtual QByteArray valuePropertyName () const =0;

};
$#include <QPixmapCache>

class QPixmapCache {
Q_OBJECT
signals:
public:

	 static int cacheLimit ();
	 static void setCacheLimit (int);
	 static QPixmap * find (const QString &key);
	 static bool find (const QString &key, QPixmap &);
	 static bool insert (const QString &key, const QPixmap &);
	 static void remove (const QString &key);
	 static void clear ();
	 static int cacheLimit ();
	 static void setCacheLimit (int);
	 static QPixmap * find (const QString &key);
	 static bool find (const QString &key, QPixmap &);
	 static bool insert (const QString &key, const QPixmap &);
	 static void remove (const QString &key);
	 static void clear ();

};
$#include <QFontDatabase>

class QFontDatabase {
Q_OBJECT
signals:
public:
	 enum WritingSystem {         Any, Latin, Greek, Cyrillic,         Armenian, Hebrew, Arabic, Syriac,         Thaana, Devanagari, Bengali, Gurmukhi,         Gujarati, Oriya, Tamil, Telugu,         Kannada, Malayalam, Sinhala, Thai,         Lao, Tibetan, Myanmar, Georgian,         Khmer, SimplifiedChinese, TraditionalChinese, Japanese,         Korean, Vietnamese, Other, WritingSystemsCount       };

	 QFontDatabase ();
	 QList< WritingSystem > writingSystems () const;
	 QStringList families (WritingSystem writingSystem=Any) const;
	 QStringList styles (const QString &family) const;
	 QList< int > pointSizes (const QString &family, const QString &style=QString());
	 QList< int > smoothSizes (const QString &family, const QString &style);
	 QString styleString (const QFont &font);
	 QFont font (const QString &family, const QString &style, int pointSize) const;
	 bool isBitmapScalable (const QString &family, const QString &style=QString()) const;
	 bool isSmoothlyScalable (const QString &family, const QString &style=QString()) const;
	 bool isScalable (const QString &family, const QString &style=QString()) const;
	 bool isFixedPitch (const QString &family, const QString &style=QString()) const;
	 bool italic (const QString &family, const QString &style) const;
	 bool bold (const QString &family, const QString &style) const;
	 int weight (const QString &family, const QString &style) const;
	 static QList< int > standardSizes ();
	 static QString writingSystemName (WritingSystem writingSystem);
	 static QString writingSystemSample (WritingSystem writingSystem);

};
$#include <QPictureIO>

class QPictureIO {
Q_OBJECT
signals:
public:

	 QPictureIO ();
	 QPictureIO (QIODevice *ioDevice, const char *format);
	 QPictureIO (const QString &fileName, const char *format);
	 ~QPictureIO ();
	 const QPicture & picture () const;
	 int status () const;
	 const char * format () const;
	 QString fileName () const;
	 int quality () const;
	 QString description () const;
	 const char * parameters () const;
	 float gamma () const;
	 void setPicture (const QPicture &);
	 void setStatus (int);
	 void setFormat (const char *);
	 void setIODevice (QIODevice *);
	 void setFileName (const QString &);
	 void setQuality (int);
	 void setDescription (const QString &);
	 void setParameters (const char *);
	 void setGamma (float);
	 bool read ();
	 bool write ();
	 static QByteArray pictureFormat (const QString &fileName);
	 static QByteArray pictureFormat (QIODevice *);
	 static QList< QByteArray > inputFormats ();
	 static QList< QByteArray > outputFormats ();
	 static void defineIOHandler (const char *format, const char *header, const char *flags, picture_io_handler read_picture, picture_io_handler write_picture);

};
$#include <QSizePolicy>

class QSizePolicy {
Q_OBJECT
signals:
public:
	 enum PolicyFlag { GrowFlag = 1, ExpandFlag = 2, ShrinkFlag = 4, IgnoreFlag = 8 };
	 enum Policy {         Fixed = 0, Minimum = GrowFlag, Maximum = ShrinkFlag, Preferred = GrowFlag | ShrinkFlag,         MinimumExpanding = GrowFlag | ExpandFlag, Expanding = GrowFlag | ShrinkFlag | ExpandFlag, Ignored = ShrinkFlag|GrowFlag|IgnoreFlag       };

	 QSizePolicy ();
	 QSizePolicy (Policy horizontal, Policy vertical);
	 Policy horizontalPolicy () const;
	 Policy verticalPolicy () const;
	 void setHorizontalPolicy (Policy d);
	 void setVerticalPolicy (Policy d);
	 Qt::Orientations expandingDirections () const;
	 void setHeightForWidth (bool b);
	 bool hasHeightForWidth () const;
	 bool operator== (const QSizePolicy &s) const;
	 bool operator!= (const QSizePolicy &s) const;
	 operator QVariant () const;
	 int horizontalStretch () const;
	 int verticalStretch () const;
	 void setHorizontalStretch (uchar stretchFactor);
	 void setVerticalStretch (uchar stretchFactor);
	 void transpose ();

};
$#include <QTextBlock>

class QTextBlock {
Q_OBJECT
signals:
public:
	 typedef iterator Iterator;
	 class iterator;

	 QTextBlock (QTextDocumentPrivate *priv, int b);
	 QTextBlock ();
	 QTextBlock (const QTextBlock &o);
	 QTextBlock & operator= (const QTextBlock &o);
	 bool isValid () const;
	 bool operator== (const QTextBlock &o) const;
	 bool operator!= (const QTextBlock &o) const;
	 bool operator< (const QTextBlock &o) const;
	 int position () const;
	 int length () const;
	 bool contains (int position) const;
	 QTextLayout * layout () const;
	 QTextBlockFormat blockFormat () const;
	 int blockFormatIndex () const;
	 QTextCharFormat charFormat () const;
	 int charFormatIndex () const;
	 QString text () const;
	 const QTextDocument * document () const;
	 QTextList * textList () const;
	 iterator begin () const;
	 iterator end () const;
	 QTextBlock next () const;
	 QTextBlock previous () const;
	 QTextDocumentPrivate * docHandle () const;

};
$#include <QListWidgetItem>

class QListWidgetItem {
Q_OBJECT
signals:
public:
	 enum { Type = 0, UserType = 1000 };

	 QListWidgetItem (QListWidget *view=0, int type=Type);
	 QListWidgetItem (const QString &text, QListWidget *view=0, int type=Type);
	 virtual ~QListWidgetItem ();
	 virtual QListWidgetItem * clone () const;
	 QListWidget * listWidget () const;
	 Qt::ItemFlags flags () const;
	 void setFlags (Qt::ItemFlags flags);
	 QString text () const;
	 void setText (const QString &text);
	 QIcon icon () const;
	 void setIcon (const QIcon &icon);
	 QString statusTip () const;
	 void setStatusTip (const QString &statusTip);
	 QString toolTip () const;
	 void setToolTip (const QString &toolTip);
	 QString whatsThis () const;
	 void setWhatsThis (const QString &whatsThis);
	 QFont font () const;
	 void setFont (const QFont &font);
	 int textAlignment () const;
	 void setTextAlignment (int alignment);
	 QColor backgroundColor () const;
	 virtual void setBackgroundColor (const QColor &color);
	 QColor textColor () const;
	 void setTextColor (const QColor &color);
	 Qt::CheckState checkState () const;
	 void setCheckState (Qt::CheckState state);
	 virtual QVariant data (int role) const;
	 virtual void setData (int role, const QVariant &value);
	 virtual bool operator< (const QListWidgetItem &other) const;
	 virtual void read (QDataStream &in);
	 virtual void write (QDataStream &out) const;
	 QListWidgetItem & operator= (const QListWidgetItem &other);
	 int type () const;

};
$#include <QItemSelectionRange>

class QItemSelectionRange {
Q_OBJECT
signals:
public:

	 QItemSelectionRange ();
	 QItemSelectionRange (const QItemSelectionRange &other);
	 QItemSelectionRange (const QModelIndex &topLeft, const QModelIndex &bottomRight);
	 QItemSelectionRange (const QModelIndex &index);
	 int top () const;
	 int left () const;
	 int bottom () const;
	 int right () const;
	 int width () const;
	 int height () const;
	 QModelIndex topLeft () const;
	 QModelIndex bottomRight () const;
	 QModelIndex parent () const;
	 const QAbstractItemModel * model () const;
	 bool contains (const QModelIndex &index) const;
	 bool intersects (const QItemSelectionRange &other) const;
	 QItemSelectionRange intersect (const QItemSelectionRange &other) const;
	 bool operator== (const QItemSelectionRange &other) const;
	 bool operator!= (const QItemSelectionRange &other) const;
	 bool isValid () const;
	 QModelIndexList indexes () const;

};
$#include <QFont>

class QFont {
Q_OBJECT
signals:
public:
	 enum StyleHint {         Helvetica, SansSerif = Helvetica, Times, Serif = Times,         Courier, TypeWriter = Courier, OldEnglish, Decorative = OldEnglish,         System, AnyStyle       };
	 enum StyleStrategy {         PreferDefault = 0x0001, PreferBitmap = 0x0002, PreferDevice = 0x0004, PreferOutline = 0x0008,         ForceOutline = 0x0010, PreferMatch = 0x0020, PreferQuality = 0x0040, PreferAntialias = 0x0080,         NoAntialias = 0x0100, OpenGLCompatible = 0x0200       };
	 enum Weight {         Light = 25, Normal = 50, DemiBold = 63, Bold = 75,         Black = 87       };
	 enum Style { StyleNormal, StyleItalic, StyleOblique };
	 enum Stretch {         UltraCondensed = 50, ExtraCondensed = 62, Condensed = 75, SemiCondensed = 87,         Unstretched = 100, SemiExpanded = 112, Expanded = 125, ExtraExpanded = 150,         UltraExpanded = 200       };

	 QFont ();
	 QFont (const QString &family, int pointSize=-1, int weight=-1, bool italic=false);
	 QFont (const QFont &, QPaintDevice *pd);
	 QFont (const QFont &);
	 ~QFont ();
	 QString family () const;
	 void setFamily (const QString &);
	 int pointSize () const;
	 void setPointSize (int);
	 qreal pointSizeF () const;
	 void setPointSizeF (qreal);
	 int pixelSize () const;
	 void setPixelSize (int);
	 int weight () const;
	 void setWeight (int);
	 bool bold () const;
	 void setBold (bool);
	 void setStyle (Style style);
	 Style style () const;
	 bool italic () const;
	 void setItalic (bool b);
	 bool underline () const;
	 void setUnderline (bool);
	 bool overline () const;
	 void setOverline (bool);
	 bool strikeOut () const;
	 void setStrikeOut (bool);
	 bool fixedPitch () const;
	 void setFixedPitch (bool);
	 bool kerning () const;
	 void setKerning (bool);
	 StyleHint styleHint () const;
	 StyleStrategy styleStrategy () const;
	 void setStyleHint (StyleHint, StyleStrategy=PreferDefault);
	 void setStyleStrategy (StyleStrategy s);
	 int stretch () const;
	 void setStretch (int);
	 bool rawMode () const;
	 void setRawMode (bool);
	 bool exactMatch () const;
	 QFont & operator= (const QFont &);
	 bool operator== (const QFont &) const;
	 bool operator!= (const QFont &) const;
	 bool operator< (const QFont &) const;
	 operator QVariant () const;
	 bool isCopyOf (const QFont &) const;
	 Qt::HANDLE handle () const;
	 void setRawName (const QString &);
	 QString rawName () const;
	 QString key () const;
	 QString toString () const;
	 bool fromString (const QString &);
	 QString defaultFamily () const;
	 QString lastResortFamily () const;
	 QString lastResortFont () const;
	 QFont resolve (const QFont &) const;
	 uint resolve () const;
	 void resolve (uint mask);
	 static QString substitute (const QString &);
	 static QStringList substitutes (const QString &);
	 static QStringList substitutions ();
	 static void insertSubstitution (const QString &, const QString &);
	 static void insertSubstitutions (const QString &, const QStringList &);
	 static void removeSubstitution (const QString &);
	 static void initialize ();
	 static void cleanup ();
	 static void cacheStatistics ();

};
$#include <QBrush>

class QBrush {
Q_OBJECT
signals:
public:

	 QBrush ();
	 QBrush (Qt::BrushStyle bs);
	 QBrush (const QColor &color, Qt::BrushStyle bs=Qt::SolidPattern);
	 QBrush (Qt::GlobalColor color, Qt::BrushStyle bs=Qt::SolidPattern);
	 QBrush (const QColor &color, const QPixmap &pixmap);
	 QBrush (Qt::GlobalColor color, const QPixmap &pixmap);
	 QBrush (const QPixmap &pixmap);
	 QBrush (const QBrush &brush);
	 QBrush (const QGradient &gradient);
	 ~QBrush ();
	 QBrush & operator= (const QBrush &brush);
	 operator QVariant () const;
	 Qt::BrushStyle style () const;
	 void setStyle (Qt::BrushStyle);
	 QPixmap texture () const;
	 void setTexture (const QPixmap &pixmap);
	 const QColor & color () const;
	 void setColor (const QColor &color);
	 void setColor (Qt::GlobalColor color);
	 const QGradient * gradient () const;
	 bool isOpaque () const;
	 bool operator== (const QBrush &b) const;
	 bool operator!= (const QBrush &b) const;

};
$#include <QTextTableCell>

class QTextTableCell {
Q_OBJECT
signals:
public:

	 QTextTableCell ();
	 ~QTextTableCell ();
	 QTextTableCell (const QTextTableCell &o);
	 QTextTableCell & operator= (const QTextTableCell &o);
	 QTextCharFormat format () const;
	 int row () const;
	 int column () const;
	 int rowSpan () const;
	 int columnSpan () const;
	 bool isValid () const;
	 QTextCursor firstCursorPosition () const;
	 QTextCursor lastCursorPosition () const;
	 int firstPosition () const;
	 int lastPosition () const;
	 bool operator== (const QTextTableCell &other) const;
	 bool operator!= (const QTextTableCell &other) const;
	 QTextFrame::iterator begin () const;
	 QTextFrame::iterator end () const;

};
$#include <QFontInfo>

class QFontInfo {
Q_OBJECT
signals:
public:

	 QFontInfo (const QFont &);
	 QFontInfo (const QFontInfo &);
	 ~QFontInfo ();
	 QFontInfo & operator= (const QFontInfo &);
	 QString family () const;
	 int pixelSize () const;
	 int pointSize () const;
	 qreal pointSizeF () const;
	 bool italic () const;
	 QFont::Style style () const;
	 int weight () const;
	 bool bold () const;
	 bool underline () const;
	 bool overline () const;
	 bool strikeOut () const;
	 bool fixedPitch () const;
	 QFont::StyleHint styleHint () const;
	 bool rawMode () const;
	 bool exactMatch () const;

};
$#include <QFileIconProvider>

class QFileIconProvider {
Q_OBJECT
signals:
public:
	 enum IconType {         Computer, Desktop, Trashcan, Network,         Drive, Folder, File       };

	 QFileIconProvider ();
	 virtual ~QFileIconProvider ();
	 virtual QIcon icon (IconType type) const;
	 virtual QIcon icon (const QFileInfo &info) const;
	 virtual QString type (const QFileInfo &info) const;

};
$#include <QKeySequence>

class QKeySequence {
Q_OBJECT
signals:
public:
	 enum SequenceMatch { NoMatch, PartialMatch, ExactMatch };

	 QKeySequence ();
	 QKeySequence (const QString &key);
	 QKeySequence (int k1, int k2=0, int k3=0, int k4=0);
	 QKeySequence (const QKeySequence &ks);
	 ~QKeySequence ();
	 uint count () const;
	 bool isEmpty () const;
	 SequenceMatch matches (const QKeySequence &seq) const;
	 operator QString () const;
	 operator QVariant () const;
	 operator int () const;
	 int operator[] (uint i) const;
	 QKeySequence & operator= (const QKeySequence &other);
	 bool operator== (const QKeySequence &other) const;
	 bool operator!= (const QKeySequence &other) const;
	 bool operator< (const QKeySequence &ks) const;
	 bool operator> (const QKeySequence &other) const;
	 bool operator<= (const QKeySequence &other) const;
	 bool operator>= (const QKeySequence &other) const;
	 bool isDetached () const;
	 static QKeySequence mnemonic (const QString &text);

};
$#include <QStyleHintReturn>

class QStyleHintReturn {
Q_OBJECT
signals:
public:
	 enum HintReturnType { SH_Default = 0xf000, SH_Mask };
	 enum { Type = SH_Default };
	 enum { Version = 1 };

	 QStyleHintReturn (int version=QStyleOption::Version, int type=SH_Default);
	 ~QStyleHintReturn ();
	 int version;
	 int type;

};
$#include <QTableWidgetSelectionRange>

class QTableWidgetSelectionRange {
Q_OBJECT
signals:
public:

	 QTableWidgetSelectionRange ();
	 QTableWidgetSelectionRange (int top, int left, int bottom, int right);
	 QTableWidgetSelectionRange (const QTableWidgetSelectionRange &other);
	 ~QTableWidgetSelectionRange ();
	 int topRow () const;
	 int bottomRow () const;
	 int leftColumn () const;
	 int rightColumn () const;

};
$#include <QGradient>

class QGradient {
Q_OBJECT
signals:
public:
	 enum Type { LinearGradient, RadialGradient, ConicalGradient };
	 enum Spread { PadSpread, ReflectSpread, RepeatSpread };

	 QGradient ();
	 Type type () const;
	 void setSpread (Spread spread);
	 Spread spread () const;
	 void setColorAt (qreal pos, const QColor &color);
	 void setStops (const QGradientStops &stops);
	 QGradientStops stops () const;
	 bool operator== (const QGradient &gradient);

};
$#include <QTableWidgetItem>

class QTableWidgetItem {
Q_OBJECT
signals:
public:
	 enum { Type = 0, UserType = 1000 };

	 QTableWidgetItem (int type=Type);
	 QTableWidgetItem (const QString &text, int type=Type);
	 virtual ~QTableWidgetItem ();
	 virtual QTableWidgetItem * clone () const;
	 QTableWidget * tableWidget () const;
	 Qt::ItemFlags flags () const;
	 void setFlags (Qt::ItemFlags flags);
	 QString text () const;
	 void setText (const QString &text);
	 QIcon icon () const;
	 void setIcon (const QIcon &icon);
	 QString statusTip () const;
	 void setStatusTip (const QString &statusTip);
	 QString toolTip () const;
	 void setToolTip (const QString &toolTip);
	 QString whatsThis () const;
	 void setWhatsThis (const QString &whatsThis);
	 QFont font () const;
	 void setFont (const QFont &font);
	 int textAlignment () const;
	 void setTextAlignment (int alignment);
	 QColor backgroundColor () const;
	 void setBackgroundColor (const QColor &color);
	 QColor textColor () const;
	 void setTextColor (const QColor &color);
	 Qt::CheckState checkState () const;
	 void setCheckState (Qt::CheckState state);
	 virtual QVariant data (int role) const;
	 virtual void setData (int role, const QVariant &value);
	 virtual bool operator< (const QTableWidgetItem &other) const;
	 virtual void read (QDataStream &in);
	 virtual void write (QDataStream &out) const;
	 QTableWidgetItem & operator= (const QTableWidgetItem &other);
	 int type () const;

};
$#include <QPen>

class QPen {
Q_OBJECT
signals:
public:

	 QPen ();
	 QPen (Qt::PenStyle);
	 QPen (const QColor &color);
	 QPen (const QBrush &brush, qreal width, Qt::PenStyle s=Qt::SolidLine, Qt::PenCapStyle c=Qt::SquareCap, Qt::PenJoinStyle j=Qt::BevelJoin);
	 QPen (const QPen &pen);
	 ~QPen ();
	 QPen & operator= (const QPen &pen);
	 Qt::PenStyle style () const;
	 void setStyle (Qt::PenStyle);
	 qreal widthF () const;
	 void setWidthF (qreal width);
	 int width () const;
	 void setWidth (int width);
	 QColor color () const;
	 void setColor (const QColor &color);
	 QBrush brush () const;
	 void setBrush (const QBrush &brush);
	 bool isSolid () const;
	 Qt::PenCapStyle capStyle () const;
	 void setCapStyle (Qt::PenCapStyle pcs);
	 Qt::PenJoinStyle joinStyle () const;
	 void setJoinStyle (Qt::PenJoinStyle pcs);
	 bool operator== (const QPen &p) const;
	 bool operator!= (const QPen &p) const;
	 operator QVariant () const;
	 bool isDetached ();

};
$#include <QPrintEngine>

class QPrintEngine {
Q_OBJECT
signals:
public:
	 enum PrintEnginePropertyKey {         PPK_CollateCopies, PPK_ColorMode, PPK_Creator, PPK_DocumentName,         PPK_FullPage, PPK_NumberOfCopies, PPK_Orientation, PPK_OutputFileName,         PPK_PageOrder, PPK_PageRect, PPK_PageSize, PPK_PaperRect,         PPK_PaperSource, PPK_PrinterName, PPK_PrinterProgram, PPK_Resolution,         PPK_SelectionOption, PPK_SupportedResolutions, PPK_WindowsPageSize, PPK_CustomBase = 0xff00       };

	 virtual ~QPrintEngine ();
	 virtual void setProperty (PrintEnginePropertyKey key, const QVariant &value)=0;
	 virtual QVariant property (PrintEnginePropertyKey key) const =0;
	 virtual bool newPage ()=0;
	 virtual bool abort ()=0;
	 virtual int metric (QPaintDevice::PaintDeviceMetric) const =0;
	 virtual QPrinter::PrinterState printerState () const =0;

};
$#include <QStyleOptionComplex>

class QStyleOptionComplex : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Complex };
	 enum { Version = 1 };

	 QStyleOptionComplex (int version=QStyleOptionComplex::Version, int type=SO_Complex);
	 QStyleOptionComplex (const QStyleOptionComplex &other);
	 QStyle::SubControls subControls;
	 QStyle::SubControls activeSubControls;

};
$#include <QAccessibleInterface>

class QAccessibleInterface : public QAccessible {
Q_OBJECT
signals:
public:

	 virtual ~QAccessibleInterface ();
	 virtual bool isValid () const =0;
	 virtual QObject * object () const =0;
	 virtual int childCount () const =0;
	 virtual int indexOfChild (const QAccessibleInterface *) const =0;
	 virtual Relation relationTo (int child, const QAccessibleInterface *other, int otherChild) const =0;
	 virtual int childAt (int x, int y) const =0;
	 virtual int navigate (RelationFlag relation, int index, QAccessibleInterface **iface) const =0;
	 virtual QString text (Text t, int child) const =0;
	 virtual void setText (Text t, int child, const QString &text)=0;
	 virtual QRect rect (int child) const =0;
	 virtual Role role (int child) const =0;
	 virtual State state (int child) const =0;
	 virtual int userActionCount (int child) const =0;
	 virtual QString actionText (int action, Text t, int child) const =0;
	 virtual bool doAction (int action, int child, const QVariantList &params=QVariantList())=0;

};
$#include <QTextListFormat>

class QTextListFormat : public QTextFormat {
Q_OBJECT
signals:
public:
	 enum Style {         ListDisc = -1, ListCircle = -2, ListSquare = -3, ListDecimal = -4,         ListLowerAlpha = -5, ListUpperAlpha = -6, ListStyleUndefined = 0       };

	 QTextListFormat ();
	 bool isValid () const;
	 void setStyle (Style style);
	 Style style () const;
	 void setIndent (int indent);
	 int indent () const;

};
$#include <QTextFrameFormat>

class QTextFrameFormat : public QTextFormat {
Q_OBJECT
signals:
public:
	 enum Position { InFlow, FloatLeft, FloatRight };

	 QTextFrameFormat ();
	 bool isValid () const;
	 void setPosition (Position f);
	 Position position () const;
	 void setBorder (qreal border);
	 qreal border () const;
	 void setMargin (qreal margin);
	 qreal margin () const;
	 void setPadding (qreal padding);
	 qreal padding () const;
	 void setWidth (qreal width);
	 void setWidth (const QTextLength &length);
	 QTextLength width () const;
	 void setHeight (qreal height);
	 void setHeight (const QTextLength &height);
	 QTextLength height () const;

};
$#include <QMovie>

class QMovie : public QObject {
Q_OBJECT
signals:
	 void started ();
	 void resized (const QSize &size);
	 void updated (const QRect &rect);
	 void stateChanged (QMovie::MovieState state);
	 void error (QImageReader::ImageReaderError error);
	 void finished ();
public:
	 enum MovieState { NotRunning, Paused, Running };

	 QMovie (QObject *parent=0);
	 QMovie (QIODevice *device, const QByteArray &format=QByteArray(), QObject *parent=0);
	 QMovie (const QString &fileName, const QByteArray &format=QByteArray(), QObject *parent=0);
	 ~QMovie ();
	 void setDevice (QIODevice *device);
	 void setFileName (const QString &fileName);
	 QString fileName () const;
	 void setFormat (const QByteArray &format);
	 QByteArray format () const;
	 void setBackgroundColor (const QColor &color);
	 QColor backgroundColor () const;
	 MovieState state () const;
	 QRect frameRect () const;
	 QImage currentImage () const;
	 QPixmap currentPixmap () const;
	 bool isValid () const;
	 bool jumpToFrame (int frameNumber);
	 int loopCount () const;
	 int frameCount () const;
	 int nextFrameDelay () const;
	 int currentFrameNumber () const;
	 void setSpeed (int percentSpeed);
	 int speed () const;
	 void start ();
	 bool jumpToNextFrame ();
	 void setPaused (bool paused);
	 void stop ();

};
$#include <QRadialGradient>

class QRadialGradient : public QGradient {
Q_OBJECT
signals:
public:

	 QRadialGradient (const QPointF &center, qreal radius, const QPointF &focalPoint=QPointF());
	 QRadialGradient (qreal cx, qreal cy, qreal radius, qreal fx=0, qreal fy=0);
	 QPointF center () const;
	 QPointF focalPoint () const;
	 qreal radius () const;

};
$#include <QActionGroup>

class QActionGroup : public QObject {
Q_OBJECT
signals:
	 void triggered (QAction *);
	 QT_MOC_COMPAT void selected (QAction *);
	 void hovered (QAction *);
public:

	 QActionGroup (QObject *parent);
	 ~QActionGroup ();
	 QAction * addAction (QAction *a);
	 QAction * addAction (const QString &text);
	 QAction * addAction (const QIcon &icon, const QString &text);
	 void removeAction (QAction *a);
	 QList< QAction * > actions () const;
	 QAction * checkedAction () const;
	 bool isExclusive () const;
	 bool isEnabled () const;
	 bool isVisible () const;
	 void setEnabled (bool);
	 void setDisabled (bool b);
	 void setVisible (bool);
	 void setExclusive (bool);

};
$#include <QPolygon>

class QPolygon : public QVector< QPoint > {
Q_OBJECT
signals:
public:

	 QPolygon ();
	 ~QPolygon ();
	 QPolygon (int size);
	 QPolygon (const QPolygon &a);
	 QPolygon (const QVector< QPoint > &v);
	 QPolygon (const QRect &r, bool closed=false);
	 QPolygon (int nPoints, const int *points);
	 operator QVariant () const;
	 void translate (int dx, int dy);
	 void translate (const QPoint &offset);
	 QRect boundingRect () const;
	 void point (int i, int *x, int *y) const;
	 QPoint point (int i) const;
	 void setPoint (int index, int x, int y);
	 void setPoint (int index, const QPoint &p);
	 void setPoints (int nPoints, const int *points);
	 void setPoints (int nPoints, int firstx, int firsty,...);
	 void putPoints (int index, int nPoints, const int *points);
	 void putPoints (int index, int nPoints, int firstx, int firsty,...);
	 void putPoints (int index, int nPoints, const QPolygon &from, int fromIndex=0);

};
$#include <QTextBlockFormat>

class QTextBlockFormat : public QTextFormat {
Q_OBJECT
signals:
public:

	 QTextBlockFormat ();
	 bool isValid () const;
	 void setAlignment (Qt::Alignment alignment);
	 Qt::Alignment alignment () const;
	 void setTopMargin (qreal margin);
	 qreal topMargin () const;
	 void setBottomMargin (qreal margin);
	 qreal bottomMargin () const;
	 void setLeftMargin (qreal margin);
	 qreal leftMargin () const;
	 void setRightMargin (qreal margin);
	 qreal rightMargin () const;
	 void setTextIndent (qreal margin);
	 qreal textIndent () const;
	 void setIndent (int indent);
	 int indent () const;
	 void setNonBreakableLines (bool b);
	 bool nonBreakableLines () const;

};
$#include <QHoverEvent>

class QHoverEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QHoverEvent (Type type, const QPoint &pos, const QPoint &oldPos);
	 ~QHoverEvent ();
	 const QPoint & pos () const;
	 const QPoint & oldPos () const;

};
$#include <QStyleOptionQ3ListViewItem>

class QStyleOptionQ3ListViewItem : public QStyleOption {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags Q3ListViewItemFeatures;
	 enum { Type = SO_Q3ListViewItem };
	 enum { Version = 1 };
	 enum Q3ListViewItemFeature {         None = 0x00, Expandable = 0x01, MultiLine = 0x02, Visible = 0x04,         ParentControl = 0x08       };

	 QStyleOptionQ3ListViewItem ();
	 QStyleOptionQ3ListViewItem (const QStyleOptionQ3ListViewItem &other);
		 Q3ListViewItemFeatures features;
	 int height;
	 int totalHeight;
	 int itemY;
	 int childCount;

};
$#include <QConicalGradient>

class QConicalGradient : public QGradient {
Q_OBJECT
signals:
public:

	 QConicalGradient (const QPointF &center, qreal startAngle);
	 QConicalGradient (qreal cx, qreal cy, qreal startAngle);
	 QPointF center () const;
	 qreal angle () const;

};
$#include <QIconDragEvent>

class QIconDragEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QIconDragEvent ();
	 ~QIconDragEvent ();

};
$#include <QDrag>

class QDrag : public QObject {
Q_OBJECT
signals:
	 void actionChanged (Qt::DropAction action);
	 void targetChanged (QWidget *newTarget);
public:

	 QDrag (QWidget *dragSource);
	 ~QDrag ();
	 void setMimeData (QMimeData *data);
	 QMimeData * mimeData () const;
	 void setPixmap (const QPixmap &);
	 QPixmap pixmap () const;
	 void setHotSpot (const QPoint &hotspot);
	 QPoint hotSpot () const;
	 QWidget * source () const;
	 QWidget * target () const;
	 Qt::DropAction start (Qt::DropActions supportedActions=Qt::CopyAction);
	 void setDragCursor (const QPixmap &cursor, Qt::DropAction action);

};
$#include <QStyleOptionHeader>

class QStyleOptionHeader : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Header };
	 enum { Version = 1 };
	 enum SectionPosition { Beginning, Middle, End, OnlyOneSection };
	 enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected, NextAndPreviousAreSelected };
	 enum SortIndicator { None, SortUp, SortDown };

	 QStyleOptionHeader ();
	 QStyleOptionHeader (const QStyleOptionHeader &other);
		 int section;
	 QString text;
	 Qt::Alignment textAlignment;
	 QIcon icon;
	 Qt::Alignment iconAlignment;
	 SectionPosition position;
	 SelectedPosition selectedPosition;
	 SortIndicator sortIndicator;
	 Qt::Orientation orientation;

};
$#include <QStyleOptionFrame>

class QStyleOptionFrame : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Frame };
	 enum { Version = 1 };

	 QStyleOptionFrame ();
	 QStyleOptionFrame (const QStyleOptionFrame &other);
		 int lineWidth;
	 int midLineWidth;

};
$#include <QApplication>

class QApplication : public QCoreApplication {
Q_OBJECT
signals:
	 void lastWindowClosed ();
public:
	 enum Type { Tty, GuiClient, GuiServer };
	 enum ColorSpec { NormalColor = 0, CustomColor = 1, ManyColor = 2 };

	 QApplication (int &argc, char **argv);
	 QApplication (int &argc, char **argv, bool GUIenabled);
	 QApplication (int &argc, char **argv, Type);
	 virtual ~QApplication ();
	 bool isSessionRestored () const;
	 QString sessionId () const;
	 QString sessionKey () const;
	 virtual void commitData (QSessionManager &sm);
	 virtual void saveState (QSessionManager &sm);
	 void setInputContext (QInputContext *);
	 QInputContext * inputContext () const;
	 bool notify (QObject *, QEvent *);
	 static void closeAllWindows ();
	 static void aboutQt ();
			 static Type type ();
	 static QStyle * style ();
	 static void setStyle (QStyle *);
	 static QStyle * setStyle (const QString &);
	 static int colorSpec ();
	 static void setColorSpec (int);
	 static QCursor * overrideCursor ();
	 static void setOverrideCursor (const QCursor &);
	 static void changeOverrideCursor (const QCursor &);
	 static void restoreOverrideCursor ();
	 static QPalette palette ();
	 static QPalette palette (const QWidget *);
	 static QPalette palette (const char *className);
	 static void setPalette (const QPalette &, const char *className=0);
	 static QFont font (const QWidget *=0);
	 static void setFont (const QFont &, const char *className=0);
	 static void setWindowIcon (const QIcon &icon);
	 static QIcon windowIcon ();
	 static QWidgetList allWidgets ();
	 static QWidgetList topLevelWidgets ();
	 static QDesktopWidget * desktop ();
	 static QWidget * activePopupWidget ();
	 static QWidget * activeModalWidget ();
	 static QClipboard * clipboard ();
	 static QWidget * focusWidget ();
	 static QWidget * activeWindow ();
	 static void setActiveWindow (QWidget *act);
	 static QWidget * widgetAt (const QPoint &p);
	 static QWidget * widgetAt (int x, int y);
	 static QWidget * topLevelAt (const QPoint &p);
	 static QWidget * topLevelAt (int x, int y);
	 static void syncX ();
	 static void beep ();
	 static Qt::KeyboardModifiers keyboardModifiers ();
	 static Qt::MouseButtons mouseButtons ();
	 static void setDesktopSettingsAware (bool);
	 static bool desktopSettingsAware ();
	 static void setCursorFlashTime (int);
	 static int cursorFlashTime ();
	 static void setDoubleClickInterval (int);
	 static int doubleClickInterval ();
	 static void setKeyboardInputInterval (int);
	 static int keyboardInputInterval ();
	 static void setWheelScrollLines (int);
	 static int wheelScrollLines ();
	 static void setGlobalStrut (const QSize &);
	 static QSize globalStrut ();
	 static void setStartDragTime (int ms);
	 static int startDragTime ();
	 static void setStartDragDistance (int l);
	 static int startDragDistance ();
	 static void setLayoutDirection (Qt::LayoutDirection direction);
	 static Qt::LayoutDirection layoutDirection ();
	 static bool isRightToLeft ();
	 static bool isLeftToRight ();
	 static bool isEffectEnabled (Qt::UIEffect);
	 static void setEffectEnabled (Qt::UIEffect, bool enable=true);
	 static int exec ();
	 static void setQuitOnLastWindowClosed (bool quit);
	 static bool quitOnLastWindowClosed ();

};
$#include <QInputContext>

class QInputContext : public QObject {
Q_OBJECT
signals:
public:
	 enum StandardFormat { PreeditFormat, SelectionFormat };

	 QInputContext (QObject *parent=0);
	 virtual ~QInputContext ();
	 virtual QString identifierName ()=0;
	 virtual QString language ()=0;
	 virtual void reset ()=0;
	 virtual void update ();
	 virtual void mouseHandler (int x, QMouseEvent *event);
	 virtual QFont font () const;
	 virtual bool isComposing () const =0;
	 QWidget * focusWidget () const;
	 virtual void setFocusWidget (QWidget *w);
	 virtual void widgetDestroyed (QWidget *w);
	 virtual QList< QAction * > actions ();
	 virtual bool filterEvent (const QEvent *event);
	 void sendEvent (const QInputMethodEvent &event);
	 QTextFormat standardFormat (StandardFormat s) const;

};
$#include <QItemSelectionModel>

class QItemSelectionModel : public QObject {
Q_OBJECT
signals:
	 void selectionChanged (const QItemSelection &selected, const QItemSelection &deselected);
	 void currentChanged (const QModelIndex &current, const QModelIndex &previous);
	 void currentRowChanged (const QModelIndex &current, const QModelIndex &previous);
	 void currentColumnChanged (const QModelIndex &current, const QModelIndex &previous);
public:
	 typedef LuaQtGenericFlags SelectionFlags;
	 enum SelectionFlag {         NoUpdate = 0x0000, Clear = 0x0001, Select = 0x0002, Deselect = 0x0004,         Toggle = 0x0008, Current = 0x0010, Rows = 0x0020, Columns = 0x0040,         SelectCurrent = Select | Current, ToggleCurrent = Toggle | Current, ClearAndSelect = Clear | Select       };

	 QItemSelectionModel (QAbstractItemModel *model);
	 virtual ~QItemSelectionModel ();
	 QModelIndex currentIndex () const;
	 bool isSelected (const QModelIndex &index) const;
	 bool isRowSelected (int row, const QModelIndex &parent) const;
	 bool isColumnSelected (int column, const QModelIndex &parent) const;
	 bool rowIntersectsSelection (int row, const QModelIndex &parent) const;
	 bool columnIntersectsSelection (int column, const QModelIndex &parent) const;
	 QModelIndexList selectedIndexes () const;
	 const QItemSelection selection () const;
	 const QAbstractItemModel * model () const;
	 void setCurrentIndex (const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
	 virtual void select (const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
	 virtual void select (const QItemSelection &selection, QItemSelectionModel::SelectionFlags command);
	 virtual void clear ();
	 virtual void reset ();
		
};
$#include <QStyleOptionFocusRect>

class QStyleOptionFocusRect : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_FocusRect };
	 enum { Version = 1 };

	 QStyleOptionFocusRect ();
	 QStyleOptionFocusRect (const QStyleOptionFocusRect &other);
		 QColor backgroundColor;

};
$#include <QStyleOptionDockWidget>

class QStyleOptionDockWidget : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_DockWidget };
	 enum { Version = 1 };

	 QStyleOptionDockWidget ();
	 QStyleOptionDockWidget (const QStyleOptionDockWidget &other);
		 QString title;
	 bool closable;
	 bool movable;
	 bool floatable;

};
$#include <QStyleOptionButton>

class QStyleOptionButton : public QStyleOption {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags ButtonFeatures;
	 enum { Type = SO_Button };
	 enum { Version = 1 };
	 enum ButtonFeature {         None = 0x00, Flat = 0x01, HasMenu = 0x02, DefaultButton = 0x04,         AutoDefaultButton = 0x08       };

	 QStyleOptionButton ();
	 QStyleOptionButton (const QStyleOptionButton &other);
		 ButtonFeatures features;
	 QString text;
	 QIcon icon;
	 QSize iconSize;

};
$#include <QPaintEvent>

class QPaintEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QPaintEvent (const QRegion &paintRegion);
	 QPaintEvent (const QRect &paintRect);
	 ~QPaintEvent ();
	 const QRect & rect () const;
	 const QRegion & region () const;

};
$#include <QDirModel>

class QDirModel : public QAbstractItemModel {
Q_OBJECT
signals:
public:
	 enum Roles { FileIconRole = Qt::DecorationRole, FilePathRole = Qt::UserRole + 1, FileNameRole };

	 QDirModel (const QStringList &nameFilters, QDir::Filters filters, QDir::SortFlags sort, QObject *parent=0);
	 QDirModel (QObject *parent=0);
	 ~QDirModel ();
	 QModelIndex index (int row, int column, const QModelIndex &parent=QModelIndex()) const;
	 QModelIndex parent (const QModelIndex &child) const;
	 int rowCount (const QModelIndex &parent) const;
	 int columnCount (const QModelIndex &parent) const;
	 QVariant data (const QModelIndex &index, int role=Qt::DisplayRole) const;
	 bool setData (const QModelIndex &index, const QVariant &value, int role);
	 QVariant headerData (int section, Qt::Orientation orientation, int role) const;
	 bool hasChildren (const QModelIndex &index) const;
	 Qt::ItemFlags flags (const QModelIndex &index) const;
	 void sort (int column, Qt::SortOrder order);
	 QStringList mimeTypes () const;
	 QMimeData * mimeData (const QModelIndexList &indexes) const;
	 bool dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);
	 Qt::DropActions supportedDropActions () const;
	 void setIconProvider (QFileIconProvider *provider);
	 QFileIconProvider * iconProvider () const;
	 void setNameFilters (const QStringList &filters);
	 QStringList nameFilters () const;
	 void setFilter (QDir::Filters filters);
	 QDir::Filters filter () const;
	 void setSorting (QDir::SortFlags sort);
	 QDir::SortFlags sorting () const;
	 void setResolveSymlinks (bool enable);
	 bool resolveSymlinks () const;
	 void setReadOnly (bool enable);
	 bool isReadOnly () const;
	 void setLazyChildCount (bool enable);
	 bool lazyChildCount () const;
	 void refresh (const QModelIndex &parent=QModelIndex());
	 QModelIndex index (const QString &path, int column=0) const;
	 bool isDir (const QModelIndex &index) const;
	 QModelIndex mkdir (const QModelIndex &parent, const QString &name);
	 bool rmdir (const QModelIndex &index);
	 bool remove (const QModelIndex &index);
	 QString filePath (const QModelIndex &index) const;
	 QString fileName (const QModelIndex &index) const;
	 QIcon fileIcon (const QModelIndex &index) const;
	 QFileInfo fileInfo (const QModelIndex &index) const;
	
};
$#include <QTextList>

class QTextList : public QTextBlockGroup {
Q_OBJECT
signals:
public:

	 QTextList (QTextDocument *doc);
	 ~QTextList ();
	 int count () const;
	 bool isEmpty () const;
	 QTextBlock item (int i) const;
	 int itemNumber (const QTextBlock &) const;
	 QString itemText (const QTextBlock &) const;
	 void removeItem (int i);
	 void remove (const QTextBlock &);
	 void add (const QTextBlock &block);
	 void setFormat (const QTextListFormat &format);
	 QTextListFormat format () const;

};
$#include <QValidator>

class QValidator : public QObject {
Q_OBJECT
signals:
public:
	 enum State { Invalid, Intermediate, Acceptable };

	 QValidator (QObject *parent);
	 ~QValidator ();
	 virtual State validate (QString &, int &) const =0;
	 virtual void fixup (QString &) const;

};
$#include <QLinearGradient>

class QLinearGradient : public QGradient {
Q_OBJECT
signals:
public:

	 QLinearGradient (const QPointF &start, const QPointF &finalStop);
	 QLinearGradient (qreal xStart, qreal yStart, qreal xFinalStop, qreal yFinalStop);
	 QPointF start () const;
	 QPointF finalStop () const;

};
$#include <QActionEvent>

class QActionEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QActionEvent (int type, QAction *action, QAction *before=0);
	 ~QActionEvent ();
	 QAction * action () const;
	 QAction * before () const;

};
$#include <QStatusTipEvent>

class QStatusTipEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QStatusTipEvent (const QString &tip);
	 ~QStatusTipEvent ();
	 QString tip () const;

};
$#include <QTextDocument>

class QTextDocument : public QObject {
Q_OBJECT
signals:
	 void contentsChange (int from, int charsRemoves, int charsAdded);
	 void contentsChanged ();
	 void undoAvailable (bool);
	 void redoAvailable (bool);
	 void modificationChanged (bool m);
	 void cursorPositionChanged (const QTextCursor &cursor);
public:
	 typedef LuaQtGenericFlags FindFlags;
	 enum MetaInformation { DocumentTitle };
	 enum FindFlag { FindBackward = 0x00001, FindCaseSensitively = 0x00002, FindWholeWords = 0x00004 };
	 enum ResourceType { HtmlResource = 1, ImageResource = 2, UserResource = 100 };

	 QTextDocument (QObject *parent=0);
	 QTextDocument (const QString &text, QObject *parent=0);
	 ~QTextDocument ();
	 QTextDocument * clone (QObject *parent=0) const;
	 bool isEmpty () const;
	 virtual void clear ();
	 void setUndoRedoEnabled (bool enable);
	 bool isUndoRedoEnabled () const;
	 bool isUndoAvailable () const;
	 bool isRedoAvailable () const;
	 void setDocumentLayout (QAbstractTextDocumentLayout *layout);
	 QAbstractTextDocumentLayout * documentLayout () const;
	 void setMetaInformation (MetaInformation info, const QString &);
	 QString metaInformation (MetaInformation info) const;
	 QString toHtml (const QByteArray &encoding=QByteArray()) const;
	 void setHtml (const QString &html);
	 QString toPlainText () const;
	 void setPlainText (const QString &text);
	 QTextCursor find (const QString &expr, int from=0, FindFlags options=0) const;
	 QTextCursor find (const QString &expr, const QTextCursor &from, FindFlags options=0) const;
	 QTextFrame * frameAt (int pos) const;
	 QTextFrame * rootFrame () const;
	 QTextObject * object (int objectIndex) const;
	 QTextObject * objectForFormat (const QTextFormat &) const;
	 QTextBlock findBlock (int pos) const;
	 QTextBlock begin () const;
	 QTextBlock end () const;
	 void setPageSize (const QSizeF &size);
	 QSizeF pageSize () const;
	 void setDefaultFont (const QFont &font);
	 QFont defaultFont () const;
	 int pageCount () const;
	 bool isModified () const;
	 void print (QPrinter *printer) const;
	 QVariant resource (int type, const QUrl &name) const;
	 void addResource (int type, const QUrl &name, const QVariant &resource);
	 QVector< QTextFormat > allFormats () const;
	 void markContentsDirty (int from, int length);
	 QTextDocumentPrivate * docHandle () const;
	 void undo ();
	 void redo ();
	 void appendUndoItem (QAbstractUndoItem *);
	 void setModified (bool m=true);
	protected  virtual QTextObject * createObject (const QTextFormat &f);
	protected  virtual QVariant loadResource (int type, const QUrl &name);

};
$#include <QStyleOptionQ3DockWindow>

class QStyleOptionQ3DockWindow : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Q3DockWindow };
	 enum { Version = 1 };

	 QStyleOptionQ3DockWindow ();
	 QStyleOptionQ3DockWindow (const QStyleOptionQ3DockWindow &other);
		 bool docked;
	 bool closeEnabled;

};
$#include <QStringListModel>

class QStringListModel : public QAbstractListModel {
Q_OBJECT
signals:
public:

	 QStringListModel (QObject *parent=0);
	 QStringListModel (const QStringList &strings, QObject *parent=0);
	 int rowCount (const QModelIndex &parent=QModelIndex()) const;
	 QVariant data (const QModelIndex &index, int role) const;
	 bool setData (const QModelIndex &index, const QVariant &value, int role=Qt::EditRole);
	 Qt::ItemFlags flags (const QModelIndex &index) const;
	 bool insertRows (int row, int count, const QModelIndex &parent=QModelIndex());
	 bool removeRows (int row, int count, const QModelIndex &parent=QModelIndex());
	 QStringList stringList () const;
	 void setStringList (const QStringList &strings);

};
$#include <QAccessibleBridgePlugin>

class QAccessibleBridgePlugin : public QObject , public QAccessibleBridgeFactoryInterface {
Q_OBJECT
signals:
public:

	 QAccessibleBridgePlugin (QObject *parent=0);
	 ~QAccessibleBridgePlugin ();
	 virtual QStringList keys () const =0;
	 virtual QAccessibleBridge * create (const QString &key)=0;

};
$#include <QMoveEvent>

class QMoveEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QMoveEvent (const QPoint &pos, const QPoint &oldPos);
	 ~QMoveEvent ();
	 const QPoint & pos () const;
	 const QPoint & oldPos () const;

};
$#include <QSessionManager>

class QSessionManager : public QObject {
Q_OBJECT
signals:
public:
	 enum RestartHint { RestartIfRunning, RestartAnyway, RestartImmediately, RestartNever };

	 QString sessionId () const;
	 QString sessionKey () const;
	 bool allowsInteraction ();
	 bool allowsErrorInteraction ();
	 void release ();
	 void cancel ();
	 void setRestartHint (RestartHint);
	 RestartHint restartHint () const;
	 void setRestartCommand (const QStringList &);
	 QStringList restartCommand () const;
	 void setDiscardCommand (const QStringList &);
	 QStringList discardCommand () const;
	 void setManagerProperty (const QString &name, const QString &value);
	 void setManagerProperty (const QString &name, const QStringList &value);
	 bool isPhase2 () const;
	 void requestPhase2 ();

};
$#include <QLayout>

class QLayout : public QObject , public QLayoutItem {
Q_OBJECT
signals:
public:
	 enum SizeConstraint {         SetDefaultConstraint, SetNoConstraint, SetMinimumSize, SetFixedSize,         SetMaximumSize, SetMinAndMaxSize       };

	 QLayout (QWidget *parent);
	 QLayout ();
	 ~QLayout ();
	 int margin () const;
	 int spacing () const;
	 void setMargin (int);
	 void setSpacing (int);
	 bool setAlignment (QWidget *w, Qt::Alignment alignment);
	 bool setAlignment (QLayout *l, Qt::Alignment alignment);
	 void setSizeConstraint (SizeConstraint);
	 SizeConstraint sizeConstraint () const;
	 void setMenuBar (QWidget *w);
	 QWidget * menuBar () const;
	 QWidget * parentWidget () const;
	 void invalidate ();
	 QRect geometry () const;
	 bool activate ();
	 void update ();
	 void addWidget (QWidget *w);
	 virtual void addItem (QLayoutItem *)=0;
	 void removeWidget (QWidget *w);
	 void removeItem (QLayoutItem *);
	 Qt::Orientations expandingDirections () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 void setGeometry (const QRect &)=0;
	 virtual QLayoutItem * itemAt (int index) const =0;
	 virtual QLayoutItem * takeAt (int index)=0;
	 virtual int indexOf (QWidget *) const;
	 virtual int count () const =0;
	 bool isEmpty () const;
	 int totalHeightForWidth (int w) const;
	 QSize totalMinimumSize () const;
	 QSize totalMaximumSize () const;
	 QSize totalSizeHint () const;
	 QLayout * layout ();
	 void setEnabled (bool);
	 bool isEnabled () const;
							 static QSize closestAcceptableSize (const QWidget *w, const QSize &s);

};
$#include <QCloseEvent>

class QCloseEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QCloseEvent ();
	 ~QCloseEvent ();

};
$#include <QImageIOPlugin>

class QImageIOPlugin : public QObject , public QImageIOHandlerFactoryInterface {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags Capabilities;
	 enum Capability { CanRead = 0x1, CanWrite = 0x2, CanReadIncremental = 0x4 };

	 QImageIOPlugin (QObject *parent=0);
	 virtual ~QImageIOPlugin ();
	 virtual Capabilities capabilities (QIODevice *device, const QByteArray &format) const =0;
	 virtual QStringList keys () const =0;
	 virtual QImageIOHandler * create (QIODevice *device, const QByteArray &format=QByteArray()) const =0;

};
$#include <QFocusEvent>

class QFocusEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QFocusEvent (Type type, Qt::FocusReason reason=Qt::OtherFocusReason);
	 ~QFocusEvent ();
	 bool gotFocus () const;
	 bool lostFocus () const;
	 Qt::FocusReason reason ();

};
$#include <QWidget>

class QWidget : public QObject , public QPaintDevice {
Q_OBJECT
signals:
	 void customContextMenuRequested (const QPoint &pos);
public:

	 QWidget (QWidget *parent=0, Qt::WFlags f=0);
	 ~QWidget ();
	 int devType () const;
	 WId winId () const;
	 QStyle * style () const;
	 void setStyle (QStyle *);
	 bool isTopLevel () const;
	 bool isWindow () const;
	 bool isModal () const;
	 bool isEnabled () const;
	 bool isEnabledTo (QWidget *) const;
	 bool isEnabledToTLW () const;
	 QRect frameGeometry () const;
	 const QRect & geometry () const;
	 QRect normalGeometry () const;
	 int x () const;
	 int y () const;
	 QPoint pos () const;
	 QSize frameSize () const;
	 QSize size () const;
	 int width () const;
	 int height () const;
	 QRect rect () const;
	 QRect childrenRect () const;
	 QRegion childrenRegion () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 int minimumWidth () const;
	 int minimumHeight () const;
	 int maximumWidth () const;
	 int maximumHeight () const;
	 void setMinimumSize (const QSize &);
	 void setMinimumSize (int minw, int minh);
	 void setMaximumSize (const QSize &);
	 void setMaximumSize (int maxw, int maxh);
	 void setMinimumWidth (int minw);
	 void setMinimumHeight (int minh);
	 void setMaximumWidth (int maxw);
	 void setMaximumHeight (int maxh);
	 QSize sizeIncrement () const;
	 void setSizeIncrement (const QSize &);
	 void setSizeIncrement (int w, int h);
	 QSize baseSize () const;
	 void setBaseSize (const QSize &);
	 void setBaseSize (int basew, int baseh);
	 void setFixedSize (const QSize &);
	 void setFixedSize (int w, int h);
	 void setFixedWidth (int w);
	 void setFixedHeight (int h);
	 QPoint mapToGlobal (const QPoint &) const;
	 QPoint mapFromGlobal (const QPoint &) const;
	 QPoint mapToParent (const QPoint &) const;
	 QPoint mapFromParent (const QPoint &) const;
	 QPoint mapTo (QWidget *, const QPoint &) const;
	 QPoint mapFrom (QWidget *, const QPoint &) const;
	 QWidget * window () const;
	 QWidget * topLevelWidget () const;
	 const QPalette & palette () const;
	 void setPalette (const QPalette &);
	 void setBackgroundRole (QPalette::ColorRole);
	 QPalette::ColorRole backgroundRole () const;
	 void setForegroundRole (QPalette::ColorRole);
	 QPalette::ColorRole foregroundRole () const;
	 const QFont & font () const;
	 void setFont (const QFont &);
	 QFontInfo fontInfo () const;
	 QCursor cursor () const;
	 void setCursor (const QCursor &);
	 void unsetCursor ();
	 void setMouseTracking (bool enable);
	 bool hasMouseTracking () const;
	 bool underMouse () const;
	 void setMask (const QBitmap &);
	 void setMask (const QRegion &);
	 QRegion mask () const;
	 void clearMask ();
	 void setWindowTitle (const QString &);
	 QString windowTitle () const;
	 void setWindowIcon (const QIcon &icon);
	 QIcon windowIcon () const;
	 void setWindowIconText (const QString &);
	 QString windowIconText () const;
	 void setWindowRole (const QString &);
	 QString windowRole () const;
	 void setWindowOpacity (qreal level);
	 qreal windowOpacity () const;
	 bool isWindowModified () const;
	 void setToolTip (const QString &);
	 QString toolTip () const;
	 void setStatusTip (const QString &);
	 QString statusTip () const;
	 void setWhatsThis (const QString &);
	 QString whatsThis () const;
	 QString accessibleName () const;
	 void setAccessibleName (const QString &name);
	 QString accessibleDescription () const;
	 void setAccessibleDescription (const QString &description);
	 void setLayoutDirection (Qt::LayoutDirection direction);
	 Qt::LayoutDirection layoutDirection () const;
	 void unsetLayoutDirection ();
	 bool isRightToLeft () const;
	 bool isLeftToRight () const;
	 bool isActiveWindow () const;
	 void activateWindow ();
	 void clearFocus ();
	 void setFocus (Qt::FocusReason reason);
	 Qt::FocusPolicy focusPolicy () const;
	 void setFocusPolicy (Qt::FocusPolicy policy);
	 bool hasFocus () const;
	 void setFocusProxy (QWidget *);
	 QWidget * focusProxy () const;
	 Qt::ContextMenuPolicy contextMenuPolicy () const;
	 void setContextMenuPolicy (Qt::ContextMenuPolicy policy);
	 void grabMouse ();
	 void grabMouse (const QCursor &);
	 void releaseMouse ();
	 void grabKeyboard ();
	 void releaseKeyboard ();
	 int grabShortcut (const QKeySequence &key, Qt::ShortcutContext context=Qt::WindowShortcut);
	 void releaseShortcut (int id);
	 void setShortcutEnabled (int id, bool enable=true);
	 bool updatesEnabled () const;
	 void setUpdatesEnabled (bool enable);
	 void update (int x, int y, int w, int h);
	 void update (const QRect &);
	 void update (const QRegion &);
	 void repaint (int x, int y, int w, int h);
	 void repaint (const QRect &);
	 void repaint (const QRegion &);
	 void stackUnder (QWidget *);
	 void move (int x, int y);
	 void move (const QPoint &);
	 void resize (int w, int h);
	 void resize (const QSize &);
	 void setGeometry (int x, int y, int w, int h);
	 void setGeometry (const QRect &);
	 void adjustSize ();
	 bool isVisible () const;
	 bool isVisibleTo (QWidget *) const;
	 bool isHidden () const;
	 bool isMinimized () const;
	 bool isMaximized () const;
	 bool isFullScreen () const;
	 Qt::WindowStates windowState () const;
	 void setWindowState (Qt::WindowStates state);
	 void overrideWindowState (Qt::WindowStates state);
	 virtual QSize sizeHint () const;
	 virtual QSize minimumSizeHint () const;
	 QSizePolicy sizePolicy () const;
	 void setSizePolicy (QSizePolicy);
	 void setSizePolicy (QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical);
	 virtual int heightForWidth (int) const;
	 QRegion visibleRegion () const;
	 void setContentsMargins (int left, int top, int right, int bottom);
	 void getContentsMargins (int *left, int *top, int *right, int *bottom) const;
	 QRect contentsRect () const;
	 QLayout * layout () const;
	 void setLayout (QLayout *);
	 void updateGeometry ();
	 void setParent (QWidget *parent);
	 void setParent (QWidget *parent, Qt::WFlags f);
	 void scroll (int dx, int dy);
	 void scroll (int dx, int dy, const QRect &);
	 QWidget * focusWidget () const;
	 QWidget * nextInFocusChain () const;
	 bool acceptDrops () const;
	 void setAcceptDrops (bool on);
	 void addAction (QAction *action);
	 void addActions (QList< QAction * > actions);
	 void insertAction (QAction *before, QAction *action);
	 void insertActions (QAction *before, QList< QAction * > actions);
	 void removeAction (QAction *action);
	 QList< QAction * > actions () const;
	 QWidget * parentWidget () const;
	 void setWindowFlags (Qt::WindowFlags type);
	 Qt::WindowFlags windowFlags () const;
	 void overrideWindowFlags (Qt::WindowFlags type);
	 Qt::WindowType windowType () const;
	 QWidget * childAt (int x, int y) const;
	 QWidget * childAt (const QPoint &p) const;
	 Qt::HANDLE handle () const;
	 void setAttribute (Qt::WidgetAttribute, bool on=true);
	 bool testAttribute (Qt::WidgetAttribute) const;
	 QPaintEngine * paintEngine () const;
	 void ensurePolished () const;
	 QInputContext * inputContext ();
	 void setInputContext (QInputContext *);
	 bool isAncestorOf (const QWidget *child) const;
	 virtual QVariant inputMethodQuery (Qt::InputMethodQuery) const;
	 void setEnabled (bool);
	 void setDisabled (bool);
	 void setWindowModified (bool);
	 void setFocus ();
	 void update ();
	 void repaint ();
	 virtual void setVisible (bool visible);
	 void setHidden (bool hidden);
	 void show ();
	 void hide ();
	 QT_MOC_COMPAT void setShown (bool shown);
	 void showMinimized ();
	 void showMaximized ();
	 void showFullScreen ();
	 void showNormal ();
	 bool close ();
	 void raise ();
	 void lower ();
		protected  virtual void mousePressEvent (QMouseEvent *);
	protected  virtual void mouseReleaseEvent (QMouseEvent *);
	protected  virtual void mouseDoubleClickEvent (QMouseEvent *);
	protected  virtual void mouseMoveEvent (QMouseEvent *);
	protected  virtual void wheelEvent (QWheelEvent *);
	protected  virtual void keyPressEvent (QKeyEvent *);
	protected  virtual void keyReleaseEvent (QKeyEvent *);
	protected  virtual void focusInEvent (QFocusEvent *);
	protected  virtual void focusOutEvent (QFocusEvent *);
	protected  virtual void enterEvent (QEvent *);
	protected  virtual void leaveEvent (QEvent *);
	protected  virtual void paintEvent (QPaintEvent *);
	protected  virtual void moveEvent (QMoveEvent *);
	protected  virtual void resizeEvent (QResizeEvent *);
	protected  virtual void closeEvent (QCloseEvent *);
	protected  virtual void contextMenuEvent (QContextMenuEvent *);
	protected  virtual void tabletEvent (QTabletEvent *);
	protected  virtual void actionEvent (QActionEvent *);
	protected  virtual void dragEnterEvent (QDragEnterEvent *);
	protected  virtual void dragMoveEvent (QDragMoveEvent *);
	protected  virtual void dragLeaveEvent (QDragLeaveEvent *);
	protected  virtual void dropEvent (QDropEvent *);
	protected  virtual void showEvent (QShowEvent *);
	protected  virtual void hideEvent (QHideEvent *);
	protected  virtual void changeEvent (QEvent *);
		protected  virtual void inputMethodEvent (QInputMethodEvent *);
					protected  virtual bool focusNextPrevChild (bool next);
				protected  virtual void styleChange (QStyle &);
	protected  virtual void enabledChange (bool);
	protected  virtual void paletteChange (const QPalette &);
	protected  virtual void fontChange (const QFont &);
	protected  virtual void windowActivationChange (bool);
	protected  virtual void languageChange ();
	 static void setTabOrder (QWidget *, QWidget *);
	 static QWidget * mouseGrabber ();
	 static QWidget * keyboardGrabber ();
	 static QWidget * find (WId);

};
$#include <QStyleHintReturnMask>

class QStyleHintReturnMask : public QStyleHintReturn {
Q_OBJECT
signals:
public:
	 enum { Type = SH_Mask };
	 enum { Version = 1 };

	 QStyleHintReturnMask ();
	 QRegion region;

};
$#include <QShortcut>

class QShortcut : public QObject {
Q_OBJECT
signals:
	 void activated ();
	 void activatedAmbiguously ();
public:

	 QShortcut (QWidget *parent);
	 QShortcut (const QKeySequence &key, QWidget *parent, const char *member=0, const char *ambiguousMember=0, Qt::ShortcutContext context=Qt::WindowShortcut);
	 ~QShortcut ();
	 void setKey (const QKeySequence &key);
	 QKeySequence key () const;
	 void setEnabled (bool enable);
	 bool isEnabled () const;
	 void setContext (Qt::ShortcutContext context);
	 Qt::ShortcutContext context ();
	 void setWhatsThis (const QString &text);
	 QString whatsThis () const;
	 int id () const;
	 QWidget * parentWidget () const;
	
};
$#include <QWidgetItem>

class QWidgetItem : public QLayoutItem {
Q_OBJECT
signals:
public:

	 QWidgetItem (QWidget *w);
	 QSize sizeHint () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 Qt::Orientations expandingDirections () const;
	 bool isEmpty () const;
	 void setGeometry (const QRect &);
	 QRect geometry () const;
	 virtual QWidget * widget ();
	 bool hasHeightForWidth () const;
	 int heightForWidth (int) const;

};
$#include <QDropEvent>

class QDropEvent : public QEvent , public QMimeSource {
Q_OBJECT
signals:
public:

	 QDropEvent (const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type=Drop);
	 ~QDropEvent ();
	 const QPoint & pos () const;
	 Qt::MouseButtons mouseButtons () const;
	 Qt::KeyboardModifiers keyboardModifiers () const;
	 Qt::DropActions possibleActions () const;
	 Qt::DropAction proposedAction () const;
	 void acceptProposedAction ();
	 Qt::DropAction dropAction () const;
	 void setDropAction (Qt::DropAction action);
	 QWidget * source () const;
	 const QMimeData * mimeData () const;
	 const char * format (int n=0) const;
	 QByteArray encodedData (const char *) const;
	 bool provides (const char *) const;

};
$#include <QAbstractItemDelegate>

class QAbstractItemDelegate : public QObject {
Q_OBJECT
signals:
	 void commitData (QWidget *editor);
	 void closeEditor (QWidget *editor, QAbstractItemDelegate::EndEditHint hint=NoHint);
public:
	 enum EndEditHint {         NoHint, EditNextItem, EditPreviousItem, SubmitModelCache,         RevertModelCache       };

	 QAbstractItemDelegate (QObject *parent=0);
	 virtual ~QAbstractItemDelegate ();
	 virtual void paint (QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const =0;
	 virtual QSize sizeHint (const QStyleOptionViewItem &option, const QModelIndex &index) const =0;
	 virtual QWidget * createEditor (QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 virtual void setEditorData (QWidget *editor, const QModelIndex &index) const;
	 virtual void setModelData (QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;
	 virtual void updateEditorGeometry (QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 virtual bool editorEvent (QEvent *event, QAbstractItemModel *model, const QStyleOptionViewItem &option, const QModelIndex &index);
		 static QString elidedText (const QFontMetrics &fontMetrics, int width, Qt::TextElideMode mode, const QString &text);

};
$#include <QAccessiblePlugin>

class QAccessiblePlugin : public QObject , public QAccessibleFactoryInterface {
Q_OBJECT
signals:
public:

	 QAccessiblePlugin (QObject *parent=0);
	 ~QAccessiblePlugin ();
	 virtual QStringList keys () const =0;
	 virtual QAccessibleInterface * create (const QString &key, QObject *object)=0;

};
$#include <QStyleOptionRubberBand>

class QStyleOptionRubberBand : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_RubberBand };
	 enum { Version = 1 };

	 QStyleOptionRubberBand ();
	 QStyleOptionRubberBand (const QStyleOptionRubberBand &other);
		 QRubberBand::Shape shape;
	 bool opaque;

};
$#include <QWhatsThisClickedEvent>

class QWhatsThisClickedEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QWhatsThisClickedEvent (const QString &href);
	 ~QWhatsThisClickedEvent ();
	 QString href () const;

};
$#include <QResizeEvent>

class QResizeEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QResizeEvent (const QSize &size, const QSize &oldSize);
	 ~QResizeEvent ();
	 const QSize & size () const;
	 const QSize & oldSize () const;

};
$#include <QStyle>

class QStyle : public QObject {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags State;
	 typedef LuaQtGenericFlags SubControls;
	 enum StateFlag {         State_None = 0x00000000, State_Enabled = 0x00000001, State_Raised = 0x00000002, State_Sunken = 0x00000004,         State_Off = 0x00000008, State_NoChange = 0x00000010, State_On = 0x00000020, State_DownArrow = 0x00000040,         State_Horizontal = 0x00000080, State_HasFocus = 0x00000100, State_Top = 0x00000200, State_Bottom = 0x00000400,         State_FocusAtBorder = 0x00000800, State_AutoRaise = 0x00001000, State_MouseOver = 0x00002000, State_UpArrow = 0x00004000,         State_Selected = 0x00008000, State_Active = 0x00010000, State_Open = 0x00040000, State_Children = 0x00080000,         State_Item = 0x00100000, State_Sibling = 0x00200000, State_Editing = 0x00400000, State_KeyboardFocusChange = 0x00800000       };
	 enum PrimitiveElement {         PE_Q3CheckListController, PE_Q3CheckListExclusiveIndicator, PE_Q3CheckListIndicator, PE_Q3DockWindowSeparator,         PE_Q3Separator, PE_Frame, PE_FrameDefaultButton, PE_FrameDockWidget,         PE_FrameFocusRect, PE_FrameGroupBox, PE_FrameLineEdit, PE_FrameMenu,         PE_FrameStatusBar, PE_FrameTabWidget, PE_FrameWindow, PE_FrameButtonBevel,         PE_FrameButtonTool, PE_FrameTabBarBase, PE_PanelButtonCommand, PE_PanelButtonBevel,         PE_PanelButtonTool, PE_PanelMenuBar, PE_PanelToolBar, PE_PanelLineEdit,         PE_IndicatorArrowDown, PE_IndicatorArrowLeft, PE_IndicatorArrowRight, PE_IndicatorArrowUp,         PE_IndicatorBranch, PE_IndicatorButtonDropDown, PE_IndicatorViewItemCheck, PE_IndicatorCheckBox,         PE_IndicatorDockWidgetResizeHandle, PE_IndicatorHeaderArrow, PE_IndicatorMenuCheckMark, PE_IndicatorProgressChunk,         PE_IndicatorRadioButton, PE_IndicatorSpinDown, PE_IndicatorSpinMinus, PE_IndicatorSpinPlus,         PE_IndicatorSpinUp, PE_IndicatorToolBarHandle, PE_IndicatorToolBarSeparator, PE_PanelTipLabel,         PE_IndicatorTabTear, PE_CustomBase = 0xf000000       };
	 enum ControlElement {         CE_PushButton, CE_PushButtonBevel, CE_PushButtonLabel, CE_CheckBox,         CE_CheckBoxLabel, CE_RadioButton, CE_RadioButtonLabel, CE_TabBarTab,         CE_TabBarTabShape, CE_TabBarTabLabel, CE_ProgressBar, CE_ProgressBarGroove,         CE_ProgressBarContents, CE_ProgressBarLabel, CE_MenuItem, CE_MenuScroller,         CE_MenuVMargin, CE_MenuHMargin, CE_MenuTearoff, CE_MenuEmptyArea,         CE_MenuBarItem, CE_MenuBarEmptyArea, CE_ToolButtonLabel, CE_Header,         CE_HeaderSection, CE_HeaderLabel, CE_Q3DockWindowEmptyArea, CE_ToolBoxTab,         CE_SizeGrip, CE_Splitter, CE_RubberBand, CE_DockWidgetTitle,         CE_ScrollBarAddLine, CE_ScrollBarSubLine, CE_ScrollBarAddPage, CE_ScrollBarSubPage,         CE_ScrollBarSlider, CE_ScrollBarFirst, CE_ScrollBarLast, CE_FocusFrame,         CE_ComboBoxLabel, CE_CustomBase = 0xf0000000       };
	 enum SubElement {         SE_PushButtonContents, SE_PushButtonFocusRect, SE_CheckBoxIndicator, SE_CheckBoxContents,         SE_CheckBoxFocusRect, SE_CheckBoxClickRect, SE_RadioButtonIndicator, SE_RadioButtonContents,         SE_RadioButtonFocusRect, SE_RadioButtonClickRect, SE_ComboBoxFocusRect, SE_SliderFocusRect,         SE_Q3DockWindowHandleRect, SE_ProgressBarGroove, SE_ProgressBarContents, SE_ProgressBarLabel,         SE_DialogButtonAccept, SE_DialogButtonReject, SE_DialogButtonApply, SE_DialogButtonHelp,         SE_DialogButtonAll, SE_DialogButtonAbort, SE_DialogButtonIgnore, SE_DialogButtonRetry,         SE_DialogButtonCustom, SE_ToolBoxTabContents, SE_HeaderLabel, SE_HeaderArrow,         SE_TabWidgetTabBar, SE_TabWidgetTabPane, SE_TabWidgetTabContents, SE_TabWidgetLeftCorner,         SE_TabWidgetRightCorner, SE_ViewItemCheckIndicator, SE_TabBarTearIndicator, SE_CustomBase = 0xf0000000       };
	 enum ComplexControl {         CC_SpinBox, CC_ComboBox, CC_ScrollBar, CC_Slider,         CC_ToolButton, CC_TitleBar, CC_Q3ListView, CC_Dial,         CC_CustomBase = 0xf0000000       };
	 enum SubControl {         SC_None = 0x00000000, SC_ScrollBarAddLine = 0x00000001, SC_ScrollBarSubLine = 0x00000002, SC_ScrollBarAddPage = 0x00000004,         SC_ScrollBarSubPage = 0x00000008, SC_ScrollBarFirst = 0x00000010, SC_ScrollBarLast = 0x00000020, SC_ScrollBarSlider = 0x00000040,         SC_ScrollBarGroove = 0x00000080, SC_SpinBoxUp = 0x00000001, SC_SpinBoxDown = 0x00000002, SC_SpinBoxFrame = 0x00000004,         SC_SpinBoxEditField = 0x00000008, SC_ComboBoxFrame = 0x00000001, SC_ComboBoxEditField = 0x00000002, SC_ComboBoxArrow = 0x00000004,         SC_ComboBoxListBoxPopup = 0x00000008, SC_SliderGroove = 0x00000001, SC_SliderHandle = 0x00000002, SC_SliderTickmarks = 0x00000004,         SC_ToolButton = 0x00000001, SC_ToolButtonMenu = 0x00000002, SC_TitleBarSysMenu = 0x00000001, SC_TitleBarMinButton = 0x00000002,         SC_TitleBarMaxButton = 0x00000004, SC_TitleBarCloseButton = 0x00000008, SC_TitleBarNormalButton = 0x00000010, SC_TitleBarShadeButton = 0x00000020,         SC_TitleBarUnshadeButton = 0x00000040, SC_TitleBarContextHelpButton = 0x00000080, SC_TitleBarLabel = 0x00000100, SC_Q3ListView = 0x00000001,         SC_Q3ListViewBranch = 0x00000002, SC_Q3ListViewExpand = 0x00000004, SC_DialGroove = 0x00000001, SC_DialHandle = 0x00000002,         SC_DialTickmarks = 0x00000004, SC_All = 0xffffffff       };
	 enum PixelMetric {         PM_ButtonMargin, PM_ButtonDefaultIndicator, PM_MenuButtonIndicator, PM_ButtonShiftHorizontal,         PM_ButtonShiftVertical, PM_DefaultFrameWidth, PM_SpinBoxFrameWidth, PM_ComboBoxFrameWidth,         PM_MaximumDragDistance, PM_ScrollBarExtent, PM_ScrollBarSliderMin, PM_SliderThickness,         PM_SliderControlThickness, PM_SliderLength, PM_SliderTickmarkOffset, PM_SliderSpaceAvailable,         PM_DockWidgetSeparatorExtent, PM_DockWidgetHandleExtent, PM_DockWidgetFrameWidth, PM_TabBarTabOverlap,         PM_TabBarTabHSpace, PM_TabBarTabVSpace, PM_TabBarBaseHeight, PM_TabBarBaseOverlap,         PM_ProgressBarChunkWidth, PM_SplitterWidth, PM_TitleBarHeight, PM_MenuScrollerHeight,         PM_MenuHMargin, PM_MenuVMargin, PM_MenuPanelWidth, PM_MenuTearoffHeight,         PM_MenuDesktopFrameWidth, PM_MenuBarPanelWidth, PM_MenuBarItemSpacing, PM_MenuBarVMargin,         PM_MenuBarHMargin, PM_IndicatorWidth, PM_IndicatorHeight, PM_ExclusiveIndicatorWidth,         PM_ExclusiveIndicatorHeight, PM_CheckListButtonSize, PM_CheckListControllerSize, PM_DialogButtonsSeparator,         PM_DialogButtonsButtonWidth, PM_DialogButtonsButtonHeight, PM_MDIFrameWidth, PM_MDIMinimizedWidth,         PM_HeaderMargin, PM_HeaderMarkSize, PM_HeaderGripMargin, PM_TabBarTabShiftHorizontal,         PM_TabBarTabShiftVertical, PM_TabBarScrollButtonWidth, PM_ToolBarFrameWidth, PM_ToolBarHandleExtent,         PM_ToolBarItemSpacing, PM_ToolBarItemMargin, PM_ToolBarSeparatorExtent, PM_ToolBarExtensionExtent,         PM_SpinBoxSliderHeight, PM_DefaultTopLevelMargin, PM_DefaultChildMargin, PM_DefaultLayoutSpacing,         PM_ToolBarIconSize, PM_ListViewIconSize, PM_IconViewIconSize, PM_SmallIconSize,         PM_LargeIconSize, PM_FocusFrameVMargin, PM_FocusFrameHMargin, PM_ToolTipLabelFrameWidth,         PM_CustomBase = 0xf0000000       };
	 enum ContentsType {         CT_PushButton, CT_CheckBox, CT_RadioButton, CT_ToolButton,         CT_ComboBox, CT_Splitter, CT_Q3DockWindow, CT_ProgressBar,         CT_MenuItem, CT_MenuBarItem, CT_MenuBar, CT_Menu,         CT_TabBarTab, CT_Slider, CT_ScrollBar, CT_Q3Header,         CT_LineEdit, CT_SpinBox, CT_SizeGrip, CT_TabWidget,         CT_DialogButtons, CT_HeaderSection, CT_CustomBase = 0xf0000000       };
	 enum StyleHint {         SH_EtchDisabledText, SH_DitherDisabledText, SH_ScrollBar_MiddleClickAbsolutePosition, SH_ScrollBar_ScrollWhenPointerLeavesControl,         SH_TabBar_SelectMouseType, SH_TabBar_Alignment, SH_Header_ArrowAlignment, SH_Slider_SnapToValue,         SH_Slider_SloppyKeyEvents, SH_ProgressDialog_CenterCancelButton, SH_ProgressDialog_TextLabelAlignment, SH_PrintDialog_RightAlignButtons,         SH_MainWindow_SpaceBelowMenuBar, SH_FontDialog_SelectAssociatedText, SH_Menu_AllowActiveAndDisabled, SH_Menu_SpaceActivatesItem,         SH_Menu_SubMenuPopupDelay, SH_ScrollView_FrameOnlyAroundContents, SH_MenuBar_AltKeyNavigation, SH_ComboBox_ListMouseTracking,         SH_Menu_MouseTracking, SH_MenuBar_MouseTracking, SH_ItemView_ChangeHighlightOnFocus, SH_Widget_ShareActivation,         SH_Workspace_FillSpaceOnMaximize, SH_ComboBox_Popup, SH_TitleBar_NoBorder, SH_ScrollBar_StopMouseOverSlider,         SH_BlinkCursorWhenTextSelected, SH_RichText_FullWidthSelection, SH_Menu_Scrollable, SH_GroupBox_TextLabelVerticalAlignment,         SH_GroupBox_TextLabelColor, SH_Menu_SloppySubMenus, SH_Table_GridLineColor, SH_LineEdit_PasswordCharacter,         SH_DialogButtons_DefaultButton, SH_ToolBox_SelectedPageTitleBold, SH_TabBar_PreferNoArrows, SH_ScrollBar_LeftClickAbsolutePosition,         SH_Q3ListViewExpand_SelectMouseType, SH_UnderlineShortcut, SH_SpinBox_AnimateButton, SH_SpinBox_KeyPressAutoRepeatRate,         SH_SpinBox_ClickAutoRepeatRate, SH_Menu_FillScreenWithScroll, SH_ToolTipLabel_Opacity, SH_DrawMenuBarSeparator,         SH_TitleBar_ModifyNotification, SH_Button_FocusPolicy, SH_MenuBar_DismissOnSecondClick, SH_MessageBox_UseBorderForButtonSpacing,         SH_TitleBar_AutoRaise, SH_ToolButton_PopupDelay, SH_FocusFrame_Mask, SH_RubberBand_Mask,         SH_WindowFrame_Mask, SH_SpinControls_DisableOnBounds, SH_Dial_BackgroundRole, SH_ComboBox_LayoutDirection,         SH_ItemView_EllipsisLocation, SH_ItemView_ShowDecorationSelected, SH_ItemView_ActivateItemOnSingleClick, SH_CustomBase = 0xf0000000       };
	 enum StandardPixmap {         SP_TitleBarMenuButton, SP_TitleBarMinButton, SP_TitleBarMaxButton, SP_TitleBarCloseButton,         SP_TitleBarNormalButton, SP_TitleBarShadeButton, SP_TitleBarUnshadeButton, SP_TitleBarContextHelpButton,         SP_DockWidgetCloseButton, SP_MessageBoxInformation, SP_MessageBoxWarning, SP_MessageBoxCritical,         SP_MessageBoxQuestion, SP_DesktopIcon, SP_TrashIcon, SP_ComputerIcon,         SP_DriveFDIcon, SP_DriveHDIcon, SP_DriveCDIcon, SP_DriveDVDIcon,         SP_DriveNetIcon, SP_DirOpenIcon, SP_DirClosedIcon, SP_DirLinkIcon,         SP_FileIcon, SP_FileLinkIcon, SP_ToolBarHorizontalExtensionButton, SP_ToolBarVerticalExtensionButton,         SP_FileDialogStart, SP_FileDialogEnd, SP_FileDialogToParent, SP_FileDialogNewFolder,         SP_FileDialogDetailedView, SP_FileDialogInfoView, SP_FileDialogContentsView, SP_FileDialogListView,         SP_FileDialogBack, SP_CustomBase = 0xf0000000       };

	 QStyle ();
	 virtual ~QStyle ();
	 virtual void polish (QWidget *);
	 virtual void unpolish (QWidget *);
	 virtual void polish (QApplication *);
	 virtual void unpolish (QApplication *);
	 virtual void polish (QPalette &);
	 virtual QRect itemTextRect (const QFontMetrics &fm, const QRect &r, int flags, bool enabled, const QString &text) const;
	 virtual QRect itemPixmapRect (const QRect &r, int flags, const QPixmap &pixmap) const;
	 virtual void drawItemText (QPainter *painter, const QRect &rect, int flags, const QPalette &pal, bool enabled, const QString &text, QPalette::ColorRole textRole=QPalette::NoRole) const;
	 virtual void drawItemPixmap (QPainter *painter, const QRect &rect, int alignment, const QPixmap &pixmap) const;
	 virtual QPalette standardPalette () const;
	 virtual void drawPrimitive (PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const =0;
	 virtual void drawControl (ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const =0;
	 virtual QRect subElementRect (SubElement subElement, const QStyleOption *option, const QWidget *widget=0) const =0;
	 virtual void drawComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *widget=0) const =0;
	 virtual SubControl hitTestComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, const QPoint &pt, const QWidget *widget=0) const =0;
	 virtual QRect subControlRect (ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget=0) const =0;
	 virtual int pixelMetric (PixelMetric metric, const QStyleOption *option=0, const QWidget *widget=0) const =0;
	 virtual QSize sizeFromContents (ContentsType ct, const QStyleOption *opt, const QSize &contentsSize, const QWidget *w=0) const =0;
	 virtual int styleHint (StyleHint stylehint, const QStyleOption *opt=0, const QWidget *widget=0, QStyleHintReturn *returnData=0) const =0;
	 virtual QPixmap standardPixmap (StandardPixmap standardPixmap, const QStyleOption *opt=0, const QWidget *widget=0) const =0;
	 virtual QPixmap generatedIconPixmap (QIcon::Mode iconMode, const QPixmap &pixmap, const QStyleOption *opt) const =0;
	 static QRect visualRect (Qt::LayoutDirection direction, const QRect &boundingRect, const QRect &logicalRect);
	 static QPoint visualPos (Qt::LayoutDirection direction, const QRect &boundingRect, const QPoint &logicalPos);
	 static int sliderPositionFromValue (int min, int max, int val, int space, bool upsideDown=false);
	 static int sliderValueFromPosition (int min, int max, int pos, int space, bool upsideDown=false);
	 static Qt::Alignment visualAlignment (Qt::LayoutDirection direction, Qt::Alignment alignment);
	 static QRect alignedRect (Qt::LayoutDirection direction, Qt::Alignment alignment, const QSize &size, const QRect &rectangle);

};
$#include <QDragLeaveEvent>

class QDragLeaveEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QDragLeaveEvent ();
	 ~QDragLeaveEvent ();

};
$#include <QSpacerItem>

class QSpacerItem : public QLayoutItem {
Q_OBJECT
signals:
public:

	 QSpacerItem (int w, int h, QSizePolicy::Policy hData=QSizePolicy::Minimum, QSizePolicy::Policy vData=QSizePolicy::Minimum);
	 void changeSize (int w, int h, QSizePolicy::Policy hData=QSizePolicy::Minimum, QSizePolicy::Policy vData=QSizePolicy::Minimum);
	 QSize sizeHint () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 Qt::Orientations expandingDirections () const;
	 bool isEmpty () const;
	 void setGeometry (const QRect &);
	 QRect geometry () const;
	 QSpacerItem * spacerItem ();

};
$#include <QIconEnginePlugin>

class QIconEnginePlugin : public QObject , public QIconEngineFactoryInterface {
Q_OBJECT
signals:
public:

	 QIconEnginePlugin (QObject *parent=0);
	 ~QIconEnginePlugin ();
	 virtual QStringList keys () const =0;
	 virtual QIconEngine * create (const QString &filename)=0;

};
$#include <QHelpEvent>

class QHelpEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QHelpEvent (Type type, const QPoint &pos, const QPoint &globalPos);
	 ~QHelpEvent ();
	 int x () const;
	 int y () const;
	 int globalX () const;
	 int globalY () const;
	 const QPoint & pos () const;
	 const QPoint & globalPos () const;

};
$#include <QClipboard>

class QClipboard : public QObject {
Q_OBJECT
signals:
	 void selectionChanged ();
	 void dataChanged ();
public:
	 enum Mode { Clipboard, Selection };

	 void clear (Mode mode=Clipboard);
	 bool supportsSelection () const;
	 bool ownsSelection () const;
	 bool ownsClipboard () const;
	 QString text (Mode mode=Clipboard) const;
	 QString text (QString &subtype, Mode mode=Clipboard) const;
	 void setText (const QString &, Mode mode=Clipboard);
	 const QMimeData * mimeData (Mode mode=Clipboard) const;
	 void setMimeData (QMimeData *data, Mode mode=Clipboard);
	 QImage image (Mode mode=Clipboard) const;
	 QPixmap pixmap (Mode mode=Clipboard) const;
	 void setImage (const QImage &, Mode mode=Clipboard);
	 void setPixmap (const QPixmap &, Mode mode=Clipboard);
		
};
$#include <QPrinter>

class QPrinter : public QPaintDevice {
Q_OBJECT
signals:
public:
	 enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution };
	 enum Orientation { Portrait, Landscape };
	 enum PageSize {         A4, B5, Letter, Legal,         Executive, A0, A1, A2,         A3, A5, A6, A7,         A8, A9, B0, B1,         B10, B2, B3, B4,         B6, B7, B8, B9,         C5E, Comm10E, DLE, Folio,         Ledger, Tabloid, Custom, NPageSize = Custom       };
	 enum PageOrder { FirstPageFirst, LastPageFirst };
	 enum ColorMode { GrayScale, Color };
	 enum PaperSource {         OnlyOne, Lower, Middle, Manual,         Envelope, EnvelopeManual, Auto, Tractor,         SmallFormat, LargeFormat, LargeCapacity, Cassette,         FormSource       };
	 enum PrinterState { Idle, Active, Aborted, Error };

	 QPrinter (PrinterMode mode=ScreenResolution);
	 ~QPrinter ();
	 int devType () const;
	 void setPrinterName (const QString &);
	 QString printerName () const;
	 void setOutputFileName (const QString &);
	 QString outputFileName () const;
	 void setPrintProgram (const QString &);
	 QString printProgram () const;
	 void setDocName (const QString &);
	 QString docName () const;
	 void setCreator (const QString &);
	 QString creator () const;
	 void setOrientation (Orientation);
	 Orientation orientation () const;
	 void setPageSize (PageSize);
	 PageSize pageSize () const;
	 void setPageOrder (PageOrder);
	 PageOrder pageOrder () const;
	 void setResolution (int);
	 int resolution () const;
	 void setColorMode (ColorMode);
	 ColorMode colorMode () const;
	 void setCollateCopies (bool collate);
	 bool collateCopies () const;
	 void setFullPage (bool);
	 bool fullPage () const;
	 void setNumCopies (int);
	 int numCopies () const;
	 void setPaperSource (PaperSource);
	 PaperSource paperSource () const;
	 QList< int > supportedResolutions () const;
	 QRect paperRect () const;
	 QRect pageRect () const;
	 bool newPage ();
	 bool abort ();
	 PrinterState printerState () const;
	 QPaintEngine * paintEngine () const;
	
};
$#include <QInputEvent>

class QInputEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QInputEvent (Type type, Qt::KeyboardModifiers modifiers=Qt::NoModifier);
	 ~QInputEvent ();
	 Qt::KeyboardModifiers modifiers () const;

};
$#include <QStyleOptionViewItem>

class QStyleOptionViewItem : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_ViewItem };
	 enum { Version = 1 };
	 enum Position { Left, Right, Top, Bottom };

	 QStyleOptionViewItem ();
	 QStyleOptionViewItem (const QStyleOptionViewItem &other);
		 Qt::Alignment displayAlignment;
	 Qt::Alignment decorationAlignment;
	 Qt::TextElideMode textElideMode;
	 Position decorationPosition;
	 QSize decorationSize;
	 QFont font;
	 bool showDecorationSelected;

};
$#include <QPicture>

class QPicture : public QPaintDevice {
Q_OBJECT
signals:
public:

	 QPicture (int formatVersion=-1);
	 QPicture (const QPicture &);
	 ~QPicture ();
	 bool isNull () const;
	 int devType () const;
	 uint size () const;
	 const char * data () const;
	 virtual void setData (const char *data, uint size);
	 bool play (QPainter *p);
	 bool load (QIODevice *dev, const char *format=0);
	 bool load (const QString &fileName, const char *format=0);
	 bool save (QIODevice *dev, const char *format=0);
	 bool save (const QString &fileName, const char *format=0);
	 QRect boundingRect () const;
	 void setBoundingRect (const QRect &r);
	 QPicture & operator= (const QPicture &p);
	 void detach ();
	 bool isDetached () const;
	 QPaintEngine * paintEngine () const;
			 static const char * pictureFormat (const QString &fileName);
	 static QList< QByteArray > inputFormats ();
	 static QList< QByteArray > outputFormats ();
	 static QStringList inputFormatList ();
	 static QStringList outputFormatList ();

};
$#include <QHideEvent>

class QHideEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QHideEvent ();
	 ~QHideEvent ();

};
$#include <QTextCharFormat>

class QTextCharFormat : public QTextFormat {
Q_OBJECT
signals:
public:
	 enum VerticalAlignment { AlignNormal = 0, AlignSuperScript, AlignSubScript };

	 QTextCharFormat ();
	 bool isValid () const;
	 void setFont (const QFont &font);
	 QFont font () const;
	 void setFontFamily (const QString &family);
	 QString fontFamily () const;
	 void setFontPointSize (qreal size);
	 qreal fontPointSize () const;
	 void setFontWeight (int weight);
	 int fontWeight () const;
	 void setFontItalic (bool italic);
	 bool fontItalic () const;
	 void setFontUnderline (bool underline);
	 bool fontUnderline () const;
	 void setFontOverline (bool overline);
	 bool fontOverline () const;
	 void setFontStrikeOut (bool strikeOut);
	 bool fontStrikeOut () const;
	 void setUnderlineColor (const QColor &color);
	 QColor underlineColor () const;
	 void setFontFixedPitch (bool fixedPitch);
	 bool fontFixedPitch () const;
	 void setVerticalAlignment (VerticalAlignment alignment);
	 VerticalAlignment verticalAlignment () const;
	 void setAnchor (bool anchor);
	 bool isAnchor () const;
	 void setAnchorHref (const QString &value);
	 QString anchorHref () const;
	 void setAnchorName (const QString &name);
	 QString anchorName () const;
	 void setTableCellRowSpan (int tableCellRowSpan);
	 int tableCellRowSpan () const;
	 void setTableCellColumnSpan (int tableCellColumnSpan);
	 int tableCellColumnSpan () const;

};
$#include <QInputMethodEvent>

class QInputMethodEvent : public QEvent {
Q_OBJECT
signals:
public:
	 enum AttributeType { TextFormat, Cursor, Language, Ruby };
	 class Attribute;

	 QInputMethodEvent ();
	 QInputMethodEvent (const QString &preeditText, const QList< Attribute > &attributes);
	 void setCommitString (const QString &commitString, int replaceFrom=0, int replaceLength=0);
	 const QList< Attribute > & attributes () const;
	 const QString & preeditString () const;
	 const QString & commitString () const;
	 int replacementStart () const;
	 int replacementLength () const;
	 QInputMethodEvent (const QInputMethodEvent &other);

};
$#include <QStyleOptionToolBox>

class QStyleOptionToolBox : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_ToolBox };
	 enum { Version = 1 };

	 QStyleOptionToolBox ();
	 QStyleOptionToolBox (const QStyleOptionToolBox &other);
		 QString text;
	 QIcon icon;

};
$#include <QItemSelection>

class QItemSelection : public QList< QItemSelectionRange > {
Q_OBJECT
signals:
public:

	 QItemSelection ();
	 QItemSelection (const QModelIndex &topLeft, const QModelIndex &bottomRight);
	 void select (const QModelIndex &topLeft, const QModelIndex &bottomRight);
	 bool contains (const QModelIndex &index) const;
	 QModelIndexList indexes () const;
	 void merge (const QItemSelection &other, QItemSelectionModel::SelectionFlags command);
	 static void split (const QItemSelectionRange &range, const QItemSelectionRange &other, QItemSelection *result);

};
$#include <QStyleOptionTabWidgetFrame>

class QStyleOptionTabWidgetFrame : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_TabWidgetFrame };
	 enum { Version = 1 };

	 QStyleOptionTabWidgetFrame ();
	 QStyleOptionTabWidgetFrame (const QStyleOptionTabWidgetFrame &other);
		 int lineWidth;
	 int midLineWidth;
	 QTabBar::Shape shape;
	 QSize tabBarSize;
	 QSize rightCornerWidgetSize;
	 QSize leftCornerWidgetSize;

};
$#include <QImage>

class QImage : public QPaintDevice {
Q_OBJECT
signals:
public:
	 enum InvertMode { InvertRgb, InvertRgba };
	 enum Format {         Format_Invalid, Format_Mono, Format_MonoLSB, Format_Indexed8,         Format_RGB32, Format_ARGB32, Format_ARGB32_Premultiplied       };

	 QImage ();
	 QImage (const QSize &size, Format format);
	 QImage (int width, int height, Format format);
	 QImage (uchar *data, int width, int height, Format format);

	 QImage (const QString &fileName, const char *format=0);
	 QImage (const char *fileName, const char *format=0);
	 QImage (const QImage &);
	 ~QImage ();
	 QImage & operator= (const QImage &);
	 bool isNull () const;
	 int devType () const;
	 bool operator== (const QImage &) const;
	 bool operator!= (const QImage &) const;
	 operator QVariant () const;
	 void detach ();
	 bool isDetached () const;
	 QImage copy (const QRect &rect=QRect()) const;
	 QImage copy (int x, int y, int w, int h) const;
	 Format format () const;
	 QImage convertToFormat (Format f, Qt::ImageConversionFlags flags=Qt::AutoColor) const;
	 QImage convertToFormat (Format f, const QVector< QRgb > &colorTable, Qt::ImageConversionFlags flags=Qt::AutoColor) const;
	 int width () const;
	 int height () const;
	 QSize size () const;
	 QRect rect () const;
	 int depth () const;
	 int numColors () const;
	 QRgb color (int i) const;
	 void setColor (int i, QRgb c);
	 void setNumColors (int);
	 bool allGray () const;
	 bool isGrayscale () const;
	 uchar * bits ();
	 const uchar * bits () const;
	 int numBytes () const;
	 uchar * scanLine (int);
	 const uchar * scanLine (int) const;
	 int bytesPerLine () const;
	 bool valid (int x, int y) const;
	 int pixelIndex (int x, int y) const;
	 QRgb pixel (int x, int y) const;
	 void setPixel (int x, int y, uint index_or_rgb);
	 QVector< QRgb > colorTable () const;
	 void setColorTable (const QVector< QRgb > colors);
	 void fill (uint pixel);
	 bool hasAlphaChannel () const;
	 void setAlphaChannel (const QImage &alphaChannel);
	 QImage alphaChannel () const;
	 QImage createAlphaMask (Qt::ImageConversionFlags flags=Qt::AutoColor) const;
	 QImage createHeuristicMask (bool clipTight=true) const;
	 QImage scaled (int w, int h, Qt::AspectRatioMode aspectMode=Qt::IgnoreAspectRatio, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage scaled (const QSize &s, Qt::AspectRatioMode aspectMode=Qt::IgnoreAspectRatio, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage scaledToWidth (int w, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage scaledToHeight (int h, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage transformed (const QMatrix &matrix, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage mirrored (bool horizontally=false, bool vertically=true) const;
	 QImage rgbSwapped () const;
	 void invertPixels (InvertMode=InvertRgb);
	 bool load (const QString &fileName, const char *format=0);
	 bool loadFromData (const uchar *buf, int len, const char *format=0);
	 bool loadFromData (const QByteArray &data, const char *aformat=0);
	 bool save (const QString &fileName, const char *format, int quality=-1) const;
	 bool save (QIODevice *device, const char *format, int quality=-1) const;
	 int serialNumber () const;
	 QPaintEngine * paintEngine () const;
	 int dotsPerMeterX () const;
	 int dotsPerMeterY () const;
	 void setDotsPerMeterX (int);
	 void setDotsPerMeterY (int);
	 QPoint offset () const;
	 void setOffset (const QPoint &);
	 QList< QImageTextKeyLang > textList () const;
	 QStringList textLanguages () const;
	 QStringList textKeys () const;
	 QString text (const char *key, const char *lang=0) const;
	 QString text (const QImageTextKeyLang &) const;
	 void setText (const char *key, const char *lang, const QString &);
	protected  virtual int metric (PaintDeviceMetric metric) const;
	 static QMatrix trueMatrix (const QMatrix &, int w, int h);
	 static QImage fromData (const uchar *data, int size, const char *format=0);
	 static QImage fromData (const QByteArray &data, const char *format=0);

};
$#include <QStylePainter>

class QStylePainter : public QPainter {
Q_OBJECT
signals:
public:

	 QStylePainter ();
	 QStylePainter (QWidget *w);
	 QStylePainter (QPaintDevice *pd, QWidget *w);
	 bool begin (QWidget *w);
	 bool begin (QPaintDevice *pd, QWidget *w);
	 void drawPrimitive (QStyle::PrimitiveElement pe, const QStyleOption &opt);
	 void drawControl (QStyle::ControlElement ce, const QStyleOption &opt);
	 void drawComplexControl (QStyle::ComplexControl cc, const QStyleOptionComplex &opt);
	 void drawItemText (const QRect &r, int flags, const QPalette &pal, bool enabled, const QString &text, QPalette::ColorRole textRole=QPalette::NoRole);
	 void drawItemPixmap (const QRect &r, int flags, const QPixmap &pixmap);
	 QStyle * style () const;

};
$#include <QSound>

class QSound : public QObject {
Q_OBJECT
signals:
public:

	 QSound (const QString &filename, QObject *parent=0);
	 ~QSound ();
	 int loops () const;
	 int loopsRemaining () const;
	 void setLoops (int);
	 QString fileName () const;
	 bool isFinished () const;
	 void play ();
	 void stop ();
	 static bool isAvailable ();
	 static void play (const QString &filename);

};
$#include <QButtonGroup>

class QButtonGroup : public QObject {
Q_OBJECT
signals:
	 void buttonClicked (QAbstractButton *);
public:

	 QButtonGroup (QObject *parent=0);
	 ~QButtonGroup ();
	 void setExclusive (bool);
	 bool exclusive () const;
	 void addButton (QAbstractButton *);
	 void removeButton (QAbstractButton *);

};
$#include <QAction>

class QAction : public QObject {
Q_OBJECT
signals:
	 void changed ();
	 void triggered (bool checked=false);
	 void hovered ();
	 void toggled (bool);
public:
	 enum ActionEvent { Trigger, Hover };

	 QAction (QObject *parent);
	 QAction (const QString &text, QObject *parent);
	 QAction (const QIcon &icon, const QString &text, QObject *parent);
	 ~QAction ();
	 void setActionGroup (QActionGroup *group);
	 QActionGroup * actionGroup () const;
	 void setIcon (const QIcon &icon);
	 QIcon icon () const;
	 void setText (const QString &text);
	 QString text () const;
	 void setIconText (const QString &text);
	 QString iconText () const;
	 void setToolTip (const QString &tip);
	 QString toolTip () const;
	 void setStatusTip (const QString &statusTip);
	 QString statusTip () const;
	 void setWhatsThis (const QString &what);
	 QString whatsThis () const;
	 QMenu * menu () const;
	 void setMenu (QMenu *menu);
	 void setSeparator (bool b);
	 bool isSeparator () const;
	 void setShortcut (const QKeySequence &shortcut);
	 QKeySequence shortcut () const;
	 void setShortcutContext (Qt::ShortcutContext context);
	 Qt::ShortcutContext shortcutContext () const;
	 void setFont (const QFont &font);
	 QFont font () const;
	 void setCheckable (bool);
	 bool isCheckable () const;
	 QVariant data () const;
	 void setData (const QVariant &var);
	 bool isChecked () const;
	 bool isEnabled () const;
	 bool isVisible () const;
	 void activate (ActionEvent event);
	 bool showStatusText (QWidget *widget=0);
	 QWidget * parentWidget () const;
	 void trigger ();
	 void hover ();
	 void setChecked (bool);
	 void toggle ();
	 void setEnabled (bool);
	 void setDisabled (bool b);
	 void setVisible (bool);
	
};
$#include <QStyleOptionMenuItem>

class QStyleOptionMenuItem : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_MenuItem };
	 enum { Version = 1 };
	 enum MenuItemType {         Normal, DefaultItem, Separator, SubMenu,         Scroller, TearOff, Margin, EmptyArea       };
	 enum CheckType { NotCheckable, Exclusive, NonExclusive };

	 QStyleOptionMenuItem ();
	 QStyleOptionMenuItem (const QStyleOptionMenuItem &other);
		 MenuItemType menuItemType;
	 CheckType checkType;
	 bool checked;
	 bool menuHasCheckableItems;
	 QRect menuRect;
	 QString text;
	 QIcon icon;
	 int maxIconWidth;
	 int tabWidth;
	 QFont font;

};
$#include <QInputContextPlugin>

class QInputContextPlugin : public QObject , public QInputContextFactoryInterface {
Q_OBJECT
signals:
public:

	 QInputContextPlugin (QObject *parent=0);
	 ~QInputContextPlugin ();
	 virtual QStringList keys () const =0;
	 virtual QInputContext * create (const QString &key)=0;
	 virtual QStringList languages (const QString &key)=0;
	 virtual QString displayName (const QString &key)=0;
	 virtual QString description (const QString &key)=0;

};
$#include <QProxyModel>

class QProxyModel : public QAbstractItemModel {
Q_OBJECT
signals:
public:

	 QProxyModel (QObject *parent=0);
	 ~QProxyModel ();
	 virtual void setModel (QAbstractItemModel *model);
	 QAbstractItemModel * model () const;
	 QModelIndex index (int row, int column, const QModelIndex &parent) const;
	 QModelIndex parent (const QModelIndex &child) const;
	 int rowCount (const QModelIndex &parent) const;
	 int columnCount (const QModelIndex &parent) const;
	 bool hasChildren (const QModelIndex &parent) const;
	 QVariant data (const QModelIndex &index, int role) const;
	 bool setData (const QModelIndex &index, const QVariant &value, int role);
	 QVariant headerData (int section, Qt::Orientation orientation, int role) const;
	 bool setHeaderData (int section, Qt::Orientation orientation, const QVariant &value, int role);
	 QStringList mimeTypes () const;
	 QMimeData * mimeData (const QModelIndexList &indexes) const;
	 bool dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);
	 Qt::DropActions supportedDropActions () const;
	 bool insertRows (int row, int count, const QModelIndex &parent);
	 bool insertColumns (int column, int count, const QModelIndex &parent);
	 void fetchMore (const QModelIndex &parent);
	 Qt::ItemFlags flags (const QModelIndex &index) const;
	 void sort (int column, Qt::SortOrder order);
	 QModelIndexList match (const QModelIndex &start, int role, const QVariant &value, int hits, Qt::MatchFlags flags) const;
	 QSize span (const QModelIndex &index) const;
	 bool submit ();
	 void revert ();
	
};
$#include <QStylePlugin>

class QStylePlugin : public QObject , public QStyleFactoryInterface {
Q_OBJECT
signals:
public:

	 QStylePlugin (QObject *parent=0);
	 ~QStylePlugin ();
	 virtual QStringList keys () const =0;
	 virtual QStyle * create (const QString &key)=0;

};
$#include <QWindowStateChangeEvent>

class QWindowStateChangeEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QWindowStateChangeEvent (Qt::WindowStates aOldState);
	 ~QWindowStateChangeEvent ();
	 Qt::WindowStates oldState () const;

};
$#include <QStandardItemModel>

class QStandardItemModel : public QAbstractItemModel {
Q_OBJECT
signals:
public:

	 QStandardItemModel (QObject *parent=0);
	 QStandardItemModel (int rows, int columns, QObject *parent=0);
	 ~QStandardItemModel ();
	 QModelIndex index (int row, int column, const QModelIndex &parent=QModelIndex()) const;
	 QModelIndex parent (const QModelIndex &child) const;
	 int rowCount (const QModelIndex &parent=QModelIndex()) const;
	 int columnCount (const QModelIndex &parent=QModelIndex()) const;
	 bool hasChildren (const QModelIndex &parent=QModelIndex()) const;
	 QVariant data (const QModelIndex &index, int role=Qt::DisplayRole) const;
	 bool setData (const QModelIndex &index, const QVariant &value, int role=Qt::EditRole);
	 QVariant headerData (int section, Qt::Orientation orientation, int role=Qt::DisplayRole) const;
	 bool setHeaderData (int section, Qt::Orientation orientation, const QVariant &value, int role=Qt::EditRole);
	 bool insertRows (int row, int count, const QModelIndex &parent=QModelIndex());
	 bool insertColumns (int column, int count, const QModelIndex &parent=QModelIndex());
	 bool removeRows (int row, int count, const QModelIndex &parent=QModelIndex());
	 bool removeColumns (int column, int count, const QModelIndex &parent=QModelIndex());
	 Qt::ItemFlags flags (const QModelIndex &index) const;
	 void clear ();

};
$#include <QShortcutEvent>

class QShortcutEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QShortcutEvent (const QKeySequence &key, int id, bool ambiguous=false);
	 ~QShortcutEvent ();
	 const QKeySequence & key ();
	 int shortcutId ();
	 bool isAmbiguous ();

};
$#include <QShowEvent>

class QShowEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QShowEvent ();
	 ~QShowEvent ();

};
$#include <QAbstractTextDocumentLayout>

class QAbstractTextDocumentLayout : public QObject {
Q_OBJECT
signals:
	 void update (const QRectF &=QRectF(0., 0., 1000000000., 1000000000.));
	 void documentSizeChanged (const QSizeF &newSize);
	 void pageCountChanged (int newPages);
public:
	 struct PaintContext;
	 struct Selection;

	 QAbstractTextDocumentLayout (QTextDocument *doc);
	 ~QAbstractTextDocumentLayout ();
	 virtual void draw (QPainter *painter, const PaintContext &context)=0;
	 virtual int hitTest (const QPointF &point, Qt::HitTestAccuracy accuracy) const =0;
	 QString anchorAt (const QPointF &pos) const;
	 virtual int pageCount () const =0;
	 virtual QSizeF documentSize () const =0;
	 virtual QRectF frameBoundingRect (QTextFrame *frame) const =0;
	 virtual QRectF blockBoundingRect (const QTextBlock &block) const =0;
	 void setPaintDevice (QPaintDevice *device);
	 QPaintDevice * paintDevice () const;
	 QTextDocument * document () const;
	 void registerHandler (int objectType, QObject *component);
	 QTextObjectInterface * handlerForObject (int objectType) const;
		protected  virtual void documentChanged (int from, int charsRemoved, int charsAdded)=0;
	protected  virtual void resizeInlineObject (QTextInlineObject item, int posInDocument, const QTextFormat &format);
	protected  virtual void positionInlineObject (QTextInlineObject item, int posInDocument, const QTextFormat &format);
	protected  virtual void drawInlineObject (QPainter *painter, const QRectF &rect, QTextInlineObject object, int posInDocument, const QTextFormat &format);
		
};
$#include <QStyleOptionProgressBar>

class QStyleOptionProgressBar : public QStyleOption {
Q_OBJECT
signals:
public:
	 enum { Type = SO_ProgressBar };
	 enum { Version = 1 };

	 QStyleOptionProgressBar ();
	 QStyleOptionProgressBar (const QStyleOptionProgressBar &other);
		 int minimum;
	 int maximum;
	 int progress;
	 QString text;
	 Qt::Alignment textAlignment;
	 bool textVisible;

};
$#include <QPixmap>

class QPixmap : public QPaintDevice {
Q_OBJECT
signals:
public:

	 QPixmap ();
	 QPixmap (int w, int h);
	 QPixmap (const QSize &);
	 QPixmap (const QString &fileName, const char *format=0, Qt::ImageConversionFlags flags=Qt::AutoColor);

	 QPixmap (const QPixmap &);
	 ~QPixmap ();
	 QPixmap & operator= (const QPixmap &);
	 operator QVariant () const;
	 bool isNull () const;
	 int devType () const;
	 int width () const;
	 int height () const;
	 QSize size () const;
	 QRect rect () const;
	 int depth () const;
	 void fill (const QColor &fillColor=Qt::white);
	 void fill (const QWidget *widget, const QPoint &ofs);
	 void fill (const QWidget *widget, int xofs, int yofs);
	 QBitmap mask () const;
	 void setMask (const QBitmap &);
	 QPixmap alphaChannel () const;
	 void setAlphaChannel (const QPixmap &);
	 bool hasAlpha () const;
	 bool hasAlphaChannel () const;
	 QBitmap createHeuristicMask (bool clipTight=true) const;
	 QBitmap createMaskFromColor (const QColor &maskColor) const;
	 QPixmap scaled (int w, int h, Qt::AspectRatioMode aspectMode=Qt::IgnoreAspectRatio, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QPixmap scaled (const QSize &s, Qt::AspectRatioMode aspectMode=Qt::IgnoreAspectRatio, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QPixmap scaledToWidth (int w, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QPixmap scaledToHeight (int h, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QPixmap transformed (const QMatrix &, Qt::TransformationMode mode=Qt::FastTransformation) const;
	 QImage toImage () const;
	 bool load (const QString &fileName, const char *format=0, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 bool loadFromData (const uchar *buf, uint len, const char *format=0, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 bool loadFromData (const QByteArray &data, const char *format=0, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 bool save (const QString &fileName, const char *format, int quality=-1) const;
	 bool save (QIODevice *device, const char *format, int quality=-1) const;
	 QPixmap copy (int x, int y, int width, int height) const;
	 QPixmap copy (const QRect &rect=QRect()) const;
	 int serialNumber () const;
	 bool isDetached () const;
	 void detach ();
	 bool isQBitmap () const;
	 Qt::HANDLE handle () const;
	 QPaintEngine * paintEngine () const;
	 bool operator! () const;
		 static int defaultDepth ();
	 static QPixmap grabWindow (WId, int x=0, int y=0, int w=-1, int h=-1);
	 static QPixmap grabWidget (QWidget *widget, const QRect &rect);
	 static QPixmap grabWidget (QWidget *widget, int x=0, int y=0, int w=-1, int h=-1);
	 static QMatrix trueMatrix (const QMatrix &m, int w, int h);
	 static QPixmap fromImage (const QImage &image, Qt::ImageConversionFlags flags=Qt::AutoColor);

};
$#include <QAccessibleEvent>

class QAccessibleEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QAccessibleEvent (Type type, int child);
	 int child () const;
	 QString value () const;
	 void setValue (const QString &aText);

};
$#include <QFileOpenEvent>

class QFileOpenEvent : public QEvent {
Q_OBJECT
signals:
public:

	 QFileOpenEvent (const QString &file);
	 ~QFileOpenEvent ();
	 QString file () const;

};
$#include <QPolygonF>

class QPolygonF : public QVector< QPointF > {
Q_OBJECT
signals:
public:

	 QPolygonF ();
	 ~QPolygonF ();
	 QPolygonF (int size);
	 QPolygonF (const QPolygonF &a);
	 QPolygonF (const QVector< QPointF > &v);
	 QPolygonF (const QRectF &r);
	 QPolygonF (const QPolygon &a);
	 void translate (qreal dx, qreal dy);
	 void translate (const QPointF &offset);
	 QPolygon toPolygon () const;
	 bool isClosed () const;
	 QRectF boundingRect () const;

};
$#include <QPictureFormatPlugin>

class QPictureFormatPlugin : public QObject , public QPictureFormatInterface {
Q_OBJECT
signals:
public:

	 QPictureFormatPlugin (QObject *parent=0);
	 ~QPictureFormatPlugin ();
	 virtual QStringList keys () const =0;
	 virtual bool loadPicture (const QString &format, const QString &filename, QPicture *pic);
	 virtual bool savePicture (const QString &format, const QString &filename, const QPicture &pic);
	 virtual bool installIOHandler (const QString &format)=0;

};
$#include <QTextObject>

class QTextObject : public QObject {
Q_OBJECT
signals:
public:

	 QTextFormat format () const;
	 int formatIndex () const;
	 QTextDocument * document () const;
	 int objectIndex () const;
	 QTextDocumentPrivate * docHandle () const;
				
};
$#include <QStyleOptionTab>

class QStyleOptionTab : public QStyleOption {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags CornerWidgets;
	 enum { Type = SO_Tab };
	 enum { Version = 1 };
	 enum TabPosition { Beginning, Middle, End, OnlyOneTab };
	 enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected };
	 enum CornerWidget { NoCornerWidgets = 0x00, LeftCornerWidget = 0x01, RightCornerWidget = 0x02 };

	 QStyleOptionTab ();
	 QStyleOptionTab (const QStyleOptionTab &other);
		 QTabBar::Shape shape;
	 QString text;
	 QIcon icon;
	 int row;
	 TabPosition position;
	 SelectedPosition selectedPosition;
	 CornerWidgets cornerWidgets;

};
$#include <QFrame>

class QFrame : public QWidget {
Q_OBJECT
signals:
public:
	 enum Shape {         NoFrame = 0, Box = 0x0001, Panel = 0x0002, WinPanel = 0x0003,         HLine = 0x0004, VLine = 0x0005, StyledPanel = 0x0006       };
	 enum Shadow { Plain = 0x0010, Raised = 0x0020, Sunken = 0x0030 };
	 enum { Shadow_Mask = 0x00f0, Shape_Mask = 0x000f };

	 QFrame (QWidget *parent=0, Qt::WFlags f=0);
	 ~QFrame ();
	 int frameStyle () const;
	 void setFrameStyle (int);
	 int frameWidth () const;
	 QSize sizeHint () const;
	 Shape frameShape () const;
	 void setFrameShape (Shape);
	 Shadow frameShadow () const;
	 void setFrameShadow (Shadow);
	 int lineWidth () const;
	 void setLineWidth (int);
	 int midLineWidth () const;
	 void setMidLineWidth (int);
	 QRect frameRect () const;
	 void setFrameRect (const QRect &);
				
};
$#include <QToolBar>

class QToolBar : public QWidget {
Q_OBJECT
signals:
	 void actionTriggered (QAction *action);
	 void movableChanged (bool movable);
	 void allowedAreasChanged (Qt::ToolBarAreas allowedAreas);
	 void orientationChanged (Qt::Orientation orientation);
	 void iconSizeChanged (const QSize &iconSize);
	 void toolButtonStyleChanged (Qt::ToolButtonStyle toolButtonStyle);
public:

	 QToolBar (QWidget *parent=0);
	 ~QToolBar ();
	 void setMovable (bool movable);
	 bool isMovable () const;
	 void setAllowedAreas (Qt::ToolBarAreas areas);
	 Qt::ToolBarAreas allowedAreas () const;
	 bool isAreaAllowed (Qt::ToolBarArea area) const;
	 void setOrientation (Qt::Orientation orientation);
	 Qt::Orientation orientation () const;
	 void clear ();
	 QAction * addAction (const QString &text);
	 QAction * addAction (const QIcon &icon, const QString &text);
	 QAction * addAction (const QString &text, const QObject *receiver, const char *member);
	 QAction * addAction (const QIcon &icon, const QString &text, const QObject *receiver, const char *member);
	 QAction * addSeparator ();
	 QAction * insertSeparator (QAction *before);
	 QAction * addWidget (QWidget *widget);
	 QAction * insertWidget (QAction *before, QWidget *widget);
	 QRect actionGeometry (QAction *action) const;
	 QAction * actionAt (const QPoint &p) const;
	 QAction * actionAt (int x, int y) const;
	 QAction * toggleViewAction () const;
	 QSize iconSize () const;
	 Qt::ToolButtonStyle toolButtonStyle () const;
	 void setIconSize (const QSize &iconSize);
	 void setToolButtonStyle (Qt::ToolButtonStyle toolButtonStyle);
						
};
$#include <QTabBar>

class QTabBar : public QWidget {
Q_OBJECT
signals:
	 void currentChanged (int index);
public:
	 enum Shape {         RoundedNorth, RoundedSouth, RoundedWest, RoundedEast,         TriangularNorth, TriangularSouth, TriangularWest, TriangularEast       };

	 QTabBar (QWidget *parent=0);
	 ~QTabBar ();
	 Shape shape () const;
	 void setShape (Shape shape);
	 int addTab (const QString &text);
	 int addTab (const QIcon &icon, const QString &text);
	 int insertTab (int index, const QString &text);
	 int insertTab (int index, const QIcon &icon, const QString &text);
	 void removeTab (int index);
	 bool isTabEnabled (int index) const;
	 void setTabEnabled (int index, bool);
	 QString tabText (int index) const;
	 void setTabText (int index, const QString &text);
	 QIcon tabIcon (int index) const;
	 void setTabIcon (int index, const QIcon &icon);
	 void setTabToolTip (int index, const QString &tip);
	 QString tabToolTip (int index) const;
	 void setTabData (int index, const QVariant &data);
	 QVariant tabData (int index) const;
	 QRect tabRect (int index) const;
	 int currentIndex () const;
	 int count () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setDrawBase (bool drawTheBase);
	 bool drawBase () const;
	 void setCurrentIndex (int index);
	protected  virtual QSize tabSizeHint (int index) const;
	protected  virtual void tabInserted (int index);
	protected  virtual void tabRemoved (int index);
	protected  virtual void tabLayoutChange ();
									
};
$#include <QStyleOptionSpinBox>

class QStyleOptionSpinBox : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 enum { Type = SO_SpinBox };
	 enum { Version = 1 };

	 QStyleOptionSpinBox ();
	 QStyleOptionSpinBox (const QStyleOptionSpinBox &other);
		 QAbstractSpinBox::ButtonSymbols buttonSymbols;
	 bool frame;

};
$#include <QMenu>

class QMenu : public QWidget {
Q_OBJECT
signals:
	 void aboutToShow ();
	 void triggered (QAction *action);
	 void hovered (QAction *action);
public:

	 QMenu (QWidget *parent=0);
	 QMenu (const QString &title, QWidget *parent=0);
	 ~QMenu ();
	 QAction * addAction (const QString &text);
	 QAction * addAction (const QIcon &icon, const QString &text);
	 QAction * addAction (const QString &text, const QObject *receiver, const char *member, const QKeySequence &shortcut=0);
	 QAction * addAction (const QIcon &icon, const QString &text, const QObject *receiver, const char *member, const QKeySequence &shortcut=0);
	 QAction * addMenu (QMenu *menu);
	 QMenu * addMenu (const QString &title);
	 QMenu * addMenu (const QIcon &icon, const QString &title);
	 QAction * addSeparator ();
	 QAction * insertMenu (QAction *before, QMenu *menu);
	 QAction * insertSeparator (QAction *before);
	 void clear ();
	 void setTearOffEnabled (bool);
	 bool isTearOffEnabled () const;
	 bool isTearOffMenuVisible () const;
	 void hideTearOffMenu ();
	 void setDefaultAction (QAction *);
	 QAction * defaultAction () const;
	 void setActiveAction (QAction *act);
	 QAction * activeAction () const;
	 void popup (const QPoint &pos, QAction *at=0);
	 QAction * exec ();
	 QAction * exec (const QPoint &pos, QAction *at=0);
	 QSize sizeHint () const;
	 QRect actionGeometry (QAction *) const;
	 QAction * actionAt (const QPoint &) const;
	 QAction * menuAction () const;
	 QString title () const;
	 void setTitle (const QString &title);
	 QIcon icon () const;
	 void setIcon (const QIcon &icon);
	 void setNoReplayFor (QWidget *widget);
															 static QAction * exec (QList< QAction * > actions, const QPoint &pos, QAction *at=0);

};
$#include <QDragMoveEvent>

class QDragMoveEvent : public QDropEvent {
Q_OBJECT
signals:
public:

	 QDragMoveEvent (const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type=DragMove);
	 ~QDragMoveEvent ();
	 QRect answerRect () const;
	 void accept ();
	 void ignore ();
	 void accept (const QRect &r);
	 void ignore (const QRect &r);

};
$#include <QMouseEvent>

class QMouseEvent : public QInputEvent {
Q_OBJECT
signals:
public:

	 QMouseEvent (Type type, const QPoint &pos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
	 QMouseEvent (Type type, const QPoint &pos, const QPoint &globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
	 ~QMouseEvent ();
	 const QPoint & pos () const;
	 const QPoint & globalPos () const;
	 int x () const;
	 int y () const;
	 int globalX () const;
	 int globalY () const;
	 Qt::MouseButton button () const;
	 Qt::MouseButtons buttons () const;

};
$#include <QBoxLayout>

class QBoxLayout : public QLayout {
Q_OBJECT
signals:
public:
	 enum Direction {         LeftToRight, RightToLeft, TopToBottom, BottomToTop,         Down = TopToBottom, Up = BottomToTop       };

	 QBoxLayout (Direction, QWidget *parent=0);
	 ~QBoxLayout ();
	 Direction direction () const;
	 void setDirection (Direction);
	 void addSpacing (int size);
	 void addStretch (int stretch=0);
	 void addWidget (QWidget *, int stretch=0, Qt::Alignment alignment=0);
	 void addLayout (QLayout *layout, int stretch=0);
	 void addStrut (int);
	 void addItem (QLayoutItem *);
	 void insertSpacing (int index, int size);
	 void insertStretch (int index, int stretch=0);
	 void insertWidget (int index, QWidget *widget, int stretch=0, Qt::Alignment alignment=0);
	 void insertLayout (int index, QLayout *layout, int stretch=0);
	 bool setStretchFactor (QWidget *w, int stretch);
	 bool setStretchFactor (QLayout *l, int stretch);
	 QSize sizeHint () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 bool hasHeightForWidth () const;
	 int heightForWidth (int) const;
	 int minimumHeightForWidth (int) const;
	 Qt::Orientations expandingDirections () const;
	 void invalidate ();
	 QLayoutItem * itemAt (int) const;
	 QLayoutItem * takeAt (int);
	 int count () const;
	 void setGeometry (const QRect &);
	
};
$#include <QProgressBar>

class QProgressBar : public QWidget {
Q_OBJECT
signals:
	 void valueChanged (int value);
public:

	 QProgressBar (QWidget *parent=0);
	 int minimum () const;
	 int maximum () const;
	 void setRange (int minimum, int maximum);
	 int value () const;
	 virtual QString text () const;
	 void setTextVisible (bool visible);
	 bool isTextVisible () const;
	 Qt::Alignment alignment () const;
	 void setAlignment (Qt::Alignment alignment);
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void reset ();
	 void setMinimum (int minimum);
	 void setMaximum (int maximum);
	 void setValue (int value);
	
};
$#include <QComboBox>

class QComboBox : public QWidget {
Q_OBJECT
signals:
	 void editTextChanged (const QString &);
	 void activated (int index);
	 void activated (const QString &);
	 void highlighted (int index);
	 void highlighted (const QString &);
public:
	 enum InsertPolicy {         NoInsert, InsertAtTop, InsertAtCurrent, InsertAtBottom,         InsertAfterCurrent, InsertBeforeCurrent       };
	 enum SizeAdjustPolicy { AdjustToContents, AdjustToContentsOnFirstShow, AdjustToMinimumContentsLength };

	 QComboBox (QWidget *parent=0);
	 ~QComboBox ();
	 int maxVisibleItems () const;
	 void setMaxVisibleItems (int maxItems);
	 int count () const;
	 void setMaxCount (int max);
	 int maxCount () const;
	 bool autoCompletion () const;
	 void setAutoCompletion (bool enable);
	 bool duplicatesEnabled () const;
	 void setDuplicatesEnabled (bool enable);
	 void setFrame (bool);
	 bool hasFrame () const;
	 int findText (const QString &text, Qt::MatchFlags flags=Qt::MatchExactly|Qt::MatchCaseSensitive) const;
	 int findData (const QVariant &data, int role=Qt::UserRole, Qt::MatchFlags flags=Qt::MatchExactly|Qt::MatchCaseSensitive) const;
	 InsertPolicy insertPolicy () const;
	 void setInsertPolicy (InsertPolicy policy);
	 SizeAdjustPolicy sizeAdjustPolicy () const;
	 void setSizeAdjustPolicy (SizeAdjustPolicy policy);
	 int minimumContentsLength () const;
	 void setMinimumContentsLength (int characters);
	 QSize iconSize () const;
	 void setIconSize (const QSize &size);
	 bool isEditable () const;
	 void setEditable (bool editable);
	 void setLineEdit (QLineEdit *edit);
	 QLineEdit * lineEdit () const;
	 void setValidator (const QValidator *v);
	 const QValidator * validator () const;
	 QAbstractItemDelegate * itemDelegate () const;
	 void setItemDelegate (QAbstractItemDelegate *delegate);
	 QAbstractItemModel * model () const;
	 void setModel (QAbstractItemModel *model);
	 QModelIndex rootModelIndex () const;
	 void setRootModelIndex (const QModelIndex &index);
	 int modelColumn () const;
	 void setModelColumn (int visibleColumn);
	 int currentIndex () const;
	 void setCurrentIndex (int index);
	 QString currentText () const;
	 QString itemText (int index) const;
	 QIcon itemIcon (int index) const;
	 QVariant itemData (int index, int role=Qt::UserRole) const;
	 void addItem (const QString &text, const QVariant &userData=QVariant());
	 void addItem (const QIcon &icon, const QString &text, const QVariant &userData=QVariant());
	 void addItems (const QStringList &texts);
	 void insertItem (int index, const QString &text, const QVariant &userData=QVariant());
	 void insertItem (int index, const QIcon &icon, const QString &text, const QVariant &userData=QVariant());
	 void insertItems (int index, const QStringList &texts);
	 void removeItem (int index);
	 void setItemText (int index, const QString &text);
	 void setItemIcon (int index, const QIcon &icon);
	 void setItemData (int index, const QVariant &value, int role=Qt::UserRole);
	 QAbstractItemView * view () const;
	 void setView (QAbstractItemView *itemView);
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 virtual void showPopup ();
	 virtual void hidePopup ();
	 bool event (QEvent *event);
	 void clear ();
	 void clearEditText ();
	 void setEditText (const QString &text);
														
};
$#include <QTextTableFormat>

class QTextTableFormat : public QTextFrameFormat {
Q_OBJECT
signals:
public:

	 QTextTableFormat ();
	 bool isValid () const;
	 int columns () const;
	 void setColumns (int columns);
	 void setColumnWidthConstraints (const QVector< QTextLength > &constraints);
	 QVector< QTextLength > columnWidthConstraints () const;
	 void clearColumnWidthConstraints ();
	 qreal cellSpacing () const;
	 void setCellSpacing (qreal spacing);
	 qreal cellPadding () const;
	 void setCellPadding (qreal padding);
	 void setAlignment (Qt::Alignment alignment);
	 Qt::Alignment alignment () const;

};
$#include <QStyleOptionToolButton>

class QStyleOptionToolButton : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags ToolButtonFeatures;
	 enum { Type = SO_ToolButton };
	 enum { Version = 1 };
	 enum ToolButtonFeature { None = 0x00, Arrow = 0x01, Menu = 0x04, PopupDelay = 0x08 };

	 QStyleOptionToolButton ();
	 QStyleOptionToolButton (const QStyleOptionToolButton &other);
		 ToolButtonFeatures features;
	 QIcon icon;
	 QSize iconSize;
	 QString text;
	 Qt::ArrowType arrowType;
	 Qt::ToolButtonStyle toolButtonStyle;
	 QPoint pos;
	 QFont font;

};
$#include <QCommonStyle>

class QCommonStyle : public QStyle {
Q_OBJECT
signals:
public:

	 QCommonStyle ();
	 ~QCommonStyle ();
	 void drawPrimitive (PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 void drawControl (ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 QRect subElementRect (SubElement r, const QStyleOption *opt, const QWidget *widget=0) const;
	 void drawComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *w=0) const;
	 SubControl hitTestComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, const QPoint &pt, const QWidget *w=0) const;
	 QRect subControlRect (ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *w=0) const;
	 QSize sizeFromContents (ContentsType ct, const QStyleOption *opt, const QSize &contentsSize, const QWidget *widget=0) const;
	 int pixelMetric (PixelMetric m, const QStyleOption *opt=0, const QWidget *widget=0) const;
	 int styleHint (StyleHint sh, const QStyleOption *opt=0, const QWidget *w=0, QStyleHintReturn *shret=0) const;
	 QPixmap standardPixmap (StandardPixmap sp, const QStyleOption *opt=0, const QWidget *widget=0) const;
	 QPixmap generatedIconPixmap (QIcon::Mode iconMode, const QPixmap &pixmap, const QStyleOption *opt) const;

};
$#include <QMenuBar>

class QMenuBar : public QWidget {
Q_OBJECT
signals:
	 void triggered (QAction *action);
	 void hovered (QAction *action);
public:

	 QMenuBar (QWidget *parent=0);
	 ~QMenuBar ();
	 QAction * addAction (const QString &text);
	 QAction * addAction (const QString &text, const QObject *receiver, const char *member);
	 QAction * addMenu (QMenu *menu);
	 QMenu * addMenu (const QString &title);
	 QMenu * addMenu (const QIcon &icon, const QString &title);
	 QAction * addSeparator ();
	 QAction * insertMenu (QAction *before, QMenu *menu);
	 void clear ();
	 QAction * activeAction () const;
	 void setDefaultUp (bool);
	 bool isDefaultUp () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 int heightForWidth (int) const;
	 QRect actionGeometry (QAction *) const;
	 QAction * actionAt (const QPoint &) const;
	 void setCornerWidget (QWidget *w, Qt::Corner corner=Qt::TopRightCorner);
	 QWidget * cornerWidget (Qt::Corner corner=Qt::TopRightCorner) const;
													
};
$#include <QStatusBar>

class QStatusBar : public QWidget {
Q_OBJECT
signals:
	 void messageChanged (const QString &text);
public:

	 QStatusBar (QWidget *parent=0);
	 virtual ~QStatusBar ();
	 void addWidget (QWidget *widget, int stretch=0);
	 void addPermanentWidget (QWidget *widget, int stretch=0);
	 void removeWidget (QWidget *widget);
	 void setSizeGripEnabled (bool);
	 bool isSizeGripEnabled () const;
	 QString currentMessage () const;
	 void showMessage (const QString &text, int timeout=0);
	 void clearMessage ();
					
};
$#include <QRegExpValidator>

class QRegExpValidator : public QValidator {
Q_OBJECT
signals:
public:

	 QRegExpValidator (QObject *parent);
	 QRegExpValidator (const QRegExp &rx, QObject *parent);
	 ~QRegExpValidator ();
	 virtual QValidator::State validate (QString &input, int &pos) const;
	 void setRegExp (const QRegExp &rx);
	 const QRegExp & regExp () const;

};
$#include <QSplitterHandle>

class QSplitterHandle : public QWidget {
Q_OBJECT
signals:
public:

	 QSplitterHandle (Qt::Orientation o, QSplitter *parent);
	 void setOrientation (Qt::Orientation o);
	 Qt::Orientation orientation () const;
	 bool opaqueResize () const;
	 QSplitter * splitter () const;
	 QSize sizeHint () const;
							
};
$#include <QStyleOptionSlider>

class QStyleOptionSlider : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Slider };
	 enum { Version = 1 };

	 QStyleOptionSlider ();
	 QStyleOptionSlider (const QStyleOptionSlider &other);
		 Qt::Orientation orientation;
	 int minimum;
	 int maximum;
	 QSlider::TickPosition tickPosition;
	 int tickInterval;
	 bool upsideDown;
	 int sliderPosition;
	 int sliderValue;
	 int singleStep;
	 int pageStep;
	 qreal notchTarget;
	 bool dialWrapping;

};
$#include <QStyleOptionComboBox>

class QStyleOptionComboBox : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 enum { Type = SO_ComboBox };
	 enum { Version = 1 };

	 QStyleOptionComboBox ();
	 QStyleOptionComboBox (const QStyleOptionComboBox &other);
		 bool editable;
	 QRect popupRect;
	 bool frame;
	 QString currentText;
	 QIcon currentIcon;
	 QSize iconSize;

};
$#include <QGroupBox>

class QGroupBox : public QWidget {
Q_OBJECT
signals:
	 void toggled (bool);
public:

	 QGroupBox (QWidget *parent=0);
	 QGroupBox (const QString &title, QWidget *parent=0);
	 ~QGroupBox ();
	 QString title () const;
	 void setTitle (const QString &);
	 Qt::Alignment alignment () const;
	 void setAlignment (int);
	 QSize minimumSizeHint () const;
	 bool isFlat () const;
	 void setFlat (bool b);
	 bool isCheckable () const;
	 void setCheckable (bool b);
	 bool isChecked () const;
	 void setChecked (bool b);
						
};
$#include <QIntValidator>

class QIntValidator : public QValidator {
Q_OBJECT
signals:
public:

	 QIntValidator (QObject *parent);
	 QIntValidator (int bottom, int top, QObject *parent);
	 ~QIntValidator ();
	 QValidator::State validate (QString &, int &) const;
	 void setBottom (int);
	 void setTop (int);
	 virtual void setRange (int bottom, int top);
	 int bottom () const;
	 int top () const;

};
$#include <QStyleOptionQ3ListView>

class QStyleOptionQ3ListView : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 enum { Type = SO_Q3ListView };
	 enum { Version = 1 };

	 QStyleOptionQ3ListView ();
	 QStyleOptionQ3ListView (const QStyleOptionQ3ListView &other);
		 QList< QStyleOptionQ3ListViewItem > items;
	 QPalette viewportPalette;
	 QPalette::ColorRole viewportBGRole;
	 int sortColumn;
	 int itemMargin;
	 int treeStepSize;
	 bool rootIsDecorated;

};
$#include <QTabletEvent>

class QTabletEvent : public QInputEvent {
Q_OBJECT
signals:
public:
	 enum TabletDevice {         NoDevice, Puck, Stylus, Airbrush,         FourDMouse, XFreeEraser       };
	 enum PointerType { UnknownPointer, Pen, Cursor, Eraser };

	 QTabletEvent (Type t, const QPoint &pos, const QPoint &globalPos, const QPointF &hiResGlobalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID);
	 ~QTabletEvent ();
	 const QPoint & pos () const;
	 const QPoint & globalPos () const;
	 const QPointF & hiResGlobalPos () const;
	 int x () const;
	 int y () const;
	 int globalX () const;
	 int globalY () const;
	 qreal hiResGlobalX () const;
	 qreal hiResGlobalY () const;
	 TabletDevice device () const;
	 PointerType pointerType () const;
	 qint64 uniqueId () const;
	 qreal pressure () const;
	 int z () const;
	 qreal tangentialPressure () const;
	 qreal rotation () const;
	 int xTilt () const;
	 int yTilt () const;

};
$#include <QContextMenuEvent>

class QContextMenuEvent : public QInputEvent {
Q_OBJECT
signals:
public:
	 enum Reason { Mouse, Keyboard, Other };

	 QContextMenuEvent (Reason reason, const QPoint &pos, const QPoint &globalPos);
	 QContextMenuEvent (Reason reason, const QPoint &pos);
	 ~QContextMenuEvent ();
	 int x () const;
	 int y () const;
	 int globalX () const;
	 int globalY () const;
	 const QPoint & pos () const;
	 const QPoint & globalPos () const;
	 Reason reason () const;

};
$#include <QBitmap>

class QBitmap : public QPixmap {
Q_OBJECT
signals:
public:

	 QBitmap ();
	 QBitmap (const QPixmap &);
	 QBitmap (int w, int h);
	 QBitmap (const QSize &);
	 QBitmap (const QString &fileName, const char *format=0);
	 ~QBitmap ();
	 QBitmap & operator= (const QPixmap &);
	 operator QVariant () const;
	 void clear ();
	 QBitmap transformed (const QMatrix &) const;
	 static QBitmap fromImage (const QImage &image, Qt::ImageConversionFlags flags=Qt::AutoColor);
	 static QBitmap fromData (const QSize &size, const uchar *bits, QImage::Format monoFormat=QImage::Format_MonoLSB);

};
$#include <QTabWidget>

class QTabWidget : public QWidget {
Q_OBJECT
signals:
	 void currentChanged (int index);
public:
	 enum TabPosition { North, South, West, East };
	 enum TabShape { Rounded, Triangular };

	 QTabWidget (QWidget *parent=0);
	 ~QTabWidget ();
	 int addTab (QWidget *widget, const QString &);
	 int addTab (QWidget *widget, const QIcon &icon, const QString &label);
	 int insertTab (int index, QWidget *widget, const QString &);
	 int insertTab (int index, QWidget *widget, const QIcon &icon, const QString &label);
	 void removeTab (int index);
	 bool isTabEnabled (int index) const;
	 void setTabEnabled (int index, bool);
	 QString tabText (int index) const;
	 void setTabText (int index, const QString &);
	 QIcon tabIcon (int index) const;
	 void setTabIcon (int index, const QIcon &icon);
	 void setTabToolTip (int index, const QString &tip);
	 QString tabToolTip (int index) const;
	 int currentIndex () const;
	 QWidget * currentWidget () const;
	 QWidget * widget (int index) const;
	 int indexOf (QWidget *widget) const;
	 int count () const;
	 TabPosition tabPosition () const;
	 void setTabPosition (TabPosition);
	 TabShape tabShape () const;
	 void setTabShape (TabShape s);
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setCornerWidget (QWidget *w, Qt::Corner corner=Qt::TopRightCorner);
	 QWidget * cornerWidget (Qt::Corner corner=Qt::TopRightCorner) const;
	 void setCurrentIndex (int index);
	 void setCurrentWidget (QWidget *widget);
	protected  virtual void tabInserted (int index);
	protected  virtual void tabRemoved (int index);
							
};
$#include <QAccessibleObject>

class QAccessibleObject : public QAccessibleInterface {
Q_OBJECT
signals:
public:

	 bool isValid () const;
	 QObject * object () const;
	 QRect rect (int child) const;
	 void setText (Text t, int child, const QString &text);
	 int userActionCount (int child) const;
	 bool doAction (int action, int child, const QVariantList &params);
	 QString actionText (int action, Text t, int child) const;

};
$#include <QTextFrame>

class QTextFrame : public QTextObject {
Q_OBJECT
signals:
public:
	 typedef iterator Iterator;
	 class iterator;

	 QTextFrame (QTextDocument *doc);
	 ~QTextFrame ();
	 void setFrameFormat (const QTextFrameFormat &format);
	 QTextFrameFormat frameFormat () const;
	 QTextCursor firstCursorPosition () const;
	 QTextCursor lastCursorPosition () const;
	 int firstPosition () const;
	 int lastPosition () const;
	 QTextFrameLayoutData * layoutData () const;
	 void setLayoutData (QTextFrameLayoutData *data);
	 QList< QTextFrame * > childFrames () const;
	 QTextFrame * parentFrame () const;
	 iterator begin () const;
	 iterator end () const;
	
};
$#include <QWheelEvent>

class QWheelEvent : public QInputEvent {
Q_OBJECT
signals:
public:

	 QWheelEvent (const QPoint &pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient=Qt::Vertical);
	 QWheelEvent (const QPoint &pos, const QPoint &globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient=Qt::Vertical);
	 ~QWheelEvent ();
	 int delta () const;
	 const QPoint & pos () const;
	 const QPoint & globalPos () const;
	 int x () const;
	 int y () const;
	 int globalX () const;
	 int globalY () const;
	 Qt::MouseButtons buttons () const;
	 Qt::Orientation orientation () const;

};
$#include <QSplashScreen>

class QSplashScreen : public QWidget {
Q_OBJECT
signals:
	 void messageChanged (const QString &message);
public:

	 QSplashScreen (const QPixmap &pixmap=QPixmap(), Qt::WFlags f=0);
	 QSplashScreen (QWidget *parent, const QPixmap &pixmap=QPixmap(), Qt::WFlags f=0);
	 virtual ~QSplashScreen ();
	 void setPixmap (const QPixmap &pixmap);
	 const QPixmap pixmap () const;
	 void finish (QWidget *w);
	 void repaint ();
	 void showMessage (const QString &message, int alignment=Qt::AlignLeft, const QColor &color=Qt::black);
	 void clearMessage ();
	protected  virtual void drawContents (QPainter *painter);
	
};
$#include <QStyleOptionTitleBar>

class QStyleOptionTitleBar : public QStyleOptionComplex {
Q_OBJECT
signals:
public:
	 enum { Type = SO_TitleBar };
	 enum { Version = 1 };

	 QStyleOptionTitleBar ();
	 QStyleOptionTitleBar (const QStyleOptionTitleBar &other);
		 QString text;
	 QIcon icon;
	 int titleBarState;
	 Qt::WFlags titleBarFlags;

};
$#include <QGridLayout>

class QGridLayout : public QLayout {
Q_OBJECT
signals:
public:

	 QGridLayout (QWidget *parent);
	 QGridLayout ();
	 ~QGridLayout ();
	 QSize sizeHint () const;
	 QSize minimumSize () const;
	 QSize maximumSize () const;
	 void setRowStretch (int row, int stretch);
	 void setColumnStretch (int column, int stretch);
	 int rowStretch (int row) const;
	 int columnStretch (int column) const;
	 void setRowMinimumHeight (int row, int minSize);
	 void setColumnMinimumWidth (int column, int minSize);
	 int rowMinimumHeight (int row) const;
	 int columnMinimumWidth (int column) const;
	 int columnCount () const;
	 int rowCount () const;
	 QRect cellRect (int row, int column) const;
	 bool hasHeightForWidth () const;
	 int heightForWidth (int) const;
	 int minimumHeightForWidth (int) const;
	 Qt::Orientations expandingDirections () const;
	 void invalidate ();
	 void addWidget (QWidget *w);
	 void addWidget (QWidget *, int row, int column, Qt::Alignment=0);
	 void addWidget (QWidget *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment=0);
	 void addLayout (QLayout *, int row, int column, Qt::Alignment=0);
	 void addLayout (QLayout *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment=0);
	 void setOriginCorner (Qt::Corner);
	 Qt::Corner originCorner () const;
	 QLayoutItem * itemAt (int) const;
	 QLayoutItem * takeAt (int);
	 int count () const;
	 void setGeometry (const QRect &);
	 void addItem (QLayoutItem *item, int row, int column, int rowSpan=1, int columnSpan=1, Qt::Alignment=0);
	 void setDefaultPositioning (int n, Qt::Orientation orient);
	 void getItemPosition (int idx, int *row, int *column, int *rowSpan, int *columnSpan);
	
};
$#include <QDockWidget>

class QDockWidget : public QWidget {
Q_OBJECT
signals:
	 void featuresChanged (QDockWidget::DockWidgetFeatures features);
	 void topLevelChanged (bool topLevel);
	 void allowedAreasChanged (Qt::DockWidgetAreas allowedAreas);
public:
	 typedef LuaQtGenericFlags DockWidgetFeatures;
	 enum DockWidgetFeature {         DockWidgetClosable = 0x01, DockWidgetMovable = 0x02, DockWidgetFloatable = 0x04, DockWidgetFeatureMask = 0x07,         AllDockWidgetFeatures = DockWidgetFeatureMask, NoDockWidgetFeatures = 0x00, Reserved = 0xff       };

	 QDockWidget (const QString &title, QWidget *parent=0, Qt::WFlags flags=0);
	 QDockWidget (QWidget *parent=0, Qt::WFlags flags=0);
	 ~QDockWidget ();
	 QWidget * widget () const;
	 void setWidget (QWidget *widget);
	 void setFeatures (DockWidgetFeatures features);
	 DockWidgetFeatures features () const;
	 void setFloating (bool floating);
	 bool isFloating () const;
	 void setAllowedAreas (Qt::DockWidgetAreas areas);
	 Qt::DockWidgetAreas allowedAreas () const;
	 bool isAreaAllowed (Qt::DockWidgetArea area) const;
	 QAction * toggleViewAction () const;
				
};
$#include <QTextImageFormat>

class QTextImageFormat : public QTextCharFormat {
Q_OBJECT
signals:
public:

	 QTextImageFormat ();
	 bool isValid () const;
	 void setName (const QString &name);
	 QString name () const;
	 void setWidth (qreal width);
	 qreal width () const;
	 void setHeight (qreal height);
	 qreal height () const;

};
$#include <QLineEdit>

class QLineEdit : public QWidget {
Q_OBJECT
signals:
	 void textChanged (const QString &);
	 void textEdited (const QString &);
	 void cursorPositionChanged (int, int);
	 void returnPressed ();
	 void editingFinished ();
	 void selectionChanged ();
public:
	 enum EchoMode { Normal, NoEcho, Password };

	 QLineEdit (QWidget *parent=0);
	 QLineEdit (const QString &, QWidget *parent=0);
	 ~QLineEdit ();
	 QString text () const;
	 QString displayText () const;
	 int maxLength () const;
	 void setMaxLength (int);
	 void setFrame (bool);
	 bool hasFrame () const;
	 EchoMode echoMode () const;
	 void setEchoMode (EchoMode);
	 bool isReadOnly () const;
	 void setReadOnly (bool);
	 void setValidator (const QValidator *);
	 const QValidator * validator () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 int cursorPosition () const;
	 void setCursorPosition (int);
	 int cursorPositionAt (const QPoint &pos);
	 void setAlignment (Qt::Alignment flag);
	 Qt::Alignment alignment () const;
	 void cursorForward (bool mark, int steps=1);
	 void cursorBackward (bool mark, int steps=1);
	 void cursorWordForward (bool mark);
	 void cursorWordBackward (bool mark);
	 void backspace ();
	 void del ();
	 void home (bool mark);
	 void end (bool mark);
	 bool isModified () const;
	 void setModified (bool);
	 void setSelection (int, int);
	 bool hasSelectedText () const;
	 QString selectedText () const;
	 int selectionStart () const;
	 bool isUndoAvailable () const;
	 bool isRedoAvailable () const;
	 void setDragEnabled (bool b);
	 bool dragEnabled () const;
	 QString inputMask () const;
	 void setInputMask (const QString &inputMask);
	 bool hasAcceptableInput () const;
	 void deselect ();
	 void insert (const QString &);
	 QMenu * createStandardContextMenu ();
	 QVariant inputMethodQuery (Qt::InputMethodQuery) const;
	 bool event (QEvent *);
	 void setText (const QString &);
	 void clear ();
	 void selectAll ();
	 void undo ();
	 void redo ();
	 void cut ();
	 void copy () const;
	 void paste ();
															
};
$#include <QKeyEvent>

class QKeyEvent : public QInputEvent {
Q_OBJECT
signals:
public:

	 QKeyEvent (Type type, int key, Qt::KeyboardModifiers modifiers, const QString &text=QString(), bool autorep=false, ushort count=1);
	 ~QKeyEvent ();
	 int key () const;
	 Qt::KeyboardModifiers modifiers () const;
	 QString text () const;
	 bool isAutoRepeat () const;
	 int count () const;

};
$#include <QFocusFrame>

class QFocusFrame : public QWidget {
Q_OBJECT
signals:
public:

	 QFocusFrame (QWidget *parent=0);
	 ~QFocusFrame ();
	 void setWidget (QWidget *widget);
	 QWidget * widget () const;
		
};
$#include <QDesktopWidget>

class QDesktopWidget : public QWidget {
Q_OBJECT
signals:
	 void resized (int);
	 void workAreaResized (int);
public:

	 QDesktopWidget ();
	 ~QDesktopWidget ();
	 bool isVirtualDesktop () const;
	 int numScreens () const;
	 int primaryScreen () const;
	 int screenNumber (const QWidget *widget=0) const;
	 int screenNumber (const QPoint &) const;
	 QWidget * screen (int screen=-1);
	 const QRect screenGeometry (int screen=-1) const;
	 const QRect screenGeometry (const QWidget *widget) const;
	 const QRect screenGeometry (const QPoint &point) const;
	 const QRect availableGeometry (int screen=-1) const;
	 const QRect availableGeometry (const QWidget *widget) const;
	 const QRect availableGeometry (const QPoint &point) const;
	
};
$#include <QAbstractSlider>

class QAbstractSlider : public QWidget {
Q_OBJECT
signals:
	 void valueChanged (int value);
	 void sliderPressed ();
	 void sliderMoved (int position);
	 void sliderReleased ();
	 void rangeChanged (int min, int max);
	 void actionTriggered (int action);
public:
	 enum SliderAction {         SliderNoAction, SliderSingleStepAdd, SliderSingleStepSub, SliderPageStepAdd,         SliderPageStepSub, SliderToMinimum, SliderToMaximum, SliderMove       };

	 QAbstractSlider (QWidget *parent=0);
	 ~QAbstractSlider ();
	 Qt::Orientation orientation () const;
	 void setMinimum (int);
	 int minimum () const;
	 void setMaximum (int);
	 int maximum () const;
	 void setRange (int min, int max);
	 void setSingleStep (int);
	 int singleStep () const;
	 void setPageStep (int);
	 int pageStep () const;
	 void setTracking (bool enable);
	 bool hasTracking () const;
	 void setSliderDown (bool);
	 bool isSliderDown () const;
	 void setSliderPosition (int);
	 int sliderPosition () const;
	 void setInvertedAppearance (bool);
	 bool invertedAppearance () const;
	 void setInvertedControls (bool);
	 bool invertedControls () const;
	 int value () const;
	 void triggerAction (SliderAction action);
	 void setValue (int);
	 void setOrientation (Qt::Orientation);
							
};
$#include <QAbstractSpinBox>

class QAbstractSpinBox : public QWidget {
Q_OBJECT
signals:
	 void editingFinished ();
public:
	 typedef LuaQtGenericFlags StepEnabled;
	 enum StepEnabledFlag { StepNone = 0x00, StepUpEnabled = 0x01, StepDownEnabled = 0x02 };
	 enum ButtonSymbols { UpDownArrows, PlusMinus };

	 QAbstractSpinBox (QWidget *parent=0);
	 ~QAbstractSpinBox ();
	 ButtonSymbols buttonSymbols () const;
	 void setButtonSymbols (ButtonSymbols bs);
	 QString text () const;
	 QString specialValueText () const;
	 void setSpecialValueText (const QString &s);
	 bool wrapping () const;
	 void setWrapping (bool w);
	 void setReadOnly (bool r);
	 bool isReadOnly () const;
	 void setAlignment (Qt::Alignment flag);
	 Qt::Alignment alignment () const;
	 void setFrame (bool);
	 bool hasFrame () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void interpretText ();
	 bool event (QEvent *event);
	 virtual QValidator::State validate (QString &input, int &pos) const;
	 virtual void fixup (QString &input) const;
	 virtual void stepBy (int steps);
	 void stepUp ();
	 void stepDown ();
	 void selectAll ();
	 virtual void clear ();
																			
};
$#include <QWorkspace>

class QWorkspace : public QWidget {
Q_OBJECT
signals:
	 void windowActivated (QWidget *w);
public:
	 enum WindowOrder { CreationOrder, StackingOrder };

	 QWorkspace (QWidget *parent=0);
	 ~QWorkspace ();
	 QWidget * activeWindow () const;
	 QWidgetList windowList (WindowOrder order=CreationOrder) const;
	 QWidget * addWindow (QWidget *w, Qt::WFlags flags=0);
	 QSize sizeHint () const;
	 bool scrollBarsEnabled () const;
	 void setScrollBarsEnabled (bool enable);
	 void setBackground (const QBrush &background);
	 QBrush background () const;
	 void setActiveWindow (QWidget *w);
	 void cascade ();
	 void tile ();
	 void closeActiveWindow ();
	 void closeAllWindows ();
	 void activateNextWindow ();
	 void activatePreviousWindow ();
								
};
$#include <QStackedLayout>

class QStackedLayout : public QLayout {
Q_OBJECT
signals:
	 void widgetRemoved (int index);
	 void currentChanged (int index);
public:

	 QStackedLayout ();
	 QStackedLayout (QWidget *parent);
	 QStackedLayout (QLayout *parentLayout);
	 ~QStackedLayout ();
	 int addWidget (QWidget *w);
	 int insertWidget (int index, QWidget *w);
	 QWidget * currentWidget () const;
	 int currentIndex () const;
	 QWidget * widget (int) const;
	 int count () const;
	 void addItem (QLayoutItem *item);
	 QSize sizeHint () const;
	 QSize minimumSize () const;
	 QLayoutItem * itemAt (int) const;
	 QLayoutItem * takeAt (int);
	 void setGeometry (const QRect &rect);
	 void setCurrentIndex (int index);
	 void setCurrentWidget (QWidget *w);

};
$#include <QRubberBand>

class QRubberBand : public QWidget {
Q_OBJECT
signals:
public:
	 enum Shape { Line, Rectangle };

	 QRubberBand (Shape, QWidget *=0);
	 ~QRubberBand ();
	 Shape shape () const;
	 void setGeometry (const QRect &r);
	 void setGeometry (int x, int y, int w, int h);
	 void move (int x, int y);
	 void move (const QPoint &p);
	 void resize (int w, int h);
	 void resize (const QSize &s);
		
};
$#include <QMainWindow>

class QMainWindow : public QWidget {
Q_OBJECT
signals:
	 void iconSizeChanged (const QSize &iconSize);
	 void toolButtonStyleChanged (Qt::ToolButtonStyle toolButtonStyle);
public:

	 QMainWindow (QWidget *parent=0, Qt::WFlags flags=0);
	 ~QMainWindow ();
	 QSize iconSize () const;
	 void setIconSize (const QSize &iconSize);
	 Qt::ToolButtonStyle toolButtonStyle () const;
	 void setToolButtonStyle (Qt::ToolButtonStyle toolButtonStyle);
	 QMenuBar * menuBar () const;
	 void setMenuBar (QMenuBar *menubar);
	 QStatusBar * statusBar () const;
	 void setStatusBar (QStatusBar *statusbar);
	 QWidget * centralWidget () const;
	 void setCentralWidget (QWidget *widget);
	 void setCorner (Qt::Corner corner, Qt::DockWidgetArea area);
	 Qt::DockWidgetArea corner (Qt::Corner corner) const;
	 void addToolBarBreak (Qt::ToolBarArea area=Qt::TopToolBarArea);
	 void insertToolBarBreak (QToolBar *before);
	 void addToolBar (Qt::ToolBarArea area, QToolBar *toolbar);
	 void addToolBar (QToolBar *toolbar);
	 QToolBar * addToolBar (const QString &title);
	 void insertToolBar (QToolBar *before, QToolBar *toolbar);
	 void removeToolBar (QToolBar *toolbar);
	 Qt::ToolBarArea toolBarArea (QToolBar *toolbar) const;
	 void addDockWidget (Qt::DockWidgetArea area, QDockWidget *dockwidget);
	 void addDockWidget (Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation);
	 void splitDockWidget (QDockWidget *after, QDockWidget *dockwidget, Qt::Orientation orientation);
	 void removeDockWidget (QDockWidget *dockwidget);
	 Qt::DockWidgetArea dockWidgetArea (QDockWidget *dockwidget) const;
	 QByteArray saveState (int version=0) const;
	 bool restoreState (const QByteArray &state, int version=0);
	 virtual QMenu * createPopupMenu ();
		
};
$#include <QSizeGrip>

class QSizeGrip : public QWidget {
Q_OBJECT
signals:
public:

	 QSizeGrip (QWidget *parent);
	 ~QSizeGrip ();
	 QSize sizeHint () const;
	 void setVisible (bool);
					
};
$#include <QItemDelegate>

class QItemDelegate : public QAbstractItemDelegate {
Q_OBJECT
signals:
public:

	 QItemDelegate (QObject *parent=0);
	 ~QItemDelegate ();
	 void paint (QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 QSize sizeHint (const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 QWidget * createEditor (QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 void setEditorData (QWidget *editor, const QModelIndex &index) const;
	 void setModelData (QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;
	 void updateEditorGeometry (QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const;
	 QItemEditorFactory * itemEditorFactory () const;
	 void setItemEditorFactory (QItemEditorFactory *factory);
	protected  virtual void drawDisplay (QPainter *painter, const QStyleOptionViewItem &option, const QRect &rect, const QString &text) const;
	protected  virtual void drawDecoration (QPainter *painter, const QStyleOptionViewItem &option, const QRect &rect, const QPixmap &pixmap) const;
	protected  virtual void drawFocus (QPainter *painter, const QStyleOptionViewItem &option, const QRect &rect) const;
	protected  virtual void drawCheck (QPainter *painter, const QStyleOptionViewItem &option, const QRect &rect, Qt::CheckState state) const;
						
};
$#include <QAbstractButton>

class QAbstractButton : public QWidget {
Q_OBJECT
signals:
	 void pressed ();
	 void released ();
	 void clicked (bool checked=false);
	 void toggled (bool checked);
public:

	 void setText (const QString &text);
	 QString text () const;
	 void setIcon (const QIcon &icon);
	 QIcon icon () const;
	 QSize iconSize () const;
	 void setShortcut (const QKeySequence &key);
	 QKeySequence shortcut () const;
	 void setCheckable (bool);
	 bool isCheckable () const;
	 bool isChecked () const;
	 void setDown (bool);
	 bool isDown () const;
	 void setAutoRepeat (bool);
	 bool autoRepeat () const;
	 void setAutoExclusive (bool);
	 bool autoExclusive () const;
	 QButtonGroup * group () const;
	 void setIconSize (const QSize &size);
	 void animateClick (int msec=100);
	 void click ();
	 void toggle ();
	 void setChecked (bool);
	protected  virtual void paintEvent (QPaintEvent *e)=0;
	protected  virtual bool hitButton (const QPoint &pos) const;
	protected  virtual void checkStateSet ();
	protected  virtual void nextCheckState ();
										
};
$#include <QDialog>

class QDialog : public QWidget {
Q_OBJECT
signals:
public:
	 enum DialogCode { Rejected, Accepted };

	 QDialog (QWidget *parent=0, Qt::WFlags f=0);
	 ~QDialog ();
	 int result () const;
	 void setVisible (bool visible);
	 void setOrientation (Qt::Orientation orientation);
	 Qt::Orientation orientation () const;
	 void setExtension (QWidget *extension);
	 QWidget * extension () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setSizeGripEnabled (bool);
	 bool isSizeGripEnabled () const;
	 void setModal (bool modal);
	 void setResult (int r);
	 int exec ();
	 virtual void done (int);
	 virtual void accept ();
	 virtual void reject ();
	 void showExtension (bool);
								
};
$#include <QDoubleValidator>

class QDoubleValidator : public QValidator {
Q_OBJECT
signals:
public:

	 QDoubleValidator (QObject *parent);
	 QDoubleValidator (double bottom, double top, int decimals, QObject *parent);
	 ~QDoubleValidator ();
	 QValidator::State validate (QString &, int &) const;
	 virtual void setRange (double bottom, double top, int decimals=0);
	 void setBottom (double);
	 void setTop (double);
	 void setDecimals (int);
	 double bottom () const;
	 double top () const;
	 int decimals () const;

};
$#include <QLCDNumber>

class QLCDNumber : public QFrame {
Q_OBJECT
signals:
	 void overflow ();
public:
	 enum Mode { Hex, Dec, Oct, Bin };
	 enum SegmentStyle { Outline, Filled, Flat };

	 QLCDNumber (QWidget *parent=0);
	 QLCDNumber (uint numDigits, QWidget *parent=0);
	 ~QLCDNumber ();
	 bool smallDecimalPoint () const;
	 int numDigits () const;
	 void setNumDigits (int nDigits);
	 bool checkOverflow (double num) const;
	 bool checkOverflow (int num) const;
	 Mode mode () const;
	 void setMode (Mode);
	 SegmentStyle segmentStyle () const;
	 void setSegmentStyle (SegmentStyle);
	 double value () const;
	 int intValue () const;
	 QSize sizeHint () const;
	 void display (const QString &str);
	 void display (int num);
	 void display (double num);
	 void setHexMode ();
	 void setDecMode ();
	 void setOctMode ();
	 void setBinMode ();
	 void setSmallDecimalPoint (bool);
	
};
$#include <QScrollBar>

class QScrollBar : public QAbstractSlider {
Q_OBJECT
signals:
public:

	 QScrollBar (QWidget *parent=0);
	 QScrollBar (Qt::Orientation, QWidget *parent=0);
	 ~QScrollBar ();
	 QSize sizeHint () const;
	 bool event (QEvent *event);
					
};
$#include <QHBoxLayout>

class QHBoxLayout : public QBoxLayout {
Q_OBJECT
signals:
public:

	 QHBoxLayout ();
	 QHBoxLayout (QWidget *parent);
	 ~QHBoxLayout ();

};
$#include <QAbstractPageSetupDialog>

class QAbstractPageSetupDialog : public QDialog {
Q_OBJECT
signals:
public:

	 QAbstractPageSetupDialog (QPrinter *printer, QWidget *parent=0);
	 QAbstractPageSetupDialog (QAbstractPageSetupDialogPrivate &ptr, QPrinter *printer, QWidget *parent=0);
	 virtual int exec ()=0;
	 QPrinter * printer ();

};
$#include <QToolButton>

class QToolButton : public QAbstractButton {
Q_OBJECT
signals:
	 void triggered (QAction *);
public:
	 enum ToolButtonPopupMode { DelayedPopup, MenuButtonPopup, InstantPopup };

	 QToolButton (QWidget *parent=0);
	 ~QToolButton ();
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 Qt::ToolButtonStyle toolButtonStyle () const;
	 Qt::ArrowType arrowType () const;
	 void setArrowType (Qt::ArrowType type);
	 void setMenu (QMenu *menu);
	 QMenu * menu () const;
	 void setPopupMode (ToolButtonPopupMode mode);
	 ToolButtonPopupMode popupMode () const;
	 QAction * defaultAction () const;
	 void setAutoRaise (bool enable);
	 bool autoRaise () const;
	 void showMenu ();
	 void setToolButtonStyle (Qt::ToolButtonStyle style);
	 void setDefaultAction (QAction *);
									
};
$#include <QFontDialog>

class QFontDialog : public QDialog {
Q_OBJECT
signals:
public:

	 static QFont getFont (bool *ok, const QFont &def, QWidget *parent=0);
	 static QFont getFont (bool *ok, QWidget *parent=0);
	 static QFont getFont (bool *ok, const QFont &def, QWidget *parent=0);
	 static QFont getFont (bool *ok, QWidget *parent=0);

};
$#include <QAbstractPrintDialog>

class QAbstractPrintDialog : public QDialog {
Q_OBJECT
signals:
public:
	 typedef LuaQtGenericFlags PrintDialogOptions;
	 enum PrintRange { AllPages, Selection, PageRange };
	 enum PrintDialogOption {         None = 0x0000, PrintToFile = 0x0001, PrintSelection = 0x0002, PrintPageRange = 0x0004,         PrintCollateCopies = 0x0010       };

	 QAbstractPrintDialog (QPrinter *printer, QWidget *parent=0);
	 virtual int exec ()=0;
	 void addEnabledOption (PrintDialogOption option);
	 void setEnabledOptions (PrintDialogOptions options);
	 PrintDialogOptions enabledOptions () const;
	 bool isOptionEnabled (PrintDialogOption option) const;
	 void setPrintRange (PrintRange range);
	 PrintRange printRange () const;
	 void setMinMax (int min, int max);
	 int minPage () const;
	 int maxPage () const;
	 void setFromTo (int fromPage, int toPage);
	 int fromPage () const;
	 int toPage () const;
	 QPrinter * printer () const;
	
};
$#include <QDoubleSpinBox>

class QDoubleSpinBox : public QAbstractSpinBox {
Q_OBJECT
signals:
	 void valueChanged (double);
	 void valueChanged (const QString &);
public:

	 QDoubleSpinBox (QWidget *parent=0);
	 double value () const;
	 QString prefix () const;
	 void setPrefix (const QString &p);
	 QString suffix () const;
	 void setSuffix (const QString &s);
	 QString cleanText () const;
	 double singleStep () const;
	 void setSingleStep (double val);
	 double minimum () const;
	 void setMinimum (double min);
	 double maximum () const;
	 void setMaximum (double max);
	 void setRange (double min, double max);
	 int decimals () const;
	 void setDecimals (int prec);
	 virtual QValidator::State validate (QString &input, int &pos) const;
	 virtual double valueFromText (const QString &text) const;
	 virtual QString textFromValue (double v) const;
	 virtual void fixup (QString &str) const;
	 void setValue (double val);

};
$#include <QSpinBox>

class QSpinBox : public QAbstractSpinBox {
Q_OBJECT
signals:
	 void valueChanged (int);
	 void valueChanged (const QString &);
public:

	 QSpinBox (QWidget *parent=0);
	 int value () const;
	 QString prefix () const;
	 void setPrefix (const QString &p);
	 QString suffix () const;
	 void setSuffix (const QString &s);
	 QString cleanText () const;
	 int singleStep () const;
	 void setSingleStep (int val);
	 int minimum () const;
	 void setMinimum (int min);
	 int maximum () const;
	 void setMaximum (int max);
	 void setRange (int min, int max);
	 void setValue (int val);
	protected  virtual QValidator::State validate (QString &input, int &pos) const;
	protected  virtual int valueFromText (const QString &text) const;
	protected  virtual QString textFromValue (int v) const;
	protected  virtual void fixup (QString &str) const;

};
$#include <QDateTimeEdit>

class QDateTimeEdit : public QAbstractSpinBox {
Q_OBJECT
signals:
	 void dateTimeChanged (const QDateTime &date);
	 void timeChanged (const QTime &date);
	 void dateChanged (const QDate &date);
public:
	 typedef LuaQtGenericFlags Sections;
	 enum Section {         NoSection = 0x0000, AmPmSection = 0x0001, MSecSection = 0x0002, SecondSection = 0x0004,         MinuteSection = 0x0008, HourSection = 0x0010, DaySection = 0x0100, MonthSection = 0x0200,         YearSection = 0x0400, TimeSections_Mask = AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection, DateSections_Mask = DaySection|MonthSection|YearSection       };

	 QDateTimeEdit (QWidget *parent=0);
	 QDateTimeEdit (const QDateTime &dt, QWidget *parent=0);
	 QDateTimeEdit (const QDate &d, QWidget *parent=0);
	 QDateTimeEdit (const QTime &t, QWidget *parent=0);
	 QDateTime dateTime () const;
	 QDate date () const;
	 QTime time () const;
	 QDate minimumDate () const;
	 void setMinimumDate (const QDate &min);
	 void clearMinimumDate ();
	 QDate maximumDate () const;
	 void setMaximumDate (const QDate &max);
	 void clearMaximumDate ();
	 void setDateRange (const QDate &min, const QDate &max);
	 QTime minimumTime () const;
	 void setMinimumTime (const QTime &min);
	 void clearMinimumTime ();
	 QTime maximumTime () const;
	 void setMaximumTime (const QTime &max);
	 void clearMaximumTime ();
	 void setTimeRange (const QTime &min, const QTime &max);
	 Sections displayedSections () const;
	 Section currentSection () const;
	 void setCurrentSection (Section section);
	 QString sectionText (Section s) const;
	 QString displayFormat () const;
	 void setDisplayFormat (const QString &format);
	 QSize sizeHint () const;
	 virtual void clear ();
	 virtual void stepBy (int steps);
	 bool event (QEvent *e);
	 void setDateTime (const QDateTime &dateTime);
	 void setDate (const QDate &date);
	 void setTime (const QTime &time);
	protected  virtual void keyPressEvent (QKeyEvent *e);
	protected  virtual void wheelEvent (QWheelEvent *e);
	protected  virtual void focusInEvent (QFocusEvent *e);
	protected  virtual bool focusNextPrevChild (bool next);
	protected  virtual QValidator::State validate (QString &input, int &pos) const;
	protected  virtual QDateTime dateTimeFromText (const QString &text) const;
	protected  virtual QString textFromDateTime (const QDateTime &dt) const;

};
$#include <QDragEnterEvent>

class QDragEnterEvent : public QDragMoveEvent {
Q_OBJECT
signals:
public:

	 QDragEnterEvent (const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
	 ~QDragEnterEvent ();

};
$#include <QSlider>

class QSlider : public QAbstractSlider {
Q_OBJECT
signals:
public:
	 enum TickPosition {         NoTicks = 0, TicksAbove = 1, TicksLeft = TicksAbove, TicksBelow = 2,         TicksRight = TicksBelow, TicksBothSides = 3       };

	 QSlider (QWidget *parent=0);
	 QSlider (Qt::Orientation orientation, QWidget *parent=0);
	 ~QSlider ();
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setTickPosition (TickPosition position);
	 TickPosition tickPosition () const;
	 void setTickInterval (int ti);
	 int tickInterval () const;
	 bool event (QEvent *event);
				
};
$#include <QInputDialog>

class QInputDialog : public QDialog {
Q_OBJECT
signals:
public:

	 static QString getText (QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode echo=QLineEdit::Normal, const QString &text=QString(), bool *ok=0, Qt::WFlags f=0);
	 static int getInteger (QWidget *parent, const QString &title, const QString &label, int value=0, int minValue=-2147483647, int maxValue=2147483647, int step=1, bool *ok=0, Qt::WFlags f=0);
	 static double getDouble (QWidget *parent, const QString &title, const QString &label, double value=0, double minValue=-2147483647, double maxValue=2147483647, int decimals=1, bool *ok=0, Qt::WFlags f=0);
	 static QString getItem (QWidget *parent, const QString &title, const QString &label, const QStringList &list, int current=0, bool editable=true, bool *ok=0, Qt::WFlags f=0);
	 static QString getText (QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode echo=QLineEdit::Normal, const QString &text=QString(), bool *ok=0, Qt::WFlags f=0);
	 static int getInteger (QWidget *parent, const QString &title, const QString &label, int value=0, int minValue=-2147483647, int maxValue=2147483647, int step=1, bool *ok=0, Qt::WFlags f=0);
	 static double getDouble (QWidget *parent, const QString &title, const QString &label, double value=0, double minValue=-2147483647, double maxValue=2147483647, int decimals=1, bool *ok=0, Qt::WFlags f=0);
	 static QString getItem (QWidget *parent, const QString &title, const QString &label, const QStringList &list, int current=0, bool editable=true, bool *ok=0, Qt::WFlags f=0);

};
$#include <QDial>

class QDial : public QAbstractSlider {
Q_OBJECT
signals:
public:

	 QDial (QWidget *parent=0);
	 ~QDial ();
	 bool wrapping () const;
	 int notchSize () const;
	 void setNotchTarget (double target);
	 qreal notchTarget () const;
	 bool notchesVisible () const;
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setNotchesVisible (bool visible);
	 void setWrapping (bool on);
					
};
$#include <QMessageBox>

class QMessageBox : public QDialog {
Q_OBJECT
signals:
public:
	 enum Icon {         NoIcon = 0, Information = 1, Warning = 2, Critical = 3,         Question = 4       };
	 enum Button {         NoButton = 0, Ok = 1, Cancel = 2, Yes = 3,         No = 4, Abort = 5, Retry = 6, Ignore = 7,         YesAll = 8, NoAll = 9, ButtonMask = 0xff, Default = 0x100,         Escape = 0x200, FlagMask = 0x300       };

	 QMessageBox (QWidget *parent=0);
	 QMessageBox (const QString &caption, const QString &text, Icon icon, int button0, int button1, int button2, QWidget *parent=0, Qt::WFlags f=Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
	 ~QMessageBox ();
	 QString text () const;
	 void setText (const QString &);
	 Icon icon () const;
	 void setIcon (Icon);
	 QPixmap iconPixmap () const;
	 void setIconPixmap (const QPixmap &);
	 QString buttonText (int button) const;
	 void setButtonText (int button, const QString &);
	 Qt::TextFormat textFormat () const;
	 void setTextFormat (Qt::TextFormat);
	 QSize sizeHint () const;
						 static int information (QWidget *parent, const QString &caption, const QString &text, int button0, int button1=0, int button2=0);
	 static int information (QWidget *parent, const QString &caption, const QString &text, const QString &button0Text=QString(), const QString &button1Text=QString(), const QString &button2Text=QString(), int defaultButtonNumber=0, int escapeButtonNumber=-1);
	 static int question (QWidget *parent, const QString &caption, const QString &text, int button0, int button1=0, int button2=0);
	 static int question (QWidget *parent, const QString &caption, const QString &text, const QString &button0Text=QString(), const QString &button1Text=QString(), const QString &button2Text=QString(), int defaultButtonNumber=0, int escapeButtonNumber=-1);
	 static int warning (QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2=0);
	 static int warning (QWidget *parent, const QString &caption, const QString &text, const QString &button0Text=QString(), const QString &button1Text=QString(), const QString &button2Text=QString(), int defaultButtonNumber=0, int escapeButtonNumber=-1);
	 static int critical (QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2=0);
	 static int critical (QWidget *parent, const QString &caption, const QString &text, const QString &button0Text=QString(), const QString &button1Text=QString(), const QString &button2Text=QString(), int defaultButtonNumber=0, int escapeButtonNumber=-1);
	 static void about (QWidget *parent, const QString &caption, const QString &text);
	 static void aboutQt (QWidget *parent, const QString &caption=QString());
	 static QPixmap standardIcon (Icon icon);

};
$#include <QLabel>

class QLabel : public QFrame {
Q_OBJECT
signals:
public:

	 QLabel (QWidget *parent=0, Qt::WFlags f=0);
	 QLabel (const QString &text, QWidget *parent=0, Qt::WFlags f=0);
	 ~QLabel ();
	 QString text () const;
	 const QPixmap * pixmap () const;
	 const QPicture * picture () const;
	 QMovie * movie () const;
	 Qt::TextFormat textFormat () const;
	 void setTextFormat (Qt::TextFormat);
	 Qt::Alignment alignment () const;
	 void setAlignment (Qt::Alignment);
	 void setWordWrap (bool on);
	 bool wordWrap () const;
	 int indent () const;
	 void setIndent (int);
	 int margin () const;
	 void setMargin (int);
	 bool hasScaledContents () const;
	 void setScaledContents (bool);
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 void setBuddy (QWidget *);
	 QWidget * buddy () const;
	 int heightForWidth (int) const;
	 void setText (const QString &);
	 void setPixmap (const QPixmap &);
	 void setPicture (const QPicture &);
	 void setMovie (QMovie *movie);
	 void setNum (int);
	 void setNum (double);
	 void clear ();
			
};
$#include <QFileDialog>

class QFileDialog : public QDialog {
Q_OBJECT
signals:
	 void filesSelected (const QStringList &files);
	 void currentChanged (const QString &path);
public:
	 typedef LuaQtGenericFlags Options;
	 enum ViewMode { Detail, List };
	 enum FileMode {         AnyFile, ExistingFile, Directory, ExistingFiles,         DirectoryOnly       };
	 enum AcceptMode { AcceptOpen, AcceptSave };
	 enum DialogLabel {         LookIn, FileName, FileType, Accept,         Reject       };
	 enum Option {         ShowDirsOnly = 0x01, DontResolveSymlinks = 0x02, DontConfirmOverwrite = 0x04, DontUseSheet = 0x08,         DontUseNativeDialog = 0x10       };

	 QFileDialog (QWidget *parent, Qt::WFlags f);
	 QFileDialog (QWidget *parent=0, const QString &caption=QString(), const QString &directory=QString(), const QString &filter=QString());
	 ~QFileDialog ();
	 void setDirectory (const QString &directory);
	 void setDirectory (const QDir &directory);
	 QDir directory () const;
	 void selectFile (const QString &filename);
	 QStringList selectedFiles () const;
	 void setFilter (const QString &filter);
	 void setFilters (const QStringList &filters);
	 QStringList filters () const;
	 void selectFilter (const QString &filter);
	 QString selectedFilter () const;
	 void setViewMode (ViewMode mode);
	 ViewMode viewMode () const;
	 void setFileMode (FileMode mode);
	 FileMode fileMode () const;
	 void setAcceptMode (AcceptMode mode);
	 AcceptMode acceptMode () const;
	 void setReadOnly (bool enabled);
	 bool isReadOnly () const;
	 void setResolveSymlinks (bool enabled);
	 bool resolveSymlinks () const;
	 void setConfirmOverwrite (bool enabled);
	 bool confirmOverwrite () const;
	 void setDefaultSuffix (const QString &suffix);
	 QString defaultSuffix () const;
	 void setHistory (const QStringList &paths);
	 QStringList history () const;
	 void setItemDelegate (QAbstractItemDelegate *delegate);
	 QAbstractItemDelegate * itemDelegate () const;
	 void setIconProvider (QFileIconProvider *provider);
	 QFileIconProvider * iconProvider () const;
	 void setLabelText (DialogLabel label, const QString &text);
	 QString labelText (DialogLabel label) const;
				 static QString getOpenFileName (QWidget *parent=0, const QString &caption=QString(), const QString &dir=QString(), const QString &filter=QString(), QString *selectedFilter=0, Options options=0);
	 static QString getSaveFileName (QWidget *parent=0, const QString &caption=QString(), const QString &dir=QString(), const QString &filter=QString(), QString *selectedFilter=0, Options options=0);
	 static QString getExistingDirectory (QWidget *parent=0, const QString &caption=QString(), const QString &dir=QString(), Options options=ShowDirsOnly);
	 static QStringList getOpenFileNames (QWidget *parent=0, const QString &caption=QString(), const QString &dir=QString(), const QString &filter=QString(), QString *selectedFilter=0, Options options=0);

};
$#include <QMotifStyle>

class QMotifStyle : public QCommonStyle {
Q_OBJECT
signals:
public:

	 QMotifStyle (bool useHighlightCols=false);
	 virtual ~QMotifStyle ();
	 void setUseHighlightColors (bool);
	 bool useHighlightColors () const;
	 void polish (QPalette &);
	 void polish (QWidget *);
	 void polish (QApplication *);
	 void drawPrimitive (PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 void drawControl (ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 void drawComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *w=0) const;
	 QRect subControlRect (ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget=0) const;
	 int pixelMetric (PixelMetric metric, const QStyleOption *option=0, const QWidget *widget=0) const;
	 QSize sizeFromContents (ContentsType ct, const QStyleOption *opt, const QSize &contentsSize, const QWidget *widget=0) const;
	 QRect subElementRect (SubElement r, const QStyleOption *opt, const QWidget *widget=0) const;
	 QPixmap standardPixmap (StandardPixmap standardPixmap, const QStyleOption *opt, const QWidget *widget=0) const;
	 int styleHint (StyleHint hint, const QStyleOption *opt=0, const QWidget *widget=0, QStyleHintReturn *returnData=0) const;
	 bool event (QEvent *);
	 QPalette standardPalette () const;

};
$#include <QVBoxLayout>

class QVBoxLayout : public QBoxLayout {
Q_OBJECT
signals:
public:

	 QVBoxLayout ();
	 QVBoxLayout (QWidget *parent);
	 ~QVBoxLayout ();

};
$#include <QSplitter>

class QSplitter : public QFrame {
Q_OBJECT
signals:
	 void splitterMoved (int pos, int index);
public:

	 QSplitter (QWidget *parent=0);
	 QSplitter (Qt::Orientation, QWidget *parent=0);
	 ~QSplitter ();
	 void addWidget (QWidget *widget);
	 void insertWidget (int index, QWidget *widget);
	 void setOrientation (Qt::Orientation);
	 Qt::Orientation orientation () const;
	 void setChildrenCollapsible (bool);
	 bool childrenCollapsible () const;
	 void setCollapsible (int index, bool);
	 bool isCollapsible (int index) const;
	 void setOpaqueResize (bool opaque=true);
	 bool opaqueResize () const;
	 void refresh ();
	 QSize sizeHint () const;
	 QSize minimumSizeHint () const;
	 QList< int > sizes () const;
	 void setSizes (const QList< int > &list);
	 QByteArray saveState () const;
	 bool restoreState (const QByteArray &state);
	 int handleWidth () const;
	 void setHandleWidth (int);
	 int indexOf (QWidget *w) const;
	 QWidget * widget (int index) const;
	 int count () const;
	 void getRange (int index, int *, int *) const;
	 QSplitterHandle * handle (int index) const;
	 void setStretchFactor (int index, int stretch);
	protected  virtual QSplitterHandle * createHandle ();
							
};
$#include <QWindowsStyle>

class QWindowsStyle : public QCommonStyle {
Q_OBJECT
signals:
public:

	 QWindowsStyle ();
	 ~QWindowsStyle ();
	 void polish (QApplication *);
	 void unpolish (QApplication *);
	 void polish (QWidget *);
	 void unpolish (QWidget *);
	 void polish (QPalette &);
	 void drawPrimitive (PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 void drawControl (ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 QRect subElementRect (SubElement r, const QStyleOption *opt, const QWidget *widget=0) const;
	 void drawComplexControl (ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *w=0) const;
	 QSize sizeFromContents (ContentsType ct, const QStyleOption *opt, const QSize &contentsSize, const QWidget *widget=0) const;
	 int pixelMetric (PixelMetric pm, const QStyleOption *option=0, const QWidget *widget=0) const;
	 int styleHint (StyleHint hint, const QStyleOption *opt=0, const QWidget *widget=0, QStyleHintReturn *returnData=0) const;
	 QPixmap standardPixmap (StandardPixmap standardPixmap, const QStyleOption *opt, const QWidget *widget=0) const;

};
$#include <QErrorMessage>

class QErrorMessage : public QDialog {
Q_OBJECT
signals:
public:

	 QErrorMessage (QWidget *parent=0);
	 ~QErrorMessage ();
	 void showMessage (const QString &message);
		 static QErrorMessage * qtHandler ();

};
$#include <QToolBox>

class QToolBox : public QFrame {
Q_OBJECT
signals:
	 void currentChanged (int index);
public:

	 QToolBox (QWidget *parent=0, Qt::WFlags f=0);
	 ~QToolBox ();
	 int addItem (QWidget *widget, const QString &text);
	 int addItem (QWidget *widget, const QIcon &icon, const QString &text);
	 int insertItem (int index, QWidget *widget, const QString &text);
	 int insertItem (int index, QWidget *widget, const QIcon &icon, const QString &text);
	 void removeItem (int index);
	 void setItemEnabled (int index, bool enabled);
	 bool isItemEnabled (int index) const;
	 void setItemText (int index, const QString &text);
	 QString itemText (int index) const;
	 void setItemIcon (int index, const QIcon &icon);
	 QIcon itemIcon (int index) const;
	 void setItemToolTip (int index, const QString &toolTip);
	 QString itemToolTip (int index) const;
	 int currentIndex () const;
	 QWidget * currentWidget () const;
	 QWidget * widget (int index) const;
	 int indexOf (QWidget *widget) const;
	 int count () const;
	 void setCurrentIndex (int index);
	 void setCurrentWidget (QWidget *widget);
	protected  virtual void itemInserted (int index);
	protected  virtual void itemRemoved (int index);
		
};
$#include <QAccessibleWidget>

class QAccessibleWidget : public QAccessibleObject {
Q_OBJECT
signals:
public:

	 QAccessibleWidget (QWidget *o, Role r=Client, const QString &name=QString());
	 int childCount () const;
	 int indexOfChild (const QAccessibleInterface *child) const;
	 Relation relationTo (int child, const QAccessibleInterface *other, int otherChild) const;
	 int childAt (int x, int y) const;
	 QRect rect (int child) const;
	 int navigate (RelationFlag rel, int entry, QAccessibleInterface **target) const;
	 QString text (Text t, int child) const;
	 Role role (int child) const;
	 State state (int child) const;
	 QString actionText (int action, Text t, int child) const;
	 bool doAction (int action, int child, const QVariantList &params);
								
};
$#include <QTextTable>

class QTextTable : public QTextFrame {
Q_OBJECT
signals:
public:

	 QTextTable (QTextDocument *doc);
	 ~QTextTable ();
	 void resize (int rows, int cols);
	 void insertRows (int pos, int num);
	 void insertColumns (int pos, int num);
	 void removeRows (int pos, int num);
	 void removeColumns (int pos, int num);
	 int rows () const;
	 int columns () const;
	 QTextTableCell cellAt (int row, int col) const;
	 QTextTableCell cellAt (int position) const;
	 QTextTableCell cellAt (const QTextCursor &c) const;
	 QTextCursor rowStart (const QTextCursor &c) const;
	 QTextCursor rowEnd (const QTextCursor &c) const;
	 void setFormat (const QTextTableFormat &format);
	 QTextTableFormat format () const;

};
$#include <QRadioButton>

class QRadioButton : public QAbstractButton {
Q_OBJECT
signals:
public:

	 QRadioButton (QWidget *parent=0);
	 QRadioButton (const QString &text, QWidget *parent=0);
	 QSize sizeHint () const;
		
};
$#include <QStackedWidget>

class QStackedWidget : public QFrame {
Q_OBJECT
signals:
	 void currentChanged (int);
	 void widgetRemoved (int index);
public:

	 QStackedWidget (QWidget *parent=0);
	 ~QStackedWidget ();
	 int addWidget (QWidget *w);
	 int insertWidget (int index, QWidget *w);
	 void removeWidget (QWidget *w);
	 QWidget * currentWidget () const;
	 int currentIndex () const;
	 int indexOf (QWidget *) const;
	 QWidget * widget (int) const;
	 int count () const;
	 void setCurrentIndex (int index);
	 void setCurrentWidget (QWidget *w);

};
$#include <QCheckBox>

class QCheckBox : public QAbstractButton {
Q_OBJECT
signals:
	 void stateChanged (int);
public:

	 QCheckBox (QWidget *parent=0);
	 QCheckBox (const QString &text, QWidget *parent=0);
	 QSize sizeHint () const;
	 void setTristate (bool y=true);
	 bool isTristate () const;
	 Qt::CheckState checkState () const;
	 void setCheckState (Qt::CheckState state);
				
};
$#include <QColorDialog>

class QColorDialog : public QDialog {
Q_OBJECT
signals:
public:

	 static QColor getColor (const QColor &init=Qt::white, QWidget *parent=0);
	 static QRgb getRgba (QRgb, bool *ok=0, QWidget *parent=0);
	 static int customCount ();
	 static QRgb customColor (int);
	 static void setCustomColor (int, QRgb);
	 static void setStandardColor (int, QRgb);
	 static QColor getColor (const QColor &init=Qt::white, QWidget *parent=0);
	 static QRgb getRgba (QRgb, bool *ok=0, QWidget *parent=0);
	 static int customCount ();
	 static QRgb customColor (int);
	 static void setCustomColor (int, QRgb);
	 static void setStandardColor (int, QRgb);

};
$#include <QPushButton>

class QPushButton : public QAbstractButton {
Q_OBJECT
signals:
public:

	 QPushButton (QWidget *parent=0);
	 QPushButton (const QString &text, QWidget *parent=0);
	 QPushButton (const QIcon &icon, const QString &text, QWidget *parent=0);
	 ~QPushButton ();
	 QSize sizeHint () const;
	 bool autoDefault () const;
	 void setAutoDefault (bool);
	 bool isDefault () const;
	 void setDefault (bool);
	 void setMenu (QMenu *menu);
	 QMenu * menu () const;
	 void setFlat (bool);
	 bool isFlat () const;
	 void showMenu ();
				
};
$#include <QAbstractScrollArea>

class QAbstractScrollArea : public QFrame {
Q_OBJECT
signals:
public:

	 QAbstractScrollArea (QWidget *parent=0);
	 ~QAbstractScrollArea ();
	 Qt::ScrollBarPolicy verticalScrollBarPolicy () const;
	 void setVerticalScrollBarPolicy (Qt::ScrollBarPolicy);
	 QScrollBar * verticalScrollBar () const;
	 Qt::ScrollBarPolicy horizontalScrollBarPolicy () const;
	 void setHorizontalScrollBarPolicy (Qt::ScrollBarPolicy);
	 QScrollBar * horizontalScrollBar () const;
	 QWidget * viewport () const;
	 QSize maximumViewportSize () const;
	 QSize minimumSizeHint () const;
	 QSize sizeHint () const;
				protected  virtual bool viewportEvent (QEvent *);
														protected  virtual void scrollContentsBy (int dx, int dy);

};
$#include <QProgressDialog>

class QProgressDialog : public QDialog {
Q_OBJECT
signals:
	 void canceled ();
public:

	 QProgressDialog (QWidget *parent=0, Qt::WFlags f=0);
	 QProgressDialog (const QString &labelText, const QString &cancelButtonText, int minimum, int maximum, QWidget *parent=0, Qt::WFlags f=0);
	 ~QProgressDialog ();
	 void setLabel (QLabel *label);
	 void setCancelButton (QPushButton *button);
	 void setBar (QProgressBar *bar);
	 bool wasCanceled () const;
	 int minimum () const;
	 int maximum () const;
	 void setRange (int minimum, int maximum);
	 int value () const;
	 QSize sizeHint () const;
	 QString labelText () const;
	 int minimumDuration () const;
	 void setAutoReset (bool b);
	 bool autoReset () const;
	 void setAutoClose (bool b);
	 bool autoClose () const;
	 void cancel ();
	 void reset ();
	 void setMaximum (int maximum);
	 void setMinimum (int minimum);
	 void setValue (int progress);
	 void setLabelText (const QString &);
	 void setCancelButtonText (const QString &);
	 void setMinimumDuration (int ms);
				
};
$#include <QPrintDialog>

class QPrintDialog : public QAbstractPrintDialog {
Q_OBJECT
signals:
public:

	 QPrintDialog (QPrinter *printer, QWidget *parent=0);
	 ~QPrintDialog ();
	 int exec ();

};
$#include <QAbstractItemView>

class QAbstractItemView : public QAbstractScrollArea {
Q_OBJECT
signals:
	 void pressed (const QModelIndex &index);
	 void clicked (const QModelIndex &index);
	 void doubleClicked (const QModelIndex &index);
	 void activated (const QModelIndex &index);
	 void entered (const QModelIndex &index);
	 void viewportEntered ();
public:
	 typedef LuaQtGenericFlags EditTriggers;
	 enum SelectionMode { NoSelection, SingleSelection, MultiSelection, ExtendedSelection };
	 enum SelectionBehavior { SelectItems, SelectRows, SelectColumns };
	 enum ScrollHint { EnsureVisible, PositionAtTop, PositionAtBottom };
	 enum EditTrigger {         NoEditTriggers = 0, CurrentChanged = 1, DoubleClicked = 2, SelectedClicked = 4,         EditKeyPressed = 8, AnyKeyPressed = 16, AllEditTriggers = 31       };

	 QAbstractItemView (QWidget *parent=0);
	 ~QAbstractItemView ();
	 virtual void setModel (QAbstractItemModel *model);
	 QAbstractItemModel * model () const;
	 virtual void setSelectionModel (QItemSelectionModel *selectionModel);
	 QItemSelectionModel * selectionModel () const;
	 void setItemDelegate (QAbstractItemDelegate *delegate);
	 QAbstractItemDelegate * itemDelegate () const;
	 void setSelectionMode (QAbstractItemView::SelectionMode mode);
	 QAbstractItemView::SelectionMode selectionMode () const;
	 void setSelectionBehavior (QAbstractItemView::SelectionBehavior behavior);
	 QAbstractItemView::SelectionBehavior selectionBehavior () const;
	 QModelIndex currentIndex () const;
	 QModelIndex rootIndex () const;
	 void setEditTriggers (EditTriggers triggers);
	 EditTriggers editTriggers () const;
	 void setAutoScroll (bool enable);
	 bool hasAutoScroll () const;
	 void setTabKeyNavigation (bool enable);
	 bool tabKeyNavigation () const;
	 void setDropIndicatorShown (bool enable);
	 bool showDropIndicator () const;
	 void setDragEnabled (bool enable);
	 bool dragEnabled () const;
	 void setAlternatingRowColors (bool enable);
	 bool alternatingRowColors () const;
	 void setIconSize (const QSize &size);
	 QSize iconSize () const;
	 void setTextElideMode (Qt::TextElideMode mode);
	 Qt::TextElideMode textElideMode () const;
	 virtual void keyboardSearch (const QString &search);
	 virtual QRect visualRect (const QModelIndex &index) const =0;
	 virtual void scrollTo (const QModelIndex &index, ScrollHint hint=EnsureVisible)=0;
	 virtual QModelIndex indexAt (const QPoint &p) const =0;
	 QSize sizeHintForIndex (const QModelIndex &index) const;
	 virtual int sizeHintForRow (int row) const;
	 virtual int sizeHintForColumn (int column) const;
	 void openPersistentEditor (const QModelIndex &index);
	 void closePersistentEditor (const QModelIndex &index);
	 virtual void reset ();
	 virtual void setRootIndex (const QModelIndex &index);
	 virtual void doItemsLayout ();
	 virtual void selectAll ();
	 void edit (const QModelIndex &index);
	 void clearSelection ();
	 void setCurrentIndex (const QModelIndex &index);
						protected  virtual int horizontalOffset () const =0;
	protected  virtual int verticalOffset () const =0;
	protected  virtual bool isIndexHidden (const QModelIndex &index) const =0;
	protected  virtual void setSelection (const QRect &rect, QItemSelectionModel::SelectionFlags command)=0;
	protected  virtual QRegion visualRegionForSelection (const QItemSelection &selection) const =0;
	protected  virtual QModelIndexList selectedIndexes () const;
	protected  virtual bool edit (const QModelIndex &index, EditTrigger trigger, QEvent *event);
	protected  virtual QItemSelectionModel::SelectionFlags selectionCommand (const QModelIndex &index, const QEvent *event=0) const;
	protected  virtual void startDrag (Qt::DropActions supportedActions);
	protected  virtual QStyleOptionViewItem viewOptions () const;
																							
};
$#include <QCDEStyle>

class QCDEStyle : public QMotifStyle {
Q_OBJECT
signals:
public:

	 QCDEStyle (bool useHighlightCols=false);
	 virtual ~QCDEStyle ();
	 int pixelMetric (PixelMetric metric, const QStyleOption *option=0, const QWidget *widget=0) const;
	 void drawControl (ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 void drawPrimitive (PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w=0) const;
	 QPalette standardPalette () const;

};
$#include <QPageSetupDialog>

class QPageSetupDialog : public QAbstractPageSetupDialog {
Q_OBJECT
signals:
public:

	 QPageSetupDialog (QPrinter *printer, QWidget *parent=0);
	 virtual int exec ();

};
$#include <QDateEdit>

class QDateEdit : public QDateTimeEdit {
Q_OBJECT
signals:
public:

	 QDateEdit (QWidget *parent=0);
	 QDateEdit (const QDate &t, QWidget *parent=0);

};
$#include <QTimeEdit>

class QTimeEdit : public QDateTimeEdit {
Q_OBJECT
signals:
public:

	 QTimeEdit (QWidget *parent=0);
	 QTimeEdit (const QTime &t, QWidget *parent=0);

};
$#include <QScrollArea>

class QScrollArea : public QAbstractScrollArea {
Q_OBJECT
signals:
public:

	 QScrollArea (QWidget *parent=0);
	 ~QScrollArea ();
	 QWidget * widget () const;
	 void setWidget (QWidget *w);
	 QWidget * takeWidget ();
	 bool widgetResizable () const;
	 void setWidgetResizable (bool resizable);
	 QSize sizeHint () const;
	 bool focusNextPrevChild (bool next);
				
};
$#include <QTextEdit>

class QTextEdit : public QAbstractScrollArea {
Q_OBJECT
signals:
	 void textChanged ();
	 void undoAvailable (bool b);
	 void redoAvailable (bool b);
	 void currentCharFormatChanged (const QTextCharFormat &format);
	 void copyAvailable (bool b);
	 void selectionChanged ();
	 void cursorPositionChanged ();
public:
	 typedef LuaQtGenericFlags AutoFormatting;
	 enum LineWrapMode { NoWrap, WidgetWidth, FixedPixelWidth, FixedColumnWidth };
	 enum AutoFormattingFlag { AutoNone = 0, AutoBulletList = 0x00000001, AutoAll = 0xffffffff };
	 //enum CursorAction {         MoveBackward, MoveForward, MoveWordBackward, MoveWordForward,         MoveUp, MoveDown, MoveLineStart, MoveLineEnd,         MoveHome, MoveEnd, MovePageUp, MovePageDown       };

	 QTextEdit (QWidget *parent=0);
	 QTextEdit (const QString &text, QWidget *parent=0);
	 virtual ~QTextEdit ();
	 void setDocument (QTextDocument *document);
	 QTextDocument * document () const;
	 void setTextCursor (const QTextCursor &cursor);
	 QTextCursor textCursor () const;
	 bool isReadOnly () const;
	 void setReadOnly (bool ro);
	 qreal fontPointSize () const;
	 QString fontFamily () const;
	 int fontWeight () const;
	 bool fontUnderline () const;
	 bool fontItalic () const;
	 QColor textColor () const;
	 QFont currentFont () const;
	 Qt::Alignment alignment () const;
	 void mergeCurrentCharFormat (const QTextCharFormat &modifier);
	 void setCurrentCharFormat (const QTextCharFormat &format);
	 QTextCharFormat currentCharFormat () const;
	 AutoFormatting autoFormatting () const;
	 void setAutoFormatting (AutoFormatting features);
	 bool tabChangesFocus () const;
	 void setTabChangesFocus (bool b);
	 void setDocumentTitle (const QString &title);
	 QString documentTitle () const;
	 bool isUndoRedoEnabled () const;
	 void setUndoRedoEnabled (bool enable);
	 LineWrapMode lineWrapMode () const;
	 void setLineWrapMode (LineWrapMode mode);
	 int lineWrapColumnOrWidth () const;
	 void setLineWrapColumnOrWidth (int w);
	 QTextOption::WrapMode wordWrapMode () const;
	 void setWordWrapMode (QTextOption::WrapMode policy);
	 bool find (const QString &exp, QTextDocument::FindFlags options=0);
	 QString toPlainText () const;
	 QString toHtml () const;
	 void append (const QString &text);
	 void ensureCursorVisible ();
	 virtual QVariant loadResource (int type, const QUrl &name);
	 QMenu * createStandardContextMenu ();
	 QTextCursor cursorForPosition (const QPoint &pos) const;
	 QRect cursorRect (const QTextCursor &cursor) const;
	 QRect cursorRect () const;
	 QString anchorAt (const QPoint &pos) const;
	 void setFontPointSize (qreal s);
	 void setFontFamily (const QString &fontFamily);
	 void setFontWeight (int w);
	 void setFontUnderline (bool b);
	 void setFontItalic (bool b);
	 void setTextColor (const QColor &c);
	 void setCurrentFont (const QFont &f);
	 void setAlignment (Qt::Alignment a);
	 void setPlainText (const QString &text);
	 void setHtml (const QString &text);
	 void cut ();
	 void copy ();
	 void paste ();
	 void clear ();
	 void selectAll ();
	 void insertPlainText (const QString &text);
	 void insertHtml (const QString &text);
	 void scrollToAnchor (const QString &name);
	 void zoomIn (int range=1);
	 void zoomOut (int range=1);
	protected  virtual void timerEvent (QTimerEvent *e);
	protected  virtual void keyPressEvent (QKeyEvent *e);
	protected  virtual void resizeEvent (QResizeEvent *);
	protected  virtual void paintEvent (QPaintEvent *e);
	protected  virtual void mousePressEvent (QMouseEvent *e);
	protected  virtual void mouseMoveEvent (QMouseEvent *e);
	protected  virtual void mouseReleaseEvent (QMouseEvent *e);
	protected  virtual void mouseDoubleClickEvent (QMouseEvent *e);
	protected  virtual bool focusNextPrevChild (bool next);
	protected  virtual void contextMenuEvent (QContextMenuEvent *e);
	protected  virtual void dragEnterEvent (QDragEnterEvent *e);
	protected  virtual void dragLeaveEvent (QDragLeaveEvent *e);
	protected  virtual void dragMoveEvent (QDragMoveEvent *e);
	protected  virtual void dropEvent (QDropEvent *e);
	protected  virtual void focusInEvent (QFocusEvent *e);
	protected  virtual void focusOutEvent (QFocusEvent *e);
	protected  virtual void showEvent (QShowEvent *);
	protected  virtual void changeEvent (QEvent *e);
	protected  virtual void wheelEvent (QWheelEvent *e);
	protected  virtual QMimeData * createMimeDataFromSelection () const;
	protected  virtual bool canInsertFromMimeData (const QMimeData *source) const;
	protected  virtual void insertFromMimeData (const QMimeData *source);
	protected  virtual void inputMethodEvent (QInputMethodEvent *);
		
};
$#include <QPlastiqueStyle>

class QPlastiqueStyle : public QWindowsStyle {
Q_OBJECT
signals:
public:

	 QPlastiqueStyle ();
	 ~QPlastiqueStyle ();
	 void drawPrimitive (PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget=0) const;
	 void drawControl (ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const;
	 void drawComplexControl (ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const;
	 QSize sizeFromContents (ContentsType type, const QStyleOption *option, const QSize &size, const QWidget *widget) const;
	 QRect subElementRect (SubElement element, const QStyleOption *option, const QWidget *widget) const;
	 QRect subControlRect (ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget) const;
	 int styleHint (StyleHint hint, const QStyleOption *option=0, const QWidget *widget=0, QStyleHintReturn *returnData=0) const;
	 SubControl hitTestComplexControl (ComplexControl control, const QStyleOptionComplex *option, const QPoint &pos, const QWidget *widget=0) const;
	 int pixelMetric (PixelMetric metric, const QStyleOption *option=0, const QWidget *widget=0) const;
	 void polish (QWidget *widget);
	 void polish (QApplication *app);
	 void polish (QPalette &pal);
	 void unpolish (QWidget *widget);
	 void unpolish (QApplication *app);
	 QPalette standardPalette () const;

};
$#include <QListView>

class QListView : public QAbstractItemView {
Q_OBJECT
signals:
public:
	 enum Movement { Static, Free, Snap };
	 enum Flow { LeftToRight, TopToBottom };
	 enum ResizeMode { Fixed, Adjust };
	 enum LayoutMode { SinglePass, Batched };
	 enum ViewMode { ListMode, IconMode };

	 QListView (QWidget *parent=0);
	 ~QListView ();
	 void setMovement (Movement movement);
	 Movement movement () const;
	 void setFlow (Flow flow);
	 Flow flow () const;
	 void setWrapping (bool enable);
	 bool isWrapping () const;
	 void setResizeMode (ResizeMode mode);
	 ResizeMode resizeMode () const;
	 void setLayoutMode (LayoutMode mode);
	 LayoutMode layoutMode () const;
	 void setSpacing (int space);
	 int spacing () const;
	 void setGridSize (const QSize &size);
	 QSize gridSize () const;
	 void setViewMode (ViewMode mode);
	 ViewMode viewMode () const;
	 void clearPropertyFlags ();
	 bool isRowHidden (int row) const;
	 void setRowHidden (int row, bool hide);
	 void setModelColumn (int column);
	 int modelColumn () const;
	 QRect visualRect (const QModelIndex &index) const;
	 void scrollTo (const QModelIndex &index, ScrollHint hint=EnsureVisible);
	 QModelIndex indexAt (const QPoint &p) const;
	 void doItemsLayout ();
	 void reset ();
	 void setRootIndex (const QModelIndex &index);
																											
};
$#include <QHeaderView>

class QHeaderView : public QAbstractItemView {
Q_OBJECT
signals:
	 void sectionMoved (int logicalIndex, int oldVisualIndex, int newVisualIndex);
	 void sectionResized (int logicalIndex, int oldSize, int newSize);
	 void sectionPressed (int logicalIndex);
	 void sectionClicked (int logicalIndex);
	 void sectionDoubleClicked (int logicalIndex);
	 void sectionCountChanged (int oldCount, int newCount);
	 void sectionHandleDoubleClicked (int logicalIndex);
	 void sectionAutoResize (int logicalIndex, QHeaderView::ResizeMode mode);
public:
	 enum ResizeMode { Interactive, Stretch, Custom };

	 QHeaderView (Qt::Orientation orientation, QWidget *parent=0);
	 virtual ~QHeaderView ();
	 void setModel (QAbstractItemModel *model);
	 Qt::Orientation orientation () const;
	 int offset () const;
	 int length () const;
	 QSize sizeHint () const;
	 int sectionSizeHint (int logicalIndex) const;
	 int visualIndexAt (int position) const;
	 int logicalIndexAt (int position) const;
	 int logicalIndexAt (int x, int y) const;
	 int logicalIndexAt (const QPoint &pos) const;
	 int sectionSize (int logicalIndex) const;
	 int sectionPosition (int logicalIndex) const;
	 int sectionViewportPosition (int logicalIndex) const;
	 void moveSection (int from, int to);
	 void resizeSection (int logicalIndex, int size);
	 bool isSectionHidden (int logicalIndex) const;
	 void setSectionHidden (int logicalIndex, bool hide);
	 void hideSection (int logicalIndex);
	 void showSection (int logicalIndex);
	 int count () const;
	 int visualIndex (int logicalIndex) const;
	 int logicalIndex (int visualIndex) const;
	 void setMovable (bool movable);
	 bool isMovable () const;
	 void setClickable (bool clickable);
	 bool isClickable () const;
	 void setHighlightSections (bool highlight);
	 bool highlightSections () const;
	 void setResizeMode (ResizeMode mode);
	 void setResizeMode (int logicalIndex, ResizeMode mode);
	 ResizeMode resizeMode (int logicalIndex) const;
	 int stretchSectionCount () const;
	 void setSortIndicatorShown (bool show);
	 bool isSortIndicatorShown () const;
	 void setSortIndicator (int logicalIndex, Qt::SortOrder order);
	 int sortIndicatorSection () const;
	 Qt::SortOrder sortIndicatorOrder () const;
	 bool stretchLastSection () const;
	 void setStretchLastSection (bool stretch);
	 void doItemsLayout ();
	 bool sectionsMoved () const;
	 void setOffset (int offset);
	 void headerDataChanged (Qt::Orientation orientation, int logicalFirst, int logicalLast);
												protected  virtual void paintSection (QPainter *painter, const QRect &rect, int logicalIndex) const;
	protected  virtual QSize sectionSizeFromContents (int logicalIndex) const;
												
};
$#include <QTextBrowser>

class QTextBrowser : public QTextEdit {
Q_OBJECT
signals:
	 void backwardAvailable (bool);
	 void forwardAvailable (bool);
	 void sourceChanged (const QUrl &);
	 void highlighted (const QUrl &);
	 void highlighted (const QString &);
	 void anchorClicked (const QUrl &);
public:

	 QTextBrowser (QWidget *parent=0);
	 virtual ~QTextBrowser ();
	 QUrl source () const;
	 QStringList searchPaths () const;
	 void setSearchPaths (const QStringList &paths);
	 virtual QVariant loadResource (int type, const QUrl &name);
	 virtual void setSource (const QUrl &name);
	 virtual void backward ();
	 virtual void forward ();
	 virtual void home ();
	 virtual void reload ();
	protected  virtual void keyPressEvent (QKeyEvent *ev);
	protected  virtual void mouseMoveEvent (QMouseEvent *ev);
	protected  virtual void mousePressEvent (QMouseEvent *ev);
	protected  virtual void mouseReleaseEvent (QMouseEvent *ev);
	protected  virtual void focusOutEvent (QFocusEvent *ev);
	protected  virtual bool focusNextPrevChild (bool next);
	protected  virtual void paintEvent (QPaintEvent *e);

};
$#include <QTableView>

class QTableView : public QAbstractItemView {
Q_OBJECT
signals:
public:

	 QTableView (QWidget *parent=0);
	 ~QTableView ();
	 void setModel (QAbstractItemModel *model);
	 void setRootIndex (const QModelIndex &index);
	 void setSelectionModel (QItemSelectionModel *selectionModel);
	 QHeaderView * horizontalHeader () const;
	 QHeaderView * verticalHeader () const;
	 void setHorizontalHeader (QHeaderView *header);
	 void setVerticalHeader (QHeaderView *header);
	 int rowViewportPosition (int row) const;
	 int rowHeight (int row) const;
	 int rowAt (int y) const;
	 int columnViewportPosition (int column) const;
	 int columnWidth (int column) const;
	 int columnAt (int x) const;
	 bool isRowHidden (int row) const;
	 void setRowHidden (int row, bool hide);
	 bool isColumnHidden (int column) const;
	 void setColumnHidden (int column, bool hide);
	 bool showGrid () const;
	 void setShowGrid (bool show);
	 Qt::PenStyle gridStyle () const;
	 void setGridStyle (Qt::PenStyle style);
	 QRect visualRect (const QModelIndex &index) const;
	 void scrollTo (const QModelIndex &index, ScrollHint hint=EnsureVisible);
	 QModelIndex indexAt (const QPoint &p) const;
	 void selectRow (int row);
	 void selectColumn (int column);
	 void hideRow (int row);
	 void hideColumn (int column);
	 void showRow (int row);
	 void showColumn (int column);
	 void resizeRowToContents (int row);
	 void resizeColumnToContents (int column);
	 void sortByColumn (int column);
															
};
$#include <QTreeView>

class QTreeView : public QAbstractItemView {
Q_OBJECT
signals:
	 void expanded (const QModelIndex &index);
	 void collapsed (const QModelIndex &index);
public:

	 QTreeView (QWidget *parent=0);
	 ~QTreeView ();
	 void setModel (QAbstractItemModel *model);
	 void setRootIndex (const QModelIndex &index);
	 void setSelectionModel (QItemSelectionModel *selectionModel);
	 QHeaderView * header () const;
	 void setHeader (QHeaderView *header);
	 int indentation () const;
	 void setIndentation (int i);
	 bool rootIsDecorated () const;
	 void setRootIsDecorated (bool show);
	 bool uniformRowHeights () const;
	 void setUniformRowHeights (bool uniform);
	 bool itemsExpandable () const;
	 void setItemsExpandable (bool enable);
	 int columnViewportPosition (int column) const;
	 int columnWidth (int column) const;
	 int columnAt (int x) const;
	 bool isColumnHidden (int column) const;
	 void setColumnHidden (int column, bool hide);
	 bool isRowHidden (int row, const QModelIndex &parent) const;
	 void setRowHidden (int row, const QModelIndex &parent, bool hide);
	 bool isExpanded (const QModelIndex &index) const;
	 void setExpanded (const QModelIndex &index, bool expand);
	 QRect visualRect (const QModelIndex &index) const;
	 void scrollTo (const QModelIndex &index, ScrollHint hint=EnsureVisible);
	 QModelIndex indexAt (const QPoint &p) const;
	 QModelIndex indexAbove (const QModelIndex &index) const;
	 QModelIndex indexBelow (const QModelIndex &index) const;
	 void doItemsLayout ();
	 void reset ();
	 void dataChanged (const QModelIndex &topLeft, const QModelIndex &bottomRight);
	 void hideColumn (int column);
	 void showColumn (int column);
	 void expand (const QModelIndex &index);
	 void collapse (const QModelIndex &index);
	 void resizeColumnToContents (int column);
	 void sortByColumn (int column);
	 void selectAll ();
											protected  virtual void drawRow (QPainter *painter, const QStyleOptionViewItem &options, const QModelIndex &index) const;
	protected  virtual void drawBranches (QPainter *painter, const QRect &rect, const QModelIndex &index) const;
						
};
$#include <QListWidget>

class QListWidget : public QListView {
Q_OBJECT
signals:
	 void itemPressed (QListWidgetItem *item);
	 void itemClicked (QListWidgetItem *item);
	 void itemDoubleClicked (QListWidgetItem *item);
	 void itemActivated (QListWidgetItem *item);
	 void itemEntered (QListWidgetItem *item);
	 void itemChanged (QListWidgetItem *item);
	 void currentItemChanged (QListWidgetItem *current, QListWidgetItem *previous);
	 void currentTextChanged (const QString &currentText);
	 void currentRowChanged (int currentRow);
	 void itemSelectionChanged ();
public:

	 QListWidget (QWidget *parent=0);
	 ~QListWidget ();
	 QListWidgetItem * item (int row) const;
	 int row (const QListWidgetItem *item) const;
	 void insertItem (int row, QListWidgetItem *item);
	 void insertItem (int row, const QString &label);
	 void insertItems (int row, const QStringList &labels);
	 void addItem (const QString &label);
	 void addItem (QListWidgetItem *item);
	 void addItems (const QStringList &labels);
	 QListWidgetItem * takeItem (int row);
	 int count () const;
	 QListWidgetItem * currentItem () const;
	 void setCurrentItem (QListWidgetItem *item);
	 int currentRow () const;
	 void setCurrentRow (int row);
	 QListWidgetItem * itemAt (const QPoint &p) const;
	 QListWidgetItem * itemAt (int x, int y) const;
	 QRect visualItemRect (const QListWidgetItem *item) const;
	 void sortItems (Qt::SortOrder order=Qt::AscendingOrder);
	 void editItem (QListWidgetItem *item);
	 void openPersistentEditor (QListWidgetItem *item);
	 void closePersistentEditor (QListWidgetItem *item);
	 bool isItemSelected (const QListWidgetItem *item) const;
	 void setItemSelected (const QListWidgetItem *item, bool select);
	 QList< QListWidgetItem * > selectedItems () const;
	 QList< QListWidgetItem * > findItems (const QString &text, Qt::MatchFlags flags) const;
	 bool isItemHidden (const QListWidgetItem *item) const;
	 void setItemHidden (const QListWidgetItem *item, bool hide);
	 void scrollToItem (const QListWidgetItem *item, QAbstractItemView::ScrollHint hint=EnsureVisible);
	 void clear ();
	protected  virtual QStringList mimeTypes () const;
	protected  virtual QMimeData * mimeData (const QList< QListWidgetItem * > items) const;
	protected  virtual bool dropMimeData (int index, const QMimeData *data, Qt::DropAction action);
	protected  virtual Qt::DropActions supportedDropActions () const;
			
};
$#include <QTreeWidget>

class QTreeWidget : public QTreeView {
Q_OBJECT
signals:
	 void itemPressed (QTreeWidgetItem *item, int column);
	 void itemClicked (QTreeWidgetItem *item, int column);
	 void itemDoubleClicked (QTreeWidgetItem *item, int column);
	 void itemActivated (QTreeWidgetItem *item, int column);
	 void itemEntered (QTreeWidgetItem *item, int column);
	 void itemChanged (QTreeWidgetItem *item, int column);
	 void itemExpanded (QTreeWidgetItem *item);
	 void itemCollapsed (QTreeWidgetItem *item);
	 void currentItemChanged (QTreeWidgetItem *current, QTreeWidgetItem *previous);
	 void itemSelectionChanged ();
public:

	 QTreeWidget (QWidget *parent=0);
	 ~QTreeWidget ();
	 int columnCount () const;
	 void setColumnCount (int columns);
	 QTreeWidgetItem * topLevelItem (int index) const;
	 int topLevelItemCount () const;
	 void insertTopLevelItem (int index, QTreeWidgetItem *item);
	 void addTopLevelItem (QTreeWidgetItem *item);
	 QTreeWidgetItem * takeTopLevelItem (int index);
	 int indexOfTopLevelItem (QTreeWidgetItem *item);
	 QTreeWidgetItem * headerItem () const;
	 void setHeaderItem (QTreeWidgetItem *item);
	 void setHeaderLabels (const QStringList &labels);
	 QTreeWidgetItem * currentItem () const;
	 void setCurrentItem (QTreeWidgetItem *item);
	 QTreeWidgetItem * itemAt (const QPoint &p) const;
	 QTreeWidgetItem * itemAt (int x, int y) const;
	 QRect visualItemRect (const QTreeWidgetItem *item) const;
	 void sortItems (int column, Qt::SortOrder order);
	 void setSortingEnabled (bool enable);
	 bool isSortingEnabled () const;
	 void editItem (QTreeWidgetItem *item, int column=0);
	 void openPersistentEditor (QTreeWidgetItem *item, int column=0);
	 void closePersistentEditor (QTreeWidgetItem *item, int column=0);
	 bool isItemSelected (const QTreeWidgetItem *item) const;
	 void setItemSelected (const QTreeWidgetItem *item, bool select);
	 QList< QTreeWidgetItem * > selectedItems () const;
	 QList< QTreeWidgetItem * > findItems (const QString &text, Qt::MatchFlags flags, int column=0) const;
	 bool isItemHidden (const QTreeWidgetItem *item) const;
	 void setItemHidden (const QTreeWidgetItem *item, bool hide);
	 bool isItemExpanded (const QTreeWidgetItem *item) const;
	 void setItemExpanded (const QTreeWidgetItem *item, bool expand);
	 void scrollToItem (const QTreeWidgetItem *item, QAbstractItemView::ScrollHint hint=EnsureVisible);
	 void expandItem (const QTreeWidgetItem *item);
	 void collapseItem (const QTreeWidgetItem *item);
	 void clear ();
	protected  virtual QStringList mimeTypes () const;
	protected  virtual QMimeData * mimeData (const QList< QTreeWidgetItem * > items) const;
	protected  virtual bool dropMimeData (QTreeWidgetItem *parent, int index, const QMimeData *data, Qt::DropAction action);
	protected  virtual Qt::DropActions supportedDropActions () const;
			
};
$#include <QTableWidget>

class QTableWidget : public QTableView {
Q_OBJECT
signals:
	 void itemPressed (QTableWidgetItem *item);
	 void itemClicked (QTableWidgetItem *item);
	 void itemDoubleClicked (QTableWidgetItem *item);
	 void itemActivated (QTableWidgetItem *item);
	 void itemEntered (QTableWidgetItem *item);
	 void itemChanged (QTableWidgetItem *item);
	 void currentItemChanged (QTableWidgetItem *current, QTableWidgetItem *previous);
	 void itemSelectionChanged ();
public:

	 QTableWidget (QWidget *parent=0);
	 QTableWidget (int rows, int columns, QWidget *parent=0);
	 ~QTableWidget ();
	 void setRowCount (int rows);
	 int rowCount () const;
	 void setColumnCount (int columns);
	 int columnCount () const;
	 int row (const QTableWidgetItem *item) const;
	 int column (const QTableWidgetItem *item) const;
	 QTableWidgetItem * item (int row, int column) const;
	 void setItem (int row, int column, QTableWidgetItem *item);
	 QTableWidgetItem * takeItem (int row, int column);
	 QTableWidgetItem * verticalHeaderItem (int row) const;
	 void setVerticalHeaderItem (int row, QTableWidgetItem *item);
	 QTableWidgetItem * horizontalHeaderItem (int column) const;
	 void setHorizontalHeaderItem (int column, QTableWidgetItem *item);
	 void setVerticalHeaderLabels (const QStringList &labels);
	 void setHorizontalHeaderLabels (const QStringList &labels);
	 int currentRow () const;
	 int currentColumn () const;
	 QTableWidgetItem * currentItem () const;
	 void setCurrentItem (QTableWidgetItem *item);
	 void sortItems (int column, Qt::SortOrder order=Qt::AscendingOrder);
	 void setSortingEnabled (bool enable);
	 bool isSortingEnabled () const;
	 void editItem (QTableWidgetItem *item);
	 void openPersistentEditor (QTableWidgetItem *item);
	 void closePersistentEditor (QTableWidgetItem *item);
	 bool isItemSelected (const QTableWidgetItem *item) const;
	 void setItemSelected (const QTableWidgetItem *item, bool select);
	 void setRangeSelected (const QTableWidgetSelectionRange &range, bool select);
	 QList< QTableWidgetSelectionRange > selectedRanges () const;
	 QList< QTableWidgetItem * > selectedItems ();
	 QList< QTableWidgetItem * > findItems (const QString &text, Qt::MatchFlags flags) const;
	 int visualRow (int logicalRow) const;
	 int visualColumn (int logicalColumn) const;
	 QTableWidgetItem * itemAt (const QPoint &p) const;
	 QTableWidgetItem * itemAt (int x, int y) const;
	 QRect visualItemRect (const QTableWidgetItem *item) const;
	 const QTableWidgetItem * itemPrototype () const;
	 void setItemPrototype (const QTableWidgetItem *item);
	 void scrollToItem (const QTableWidgetItem *item, QAbstractItemView::ScrollHint hint=EnsureVisible);
	 void insertRow (int row);
	 void insertColumn (int column);
	 void removeRow (int row);
	 void removeColumn (int column);
	 void clear ();
	protected  virtual QStringList mimeTypes () const;
	protected  virtual QMimeData * mimeData (const QList< QTableWidgetItem * > items) const;
	protected  virtual bool dropMimeData (int row, int column, const QMimeData *data, Qt::DropAction action);
	protected  virtual Qt::DropActions supportedDropActions () const;
			
};
class QVariant {
public:
	QRegion value<QRegion>();
	QKeySequence value<QKeySequence>();
	QTextFormat value<QTextFormat>();
	QTextLength value<QTextLength>();
	QSizePolicy value<QSizePolicy>();
	QBitmap value<QBitmap>();
	QBrush value<QBrush>();
	QFont value<QFont>();
	QColor value<QColor>();
	QCursor value<QCursor>();
	QPalette value<QPalette>();
	QPen value<QPen>();
	QPixmap value<QPixmap>();
	QIcon value<QIcon>();
	QImage value<QImage>();
	QPolygon value<QPolygon>();
};
