$#include <QXmlContentHandler>

class QXmlContentHandler {
Q_OBJECT
signals:
public:

	 virtual ~QXmlContentHandler ();
	 virtual void setDocumentLocator (QXmlLocator *locator)=0;
	 virtual bool startDocument ()=0;
	 virtual bool endDocument ()=0;
	 virtual bool startPrefixMapping (const QString &prefix, const QString &uri)=0;
	 virtual bool endPrefixMapping (const QString &prefix)=0;
	 virtual bool startElement (const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)=0;
	 virtual bool endElement (const QString &namespaceURI, const QString &localName, const QString &qName)=0;
	 virtual bool characters (const QString &ch)=0;
	 virtual bool ignorableWhitespace (const QString &ch)=0;
	 virtual bool processingInstruction (const QString &target, const QString &data)=0;
	 virtual bool skippedEntity (const QString &name)=0;
	 virtual QString errorString () const =0;

};
$#include <QXmlNamespaceSupport>

class QXmlNamespaceSupport {
Q_OBJECT
signals:
public:

	 QXmlNamespaceSupport ();
	 ~QXmlNamespaceSupport ();
	 void setPrefix (const QString &, const QString &);
	 QString prefix (const QString &) const;
	 QString uri (const QString &) const;
	 void splitName (const QString &, QString &, QString &) const;
	 void processName (const QString &, bool, QString &, QString &) const;
	 QStringList prefixes () const;
	 QStringList prefixes (const QString &) const;
	 void pushContext ();
	 void popContext ();
	 void reset ();

};
$#include <QXmlParseException>

class QXmlParseException {
Q_OBJECT
signals:
public:

	 QXmlParseException (const QString &name=QString(), int c=-1, int l=-1, const QString &p=QString(), const QString &s=QString());
	 ~QXmlParseException ();
	 int columnNumber () const;
	 int lineNumber () const;
	 QString publicId () const;
	 QString systemId () const;
	 QString message () const;

};
$#include <QXmlLexicalHandler>

class QXmlLexicalHandler {
Q_OBJECT
signals:
public:

	 virtual ~QXmlLexicalHandler ();
	 virtual bool startDTD (const QString &name, const QString &publicId, const QString &systemId)=0;
	 virtual bool endDTD ()=0;
	 virtual bool startEntity (const QString &name)=0;
	 virtual bool endEntity (const QString &name)=0;
	 virtual bool startCDATA ()=0;
	 virtual bool endCDATA ()=0;
	 virtual bool comment (const QString &ch)=0;
	 virtual QString errorString () const =0;

};
$#include <QXmlLocator>

class QXmlLocator {
Q_OBJECT
signals:
public:

	 virtual ~QXmlLocator ();
	 virtual int columnNumber () const =0;
	 virtual int lineNumber () const =0;

};
$#include <QDomNodeList>

class QDomNodeList {
Q_OBJECT
signals:
public:

	 QDomNodeList ();
	 QDomNodeList (const QDomNodeList &);
	 QDomNodeList & operator= (const QDomNodeList &);
	 bool operator== (const QDomNodeList &) const;
	 bool operator!= (const QDomNodeList &) const;
	 ~QDomNodeList ();
	 QDomNode item (int index) const;
	 uint length () const;
	 int count () const;

};
$#include <QXmlErrorHandler>

class QXmlErrorHandler {
Q_OBJECT
signals:
public:

	 virtual ~QXmlErrorHandler ();
	 virtual bool warning (const QXmlParseException &exception)=0;
	 virtual bool error (const QXmlParseException &exception)=0;
	 virtual bool fatalError (const QXmlParseException &exception)=0;
	 virtual QString errorString () const =0;

};
$#include <QXmlDTDHandler>

class QXmlDTDHandler {
Q_OBJECT
signals:
public:

	 virtual ~QXmlDTDHandler ();
	 virtual bool notationDecl (const QString &name, const QString &publicId, const QString &systemId)=0;
	 virtual bool unparsedEntityDecl (const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)=0;
	 virtual QString errorString () const =0;

};
$#include <QXmlEntityResolver>

class QXmlEntityResolver {
Q_OBJECT
signals:
public:

	 virtual ~QXmlEntityResolver ();
	 virtual bool resolveEntity (const QString &publicId, const QString &systemId, QXmlInputSource *&ret)=0;
	 virtual QString errorString () const =0;

};
$#include <QXmlReader>

class QXmlReader {
Q_OBJECT
signals:
public:

	 virtual ~QXmlReader ();
	 virtual bool feature (const QString &name, bool *ok=0) const =0;
	 virtual void setFeature (const QString &name, bool value)=0;
	 virtual bool hasFeature (const QString &name) const =0;
	 virtual void * property (const QString &name, bool *ok=0) const =0;
	 virtual void setProperty (const QString &name, void *value)=0;
	 virtual bool hasProperty (const QString &name) const =0;
	 virtual void setEntityResolver (QXmlEntityResolver *handler)=0;
	 virtual QXmlEntityResolver * entityResolver () const =0;
	 virtual void setDTDHandler (QXmlDTDHandler *handler)=0;
	 virtual QXmlDTDHandler * DTDHandler () const =0;
	 virtual void setContentHandler (QXmlContentHandler *handler)=0;
	 virtual QXmlContentHandler * contentHandler () const =0;
	 virtual void setErrorHandler (QXmlErrorHandler *handler)=0;
	 virtual QXmlErrorHandler * errorHandler () const =0;
	 virtual void setLexicalHandler (QXmlLexicalHandler *handler)=0;
	 virtual QXmlLexicalHandler * lexicalHandler () const =0;
	 virtual void setDeclHandler (QXmlDeclHandler *handler)=0;
	 virtual QXmlDeclHandler * declHandler () const =0;
	 virtual bool parse (const QXmlInputSource &input)=0;
	 virtual bool parse (const QXmlInputSource *input)=0;

};
$#include <QXmlAttributes>

class QXmlAttributes {
Q_OBJECT
signals:
public:
	 struct Attribute;

	 QXmlAttributes ();
	 virtual ~QXmlAttributes ();
	 int index (const QString &qName) const;
	 int index (const QString &uri, const QString &localPart) const;
	 int length () const;
	 int count () const;
	 QString localName (int index) const;
	 QString qName (int index) const;
	 QString uri (int index) const;
	 QString type (int index) const;
	 QString type (const QString &qName) const;
	 QString type (const QString &uri, const QString &localName) const;
	 QString value (int index) const;
	 QString value (const QString &qName) const;
	 QString value (const QString &uri, const QString &localName) const;
	 void clear ();
	 void append (const QString &qName, const QString &uri, const QString &localPart, const QString &value);

};
$#include <QDomNode>

class QDomNode {
Q_OBJECT
signals:
public:
	 enum NodeType {         ElementNode = 1, AttributeNode = 2, TextNode = 3, CDATASectionNode = 4,         EntityReferenceNode = 5, EntityNode = 6, ProcessingInstructionNode = 7, CommentNode = 8,         DocumentNode = 9, DocumentTypeNode = 10, DocumentFragmentNode = 11, NotationNode = 12,         BaseNode = 21, CharacterDataNode = 22       };

	 QDomNode ();
	 QDomNode (const QDomNode &);
	 QDomNode & operator= (const QDomNode &);
	 bool operator== (const QDomNode &) const;
	 bool operator!= (const QDomNode &) const;
	 ~QDomNode ();
	 QDomNode insertBefore (const QDomNode &newChild, const QDomNode &refChild);
	 QDomNode insertAfter (const QDomNode &newChild, const QDomNode &refChild);
	 QDomNode replaceChild (const QDomNode &newChild, const QDomNode &oldChild);
	 QDomNode removeChild (const QDomNode &oldChild);
	 QDomNode appendChild (const QDomNode &newChild);
	 bool hasChildNodes () const;
	 QDomNode cloneNode (bool deep=true) const;
	 void normalize ();
	 bool isSupported (const QString &feature, const QString &version) const;
	 QString nodeName () const;
	 NodeType nodeType () const;
	 QDomNode parentNode () const;
	 QDomNodeList childNodes () const;
	 QDomNode firstChild () const;
	 QDomNode lastChild () const;
	 QDomNode previousSibling () const;
	 QDomNode nextSibling () const;
	 QDomNamedNodeMap attributes () const;
	 QDomDocument ownerDocument () const;
	 QString namespaceURI () const;
	 QString localName () const;
	 bool hasAttributes () const;
	 QString nodeValue () const;
	 void setNodeValue (const QString &);
	 QString prefix () const;
	 void setPrefix (const QString &pre);
	 bool isAttr () const;
	 bool isCDATASection () const;
	 bool isDocumentFragment () const;
	 bool isDocument () const;
	 bool isDocumentType () const;
	 bool isElement () const;
	 bool isEntityReference () const;
	 bool isText () const;
	 bool isEntity () const;
	 bool isNotation () const;
	 bool isProcessingInstruction () const;
	 bool isCharacterData () const;
	 bool isComment () const;
	 QDomNode namedItem (const QString &name) const;
	 bool isNull () const;
	 void clear ();
	 QDomAttr toAttr () const;
	 QDomCDATASection toCDATASection () const;
	 QDomDocumentFragment toDocumentFragment () const;
	 QDomDocument toDocument () const;
	 QDomDocumentType toDocumentType () const;
	 QDomElement toElement () const;
	 QDomEntityReference toEntityReference () const;
	 QDomText toText () const;
	 QDomEntity toEntity () const;
	 QDomNotation toNotation () const;
	 QDomProcessingInstruction toProcessingInstruction () const;
	 QDomCharacterData toCharacterData () const;
	 QDomComment toComment () const;
	 void save (QTextStream &, int) const;
	 QDomElement firstChildElement (const QString &tagName=QString()) const;
	 QDomElement lastChildElement (const QString &tagName=QString()) const;
	 QDomElement previousSiblingElement (const QString &tagName=QString()) const;
	 QDomElement nextSiblingElement (const QString &taName=QString()) const;

};
$#include <QXmlInputSource>

class QXmlInputSource {
Q_OBJECT
signals:
public:

	 QXmlInputSource ();
	 QXmlInputSource (QIODevice *dev);
	 virtual ~QXmlInputSource ();
	 virtual void setData (const QString &dat);
	 virtual void setData (const QByteArray &dat);
	 virtual void fetchData ();
	 virtual QString data () const;
	 virtual QChar next ();
	 virtual void reset ();
	 static const ushort EndOfData;
	 static const ushort EndOfDocument;

};
$#include <QDomNamedNodeMap>

class QDomNamedNodeMap {
Q_OBJECT
signals:
public:

	 QDomNamedNodeMap ();
	 QDomNamedNodeMap (const QDomNamedNodeMap &);
	 QDomNamedNodeMap & operator= (const QDomNamedNodeMap &);
	 bool operator== (const QDomNamedNodeMap &) const;
	 bool operator!= (const QDomNamedNodeMap &) const;
	 ~QDomNamedNodeMap ();
	 QDomNode namedItem (const QString &name) const;
	 QDomNode setNamedItem (const QDomNode &newNode);
	 QDomNode removeNamedItem (const QString &name);
	 QDomNode item (int index) const;
	 QDomNode namedItemNS (const QString &nsURI, const QString &localName) const;
	 QDomNode setNamedItemNS (const QDomNode &newNode);
	 QDomNode removeNamedItemNS (const QString &nsURI, const QString &localName);
	 uint length () const;
	 uint count () const;
	 bool contains (const QString &name) const;

};
$#include <QXmlDeclHandler>

class QXmlDeclHandler {
Q_OBJECT
signals:
public:

	 virtual ~QXmlDeclHandler ();
	 virtual bool attributeDecl (const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)=0;
	 virtual bool internalEntityDecl (const QString &name, const QString &value)=0;
	 virtual bool externalEntityDecl (const QString &name, const QString &publicId, const QString &systemId)=0;
	 virtual QString errorString () const =0;

};
$#include <QDomImplementation>

class QDomImplementation {
Q_OBJECT
signals:
public:

	 QDomImplementation ();
	 QDomImplementation (const QDomImplementation &);
	 ~QDomImplementation ();
	 QDomImplementation & operator= (const QDomImplementation &);
	 bool operator== (const QDomImplementation &) const;
	 bool operator!= (const QDomImplementation &) const;
	 bool hasFeature (const QString &feature, const QString &version) const;
	 QDomDocumentType createDocumentType (const QString &qName, const QString &publicId, const QString &systemId);
	 QDomDocument createDocument (const QString &nsURI, const QString &qName, const QDomDocumentType &doctype);
	 bool isNull ();

};
$#include <QXmlDefaultHandler>

class QXmlDefaultHandler : public QXmlContentHandler , public QXmlErrorHandler , public QXmlDTDHandler , public QXmlEntityResolver , public QXmlLexicalHandler , public QXmlDeclHandler {
Q_OBJECT
signals:
public:

	 QXmlDefaultHandler ();
	 virtual ~QXmlDefaultHandler ();
	 void setDocumentLocator (QXmlLocator *locator);
	 bool startDocument ();
	 bool endDocument ();
	 bool startPrefixMapping (const QString &prefix, const QString &uri);
	 bool endPrefixMapping (const QString &prefix);
	 bool startElement (const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts);
	 bool endElement (const QString &namespaceURI, const QString &localName, const QString &qName);
	 bool characters (const QString &ch);
	 bool ignorableWhitespace (const QString &ch);
	 bool processingInstruction (const QString &target, const QString &data);
	 bool skippedEntity (const QString &name);
	 bool warning (const QXmlParseException &exception);
	 bool error (const QXmlParseException &exception);
	 bool fatalError (const QXmlParseException &exception);
	 bool notationDecl (const QString &name, const QString &publicId, const QString &systemId);
	 bool unparsedEntityDecl (const QString &name, const QString &publicId, const QString &systemId, const QString &notationName);
	 bool resolveEntity (const QString &publicId, const QString &systemId, QXmlInputSource *&ret);
	 bool startDTD (const QString &name, const QString &publicId, const QString &systemId);
	 bool endDTD ();
	 bool startEntity (const QString &name);
	 bool endEntity (const QString &name);
	 bool startCDATA ();
	 bool endCDATA ();
	 bool comment (const QString &ch);
	 bool attributeDecl (const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value);
	 bool internalEntityDecl (const QString &name, const QString &value);
	 bool externalEntityDecl (const QString &name, const QString &publicId, const QString &systemId);
	 QString errorString () const;

};
$#include <QDomElement>

class QDomElement : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomElement ();
	 QDomElement (const QDomElement &x);
	 QDomElement & operator= (const QDomElement &);
	 QString attribute (const QString &name, const QString &defValue=QString()) const;
	 void setAttribute (const QString &name, const QString &value);
	 void setAttribute (const QString &name, qlonglong value);
	 void setAttribute (const QString &name, qulonglong value);
	 void setAttribute (const QString &name, int value);
	 void setAttribute (const QString &name, uint value);
	 void setAttribute (const QString &name, double value);
	 void removeAttribute (const QString &name);
	 QDomAttr attributeNode (const QString &name);
	 QDomAttr setAttributeNode (const QDomAttr &newAttr);
	 QDomAttr removeAttributeNode (const QDomAttr &oldAttr);
	 QDomNodeList elementsByTagName (const QString &tagname) const;
	 bool hasAttribute (const QString &name) const;
	 QString attributeNS (const QString nsURI, const QString &localName, const QString &defValue=QString()) const;
	 void setAttributeNS (const QString nsURI, const QString &qName, const QString &value);
	 void setAttributeNS (const QString nsURI, const QString &qName, int value);
	 void setAttributeNS (const QString nsURI, const QString &qName, uint value);
	 void setAttributeNS (const QString nsURI, const QString &qName, qlonglong value);
	 void setAttributeNS (const QString nsURI, const QString &qName, qulonglong value);
	 void setAttributeNS (const QString nsURI, const QString &qName, double value);
	 void removeAttributeNS (const QString &nsURI, const QString &localName);
	 QDomAttr attributeNodeNS (const QString &nsURI, const QString &localName);
	 QDomAttr setAttributeNodeNS (const QDomAttr &newAttr);
	 QDomNodeList elementsByTagNameNS (const QString &nsURI, const QString &localName) const;
	 bool hasAttributeNS (const QString &nsURI, const QString &localName) const;
	 QString tagName () const;
	 void setTagName (const QString &name);
	 QDomNamedNodeMap attributes () const;
	 QDomNode::NodeType nodeType () const;
	 QString text () const;

};
$#include <QDomDocument>

class QDomDocument : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomDocument ();
	 QDomDocument (const QString &name);
	 QDomDocument (const QDomDocumentType &doctype);
	 QDomDocument (const QDomDocument &x);
	 QDomDocument & operator= (const QDomDocument &);
	 ~QDomDocument ();
	 QDomElement createElement (const QString &tagName);
	 QDomDocumentFragment createDocumentFragment ();
	 QDomText createTextNode (const QString &data);
	 QDomComment createComment (const QString &data);
	 QDomCDATASection createCDATASection (const QString &data);
	 QDomProcessingInstruction createProcessingInstruction (const QString &target, const QString &data);
	 QDomAttr createAttribute (const QString &name);
	 QDomEntityReference createEntityReference (const QString &name);
	 QDomNodeList elementsByTagName (const QString &tagname) const;
	 QDomNode importNode (const QDomNode &importedNode, bool deep);
	 QDomElement createElementNS (const QString &nsURI, const QString &qName);
	 QDomAttr createAttributeNS (const QString &nsURI, const QString &qName);
	 QDomNodeList elementsByTagNameNS (const QString &nsURI, const QString &localName);
	 QDomElement elementById (const QString &elementId);
	 QDomDocumentType doctype () const;
	 QDomImplementation implementation () const;
	 QDomElement documentElement () const;
	 QDomNode::NodeType nodeType () const;
	 bool setContent (const QByteArray &text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (const QString &text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (QIODevice *dev, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (const QByteArray &text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (const QString &text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (QIODevice *dev, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 bool setContent (QXmlInputSource *source, QXmlReader *reader, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0);
	 QString toString (int=1) const;
	 QByteArray toByteArray (int=1) const;

};
$#include <QDomEntity>

class QDomEntity : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomEntity ();
	 QDomEntity (const QDomEntity &x);
	 QDomEntity & operator= (const QDomEntity &);
	 QString publicId () const;
	 QString systemId () const;
	 QString notationName () const;
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomEntityReference>

class QDomEntityReference : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomEntityReference ();
	 QDomEntityReference (const QDomEntityReference &x);
	 QDomEntityReference & operator= (const QDomEntityReference &);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomCharacterData>

class QDomCharacterData : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomCharacterData ();
	 QDomCharacterData (const QDomCharacterData &x);
	 QDomCharacterData & operator= (const QDomCharacterData &);
	 QString substringData (unsigned long offset, unsigned long count);
	 void appendData (const QString &arg);
	 void insertData (unsigned long offset, const QString &arg);
	 void deleteData (unsigned long offset, unsigned long count);
	 void replaceData (unsigned long offset, unsigned long count, const QString &arg);
	 uint length () const;
	 QString data () const;
	 void setData (const QString &);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomNotation>

class QDomNotation : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomNotation ();
	 QDomNotation (const QDomNotation &x);
	 QDomNotation & operator= (const QDomNotation &);
	 QString publicId () const;
	 QString systemId () const;
	 QDomNode::NodeType nodeType () const;

};
$#include <QXmlSimpleReader>

class QXmlSimpleReader : public QXmlReader {
Q_OBJECT
signals:
public:

	 QXmlSimpleReader ();
	 virtual ~QXmlSimpleReader ();
	 bool feature (const QString &name, bool *ok=0) const;
	 void setFeature (const QString &name, bool value);
	 bool hasFeature (const QString &name) const;
	 void * property (const QString &name, bool *ok=0) const;
	 void setProperty (const QString &name, void *value);
	 bool hasProperty (const QString &name) const;
	 void setEntityResolver (QXmlEntityResolver *handler);
	 QXmlEntityResolver * entityResolver () const;
	 void setDTDHandler (QXmlDTDHandler *handler);
	 QXmlDTDHandler * DTDHandler () const;
	 void setContentHandler (QXmlContentHandler *handler);
	 QXmlContentHandler * contentHandler () const;
	 void setErrorHandler (QXmlErrorHandler *handler);
	 QXmlErrorHandler * errorHandler () const;
	 void setLexicalHandler (QXmlLexicalHandler *handler);
	 QXmlLexicalHandler * lexicalHandler () const;
	 void setDeclHandler (QXmlDeclHandler *handler);
	 QXmlDeclHandler * declHandler () const;
	 bool parse (const QXmlInputSource &input);
	 bool parse (const QXmlInputSource *input);
	 virtual bool parse (const QXmlInputSource *input, bool incremental);
	 virtual bool parseContinue ();

};
$#include <QDomDocumentFragment>

class QDomDocumentFragment : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomDocumentFragment ();
	 QDomDocumentFragment (const QDomDocumentFragment &x);
	 QDomDocumentFragment & operator= (const QDomDocumentFragment &);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomDocumentType>

class QDomDocumentType : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomDocumentType ();
	 QDomDocumentType (const QDomDocumentType &x);
	 QDomDocumentType & operator= (const QDomDocumentType &);
	 QString name () const;
	 QDomNamedNodeMap entities () const;
	 QDomNamedNodeMap notations () const;
	 QString publicId () const;
	 QString systemId () const;
	 QString internalSubset () const;
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomAttr>

class QDomAttr : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomAttr ();
	 QDomAttr (const QDomAttr &x);
	 QDomAttr & operator= (const QDomAttr &);
	 QString name () const;
	 bool specified () const;
	 QDomElement ownerElement () const;
	 QString value () const;
	 void setValue (const QString &);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomProcessingInstruction>

class QDomProcessingInstruction : public QDomNode {
Q_OBJECT
signals:
public:

	 QDomProcessingInstruction ();
	 QDomProcessingInstruction (const QDomProcessingInstruction &x);
	 QDomProcessingInstruction & operator= (const QDomProcessingInstruction &);
	 QString target () const;
	 QString data () const;
	 void setData (const QString &d);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomText>

class QDomText : public QDomCharacterData {
Q_OBJECT
signals:
public:

	 QDomText ();
	 QDomText (const QDomText &x);
	 QDomText & operator= (const QDomText &);
	 QDomText splitText (int offset);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomComment>

class QDomComment : public QDomCharacterData {
Q_OBJECT
signals:
public:

	 QDomComment ();
	 QDomComment (const QDomComment &x);
	 QDomComment & operator= (const QDomComment &);
	 QDomNode::NodeType nodeType () const;

};
$#include <QDomCDATASection>

class QDomCDATASection : public QDomText {
Q_OBJECT
signals:
public:

	 QDomCDATASection ();
	 QDomCDATASection (const QDomCDATASection &x);
	 QDomCDATASection & operator= (const QDomCDATASection &);
	 QDomNode::NodeType nodeType () const;

};
