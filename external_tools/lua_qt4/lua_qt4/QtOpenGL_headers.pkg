$#include <QGLColormap>

class QGLColormap {
Q_OBJECT
signals:
public:
	 struct QGLColormapData;

	 QGLColormap ();
	 QGLColormap (const QGLColormap &);
	 ~QGLColormap ();
	 QGLColormap & operator= (const QGLColormap &);
	 bool isEmpty () const;
	 int size () const;
	 void detach ();
	 void setEntries (int count, const QRgb *colors, int base=0);
	 void setEntry (int idx, QRgb color);
	 void setEntry (int idx, const QColor &color);
	 QRgb entryRgb (int idx) const;
	 QColor entryColor (int idx) const;
	 int find (QRgb color) const;
	 int findNearest (QRgb color) const;
		
};
$#include <QGLFormat>

class QGLFormat {
Q_OBJECT
signals:
public:

	 QGLFormat ();
	 QGLFormat (QGL::FormatOptions options, int plane=0);
	 QGLFormat (const QGLFormat &other);
	 QGLFormat & operator= (const QGLFormat &other);
	 ~QGLFormat ();
	 void setDepthBufferSize (int size);
	 int depthBufferSize () const;
	 void setAccumBufferSize (int size);
	 int accumBufferSize () const;
	 void setAlphaBufferSize (int size);
	 int alphaBufferSize () const;
	 void setStencilBufferSize (int size);
	 int stencilBufferSize () const;
	 void setSampleBuffers (bool enable);
	 bool sampleBuffers () const;
	 void setSamples (int numSamples);
	 int samples () const;
	 bool doubleBuffer () const;
	 void setDoubleBuffer (bool enable);
	 bool depth () const;
	 void setDepth (bool enable);
	 bool rgba () const;
	 void setRgba (bool enable);
	 bool alpha () const;
	 void setAlpha (bool enable);
	 bool accum () const;
	 void setAccum (bool enable);
	 bool stencil () const;
	 void setStencil (bool enable);
	 bool stereo () const;
	 void setStereo (bool enable);
	 bool directRendering () const;
	 void setDirectRendering (bool enable);
	 bool hasOverlay () const;
	 void setOverlay (bool enable);
	 int plane () const;
	 void setPlane (int plane);
	 void setOption (QGL::FormatOptions opt);
	 bool testOption (QGL::FormatOptions opt) const;
	 static QGLFormat defaultFormat ();
	 static void setDefaultFormat (const QGLFormat &f);
	 static QGLFormat defaultOverlayFormat ();
	 static void setDefaultOverlayFormat (const QGLFormat &f);
	 static bool hasOpenGL ();
	 static bool hasOpenGLOverlays ();

};
$#include <QGLContext>

class QGLContext {
Q_OBJECT
signals:
public:

	 QGLContext (const QGLFormat &format, QPaintDevice *device);
	 QGLContext (const QGLFormat &format);
	 virtual ~QGLContext ();
	 virtual bool create (const QGLContext *shareContext=0);
	 bool isValid () const;
	 bool isSharing () const;
	 void reset ();
	 QGLFormat format () const;
	 QGLFormat requestedFormat () const;
	 void setFormat (const QGLFormat &format);
	 virtual void makeCurrent ();
	 virtual void doneCurrent ();
	 virtual void swapBuffers () const;
	 GLuint bindTexture (const QImage &image, GLenum target=GL_TEXTURE_2D, GLint format=GL_RGBA8);
	 GLuint bindTexture (const QPixmap &pixmap, GLenum target=GL_TEXTURE_2D, GLint format=GL_RGBA8);
	 GLuint bindTexture (const QString &fileName);
	 void deleteTexture (GLuint tx_id);
	 void * getProcAddress (const QString &proc) const;
	 QPaintDevice * device () const;
	 QColor overlayTransparentColor () const;
	protected  virtual bool chooseContext (const QGLContext *shareContext=0);
										 static void setTextureCacheLimit (int size);
	 static int textureCacheLimit ();
	 static const QGLContext * currentContext ();

};
$#include <QGLWidget>

class QGLWidget : public QWidget {
Q_OBJECT
signals:
public:

	 QGLWidget (QWidget *parent=0, const QGLWidget *shareWidget=0, Qt::WFlags f=0);
	 QGLWidget (QGLContext *context, QWidget *parent=0, const QGLWidget *shareWidget=0, Qt::WFlags f=0);
	 QGLWidget (const QGLFormat &format, QWidget *parent=0, const QGLWidget *shareWidget=0, Qt::WFlags f=0);
	 ~QGLWidget ();
	 void qglColor (const QColor &c) const;
	 void qglClearColor (const QColor &c) const;
	 bool isValid () const;
	 bool isSharing () const;
	 void makeCurrent ();
	 void doneCurrent ();
	 bool doubleBuffer () const;
	 void swapBuffers ();
	 QGLFormat format () const;
	 void setFormat (const QGLFormat &format);
	 const QGLContext * context () const;
	 void setContext (QGLContext *context, const QGLContext *shareContext=0, bool deleteOldContext=true);
	 QPixmap renderPixmap (int w=0, int h=0, bool useContext=false);
	 QImage grabFrameBuffer (bool withAlpha=false);
	 void makeOverlayCurrent ();
	 const QGLContext * overlayContext () const;
	 void setMouseTracking (bool enable);
	 const QGLColormap & colormap () const;
	 void setColormap (const QGLColormap &map);
	 void renderText (int x, int y, const QString &str, const QFont &fnt=QFont(), int listBase=2000);
	 void renderText (double x, double y, double z, const QString &str, const QFont &fnt=QFont(), int listBase=2000);
	 QPaintEngine * paintEngine () const;
	 GLuint bindTexture (const QImage &image, GLenum target=GL_TEXTURE_2D, GLint format=GL_RGBA8);
	 GLuint bindTexture (const QPixmap &pixmap, GLenum target=GL_TEXTURE_2D, GLint format=GL_RGBA8);
	 GLuint bindTexture (const QString &fileName);
	 void deleteTexture (GLuint tx_id);
	 virtual void updateGL ();
	 virtual void updateOverlayGL ();
		protected  virtual void initializeGL ();
	protected  virtual void resizeGL (int w, int h);
	protected  virtual void paintGL ();
	protected  virtual void initializeOverlayGL ();
	protected  virtual void resizeOverlayGL (int w, int h);
	protected  virtual void paintOverlayGL ();
					protected  virtual void glInit ();
	protected  virtual void glDraw ();
		 static QImage convertToGLFormat (const QImage &img);

};
