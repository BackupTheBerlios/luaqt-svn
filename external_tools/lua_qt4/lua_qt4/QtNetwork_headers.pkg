$#include <QHostAddress>

class QHostAddress {
Q_OBJECT
signals:
public:
	 enum SpecialAddress {         Null, Broadcast, LocalHost, LocalHostIPv6,         Any, AnyIPv6       };

	 QHostAddress ();
	 QHostAddress (quint32 ip4Addr);
	 QHostAddress (quint8 *ip6Addr);
	 QHostAddress (const Q_IPV6ADDR &ip6Addr);
	 QHostAddress (const QString &address);
	 QHostAddress (const QHostAddress &copy);
	 QHostAddress (SpecialAddress address);
	 ~QHostAddress ();
	 QHostAddress & operator= (const QHostAddress &);
	 void setAddress (quint32 ip4Addr);
	 void setAddress (quint8 *ip6Addr);
	 void setAddress (const Q_IPV6ADDR &ip6Addr);
	 bool setAddress (const QString &address);
	 QAbstractSocket::NetworkLayerProtocol protocol () const;
	 quint32 toIPv4Address () const;
	 Q_IPV6ADDR toIPv6Address () const;
	 QString toString () const;
	 bool operator== (const QHostAddress &address) const;
	 bool operator== (SpecialAddress address) const;
	 bool isNull () const;
	 void clear ();

};
$#include <QHostInfo>

class QHostInfo {
Q_OBJECT
signals:
public:
	 enum HostInfoError { NoError, HostNotFound, UnknownError };

	 QHostInfo (int lookupId=-1);
	 QHostInfo (const QHostInfo &d);
	 QHostInfo & operator= (const QHostInfo &d);
	 ~QHostInfo ();
	 QString hostName () const;
	 void setHostName (const QString &name);
	 QList< QHostAddress > addresses () const;
	 void setAddresses (const QList< QHostAddress > &addresses);
	 HostInfoError error () const;
	 void setError (HostInfoError error);
	 QString errorString () const;
	 void setErrorString (const QString &errorString);
	 void setLookupId (int id);
	 int lookupId () const;
	 static int lookupHost (const QString &name, QObject *receiver, const char *member);
	 static void abortHostLookup (int lookupId);
	 static QHostInfo fromName (const QString &name);
	 static QString localHostName ();

};
$#include <QUrlInfo>

class QUrlInfo {
Q_OBJECT
signals:
public:
	 enum PermissionSpec {         ReadOwner = 00400, WriteOwner = 00200, ExeOwner = 00100, ReadGroup = 00040,         WriteGroup = 00020, ExeGroup = 00010, ReadOther = 00004, WriteOther = 00002,         ExeOther = 00001       };

	 QUrlInfo ();
	 QUrlInfo (const QUrlInfo &ui);
	 QUrlInfo (const QString &name, int permissions, const QString &owner, const QString &group, qint64 size, const QDateTime &lastModified, const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink, bool isWritable, bool isReadable, bool isExecutable);
	 QUrlInfo (const QUrl &url, int permissions, const QString &owner, const QString &group, qint64 size, const QDateTime &lastModified, const QDateTime &lastRead, bool isDir, bool isFile, bool isSymLink, bool isWritable, bool isReadable, bool isExecutable);
	 QUrlInfo & operator= (const QUrlInfo &ui);
	 virtual ~QUrlInfo ();
	 virtual void setName (const QString &name);
	 virtual void setDir (bool b);
	 virtual void setFile (bool b);
	 virtual void setSymLink (bool b);
	 virtual void setOwner (const QString &s);
	 virtual void setGroup (const QString &s);
	 virtual void setSize (qint64 size);
	 virtual void setWritable (bool b);
	 virtual void setReadable (bool b);
	 virtual void setPermissions (int p);
	 virtual void setLastModified (const QDateTime &dt);
	 bool isValid () const;
	 QString name () const;
	 int permissions () const;
	 QString owner () const;
	 QString group () const;
	 qint64 size () const;
	 QDateTime lastModified () const;
	 QDateTime lastRead () const;
	 bool isDir () const;
	 bool isFile () const;
	 bool isSymLink () const;
	 bool isWritable () const;
	 bool isReadable () const;
	 bool isExecutable () const;
	 bool operator== (const QUrlInfo &i) const;
	 static bool greaterThan (const QUrlInfo &i1, const QUrlInfo &i2, int sortBy);
	 static bool lessThan (const QUrlInfo &i1, const QUrlInfo &i2, int sortBy);
	 static bool equal (const QUrlInfo &i1, const QUrlInfo &i2, int sortBy);

};
$#include <QHttpHeader>

class QHttpHeader {
Q_OBJECT
signals:
public:

	 virtual ~QHttpHeader ();
	 QHttpHeader & operator= (const QHttpHeader &h);
	 QString value (const QString &key) const;
	 void setValue (const QString &key, const QString &value);
	 void removeValue (const QString &key);
	 QStringList keys () const;
	 bool hasKey (const QString &key) const;
	 bool hasContentLength () const;
	 uint contentLength () const;
	 void setContentLength (int len);
	 bool hasContentType () const;
	 QString contentType () const;
	 void setContentType (const QString &type);
	 virtual QString toString () const;
	 bool isValid () const;
	 virtual int majorVersion () const =0;
	 virtual int minorVersion () const =0;

};
$#include <QHttpRequestHeader>

class QHttpRequestHeader : public QHttpHeader {
Q_OBJECT
signals:
public:

	 QHttpRequestHeader ();
	 QHttpRequestHeader (const QString &method, const QString &path, int majorVer=1, int minorVer=1);
	 QHttpRequestHeader (const QHttpRequestHeader &header);
	 QHttpRequestHeader (const QString &str);
	 QHttpRequestHeader & operator= (const QHttpRequestHeader &header);
	 void setRequest (const QString &method, const QString &path, int majorVer=1, int minorVer=1);
	 QString method () const;
	 QString path () const;
	 int majorVersion () const;
	 int minorVersion () const;
	 QString toString () const;

};
$#include <QAbstractSocket>

class QAbstractSocket : public QIODevice {
Q_OBJECT
signals:
	 void hostFound ();
	 void connected ();
	 void disconnected ();
	 void stateChanged (SocketState);
	 void error (SocketError);
public:
	 enum SocketType { TcpSocket, UdpSocket, UnknownSocketType = -1 };
	 enum NetworkLayerProtocol { IPv4Protocol, IPv6Protocol, UnknownNetworkLayerProtocol = -1 };
	 enum SocketError {         ConnectionRefusedError, RemoteHostClosedError, HostNotFoundError, SocketAccessError,         SocketResourceError, SocketTimeoutError, DatagramTooLargeError, NetworkError,         AddressInUseError, SocketAddressNotAvailableError, UnsupportedSocketOperationError, UnknownSocketError = -1       };
	 enum SocketState {         UnconnectedState, HostLookupState, ConnectingState, ConnectedState,         BoundState, ListeningState, ClosingState       };

	 QAbstractSocket (SocketType socketType, QObject *parent);
	 virtual ~QAbstractSocket ();
	 void connectToHost (const QString &hostName, quint16 port, OpenMode mode=ReadWrite);
	 void connectToHost (const QHostAddress &address, quint16 port, OpenMode mode=ReadWrite);
	 void disconnectFromHost ();
	 bool isValid () const;
	 qint64 bytesAvailable () const;
	 qint64 bytesToWrite () const;
	 bool canReadLine () const;
	 quint16 localPort () const;
	 QHostAddress localAddress () const;
	 quint16 peerPort () const;
	 QHostAddress peerAddress () const;
	 QString peerName () const;
	 qint64 readBufferSize () const;
	 void setReadBufferSize (qint64 size);
	 void abort ();
	 int socketDescriptor () const;
	 bool setSocketDescriptor (int socketDescriptor, SocketState state=ConnectedState, OpenMode openMode=ReadWrite);
	 SocketType socketType () const;
	 SocketState state () const;
	 SocketError error () const;
	 void close ();
	 bool isSequential () const;
	 bool atEnd () const;
	 bool flush ();
	 bool waitForConnected (int msecs=30000);
	 bool waitForReadyRead (int msecs=30000);
	 bool waitForBytesWritten (int msecs=30000);
	 bool waitForDisconnected (int msecs=30000);

};
$#include <QTcpServer>

class QTcpServer : public QObject {
Q_OBJECT
signals:
	 void newConnection ();
public:

	 QTcpServer (QObject *parent=0);
	 virtual ~QTcpServer ();
	 bool listen (const QHostAddress &address=QHostAddress::Any, quint16 port=0);
	 void close ();
	 bool isListening () const;
	 void setMaxPendingConnections (int numConnections);
	 int maxPendingConnections () const;
	 quint16 serverPort () const;
	 QHostAddress serverAddress () const;
	 int socketDescriptor () const;
	 bool setSocketDescriptor (int socketDescriptor);
	 bool waitForNewConnection (int msec=0, bool *timedOut=0);
	 virtual bool hasPendingConnections () const;
	 virtual QTcpSocket * nextPendingConnection ();
	 QAbstractSocket::SocketError serverError () const;
	 QString errorString () const;

};
$#include <QHttpResponseHeader>

class QHttpResponseHeader : public QHttpHeader {
Q_OBJECT
signals:
public:

	 QHttpResponseHeader ();
	 QHttpResponseHeader (const QHttpResponseHeader &header);
	 QHttpResponseHeader & operator= (const QHttpResponseHeader &header);
	 int statusCode () const;
	 QString reasonPhrase () const;
	 int majorVersion () const;
	 int minorVersion () const;
	 QString toString () const;

};
$#include <QFtp>

class QFtp : public QObject {
Q_OBJECT
signals:
	 void stateChanged (int);
	 void listInfo (const QUrlInfo &);
	 void readyRead ();
	 void dataTransferProgress (qint64, qint64);
	 void rawCommandReply (int, const QString &);
	 void commandStarted (int);
	 void commandFinished (int, bool);
	 void done (bool);
public:
	 enum State {         Unconnected, HostLookup, Connecting, Connected,         LoggedIn, Closing       };
	 enum Error {         NoError, UnknownError, HostNotFound, ConnectionRefused,         NotConnected       };
	 enum Command {         None, SetTransferMode, SetProxy, ConnectToHost,         Login, Close, List, Cd,         Get, Put, Remove, Mkdir,         Rmdir, Rename, RawCommand       };
	 enum TransferMode { Active, Passive };
	 enum TransferType { Binary, Ascii };

	 QFtp (QObject *parent=0);
	 virtual ~QFtp ();
	 int setProxy (const QString &host, quint16 port);
	 int connectToHost (const QString &host, quint16 port=21);
	 int login (const QString &user=QString(), const QString &password=QString());
	 int close ();
	 int setTransferMode (TransferMode mode);
	 int list (const QString &dir=QString());
	 int cd (const QString &dir);
	 int get (const QString &file, QIODevice *dev=0, TransferType type=Binary);
	 int put (const QByteArray &data, const QString &file, TransferType type=Binary);
	 int put (QIODevice *dev, const QString &file, TransferType type=Binary);
	 int remove (const QString &file);
	 int mkdir (const QString &dir);
	 int rmdir (const QString &dir);
	 int rename (const QString &oldname, const QString &newname);
	 int rawCommand (const QString &command);
	 qint64 bytesAvailable () const;
	 qint64 read (char *data, qint64 maxlen);
	 QByteArray readAll ();
	 int currentId () const;
	 Command currentCommand () const;
	 bool hasPendingCommands () const;
	 void clearPendingCommands ();
	 State state () const;
	 Error error () const;
	 QString errorString () const;
	 void abort ();

};
$#include <QHttp>

class QHttp : public QObject {
Q_OBJECT
signals:
	 void stateChanged (int);
	 void responseHeaderReceived (const QHttpResponseHeader &resp);
	 void readyRead (const QHttpResponseHeader &resp);
	 void dataSendProgress (int, int);
	 void dataReadProgress (int, int);
	 void requestStarted (int);
	 void requestFinished (int, bool);
	 void done (bool);
public:
	 enum State {         Unconnected, HostLookup, Connecting, Sending,         Reading, Connected, Closing       };
	 enum Error {         NoError, UnknownError, HostNotFound, ConnectionRefused,         UnexpectedClose, InvalidResponseHeader, WrongContentLength, Aborted       };

	 QHttp (QObject *parent=0);
	 QHttp (const QString &hostname, quint16 port=80, QObject *parent=0);
	 virtual ~QHttp ();
	 int setHost (const QString &hostname, quint16 port=80);
	 int setSocket (QTcpSocket *socket);
	 int setUser (const QString &username, const QString &password=QString());
	 int setProxy (const QString &host, int port, const QString &username=QString(), const QString &password=QString());
	 int get (const QString &path, QIODevice *to=0);
	 int post (const QString &path, QIODevice *data, QIODevice *to=0);
	 int post (const QString &path, const QByteArray &data, QIODevice *to=0);
	 int head (const QString &path);
	 int request (const QHttpRequestHeader &header, QIODevice *device=0, QIODevice *to=0);
	 int request (const QHttpRequestHeader &header, const QByteArray &data, QIODevice *to=0);
	 int closeConnection ();
	 int close ();
	 qint64 bytesAvailable () const;
	 qint64 read (char *data, qint64 maxlen);
	 QByteArray readAll ();
	 int currentId () const;
	 QHttpRequestHeader currentRequest () const;
	 QHttpResponseHeader lastResponse () const;
	 bool hasPendingRequests () const;
	 void clearPendingRequests ();
	 State state () const;
	 Error error () const;
	 QString errorString () const;
	 void abort ();

};
$#include <QTcpSocket>

class QTcpSocket : public QAbstractSocket {
Q_OBJECT
signals:
public:

	 QTcpSocket (QObject *parent=0);
	 virtual ~QTcpSocket ();

};
$#include <QUdpSocket>

class QUdpSocket : public QAbstractSocket {
Q_OBJECT
signals:
public:

	 QUdpSocket (QObject *parent=0);
	 virtual ~QUdpSocket ();
	 bool bind (const QHostAddress &address, quint16 port);
	 bool bind (quint16 port=0);
	 bool hasPendingDatagrams () const;
	 qint64 pendingDatagramSize () const;
	 qint64 readDatagram (char *data, qint64 maxlen, QHostAddress *host=0, quint16 *port=0);
	 qint64 writeDatagram (const char *data, qint64 len, const QHostAddress &host, quint16 port);
	 qint64 writeDatagram (const QByteArray &datagram, const QHostAddress &host, quint16 port);

};
