$#include <QSet>

class QSet {

	TEMPLATE_BIND(T, $TYPE_LIST);

	class const_iterator {
	
		const_iterator () ;
		const_iterator (const const_iterator &o) ;
		const_iterator & operator= (const const_iterator &o) ;
		bool operator== (const const_iterator &o) const ;
		bool operator!= (const const_iterator &o) const ;
		const_iterator operator+ (int j) const ;
		const_iterator operator- (int j) const ;
		
		const T __operator_star @ data;
	};

	QSet () ;
	QSet (const QSet< T > &other) ;
	QSet< T > & operator= (const QSet< T > &other) ;
	bool operator== (const QSet< T > &other) const ;
	bool operator!= (const QSet< T > &other) const ;
	int size () const ;
	bool isEmpty () const ;
	int capacity () const ;
	void reserve (int size) ;
	void squeeze () ;
	void detach () ;
	bool isDetached () const ;
	void clear () ;
	bool remove (T value) ;
	bool contains (T value) const ;
	const_iterator begin () const ;
	const_iterator constBegin () const ;
	const_iterator end () const ;
	const_iterator constEnd () const ;
	int count () const ;
	const_iterator insert (T value) ;
	QSet< T > & unite (const QSet< T > &other) ;
	QSet< T > & intersect (const QSet< T > &other) ;
	QSet< T > & subtract (const QSet< T > &other) ;
	bool empty () const ;
	QSet< T > & operator<< (T value) ;
	QSet< T > & operator|= (const QSet< T > &other) ;
	QSet< T > & operator|= (T value) ;
	QSet< T > & operator &= (const QSet< T > &other) ;
	QSet< T > & operator &= (T value) ;
	QSet< T > & operator+= (const QSet< T > &other) ;
	QSet< T > & operator+= (T value) ;
	QSet< T > & operator-= (const QSet< T > &other) ;
	QSet< T > & operator-= (T value) ;
	QSet< T > operator| (const QSet< T > &other) ;
	QSet< T > operator & (const QSet< T > &other) ;
	QSet< T > operator+ (const QSet< T > &other) ;
	QSet< T > operator- (const QSet< T > &other) ;
	QList< T > toList () const ;
	QList< T > values () const;
};
