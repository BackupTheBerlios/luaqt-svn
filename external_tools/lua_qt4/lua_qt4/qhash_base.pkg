$#include <QHash>

class QHash {

	TEMPLATE_BIND(Key T, $TYPE_LIST);

	class iterator {
	
		iterator () ;
		iterator (void *node) ;
		T __operator_star@data;
		iterator& __operator_inc @ inc();
		iterator& __operator_dec @ dec();
		bool operator== (const iterator &o) const ;
		bool operator!= (const iterator &o) const ;
		bool operator== (const const_iterator &o) const ;
		bool operator!= (const const_iterator &o) const ;
		iterator operator+ (int j) const ;
		iterator operator- (int j) const ;

		const Key & key () const ;
	};

	class const_iterator {
	
		const_iterator () ;
		const_iterator (void *node) ;;
		const_iterator (const iterator &o) ;
		const T __operator_star@data;
		const_iterator& __operator_inc @ inc();
		const_iterator& __operator_dec @ dec();
		bool operator== (const const_iterator &o) const ;
		bool operator!= (const const_iterator &o) const ;
		const_iterator operator+ (int j) const ;
		const_iterator operator- (int j) const ;

		const Key & key () const ;
	};

	QHash () ;
	QHash (const QHash< Key, T > &other) ;
	~QHash () ;
	QHash< Key, T > & operator= (const QHash< Key, T > &other) ;
	bool operator== (const QHash< Key, T > &other) const ;
	bool operator!= (const QHash< Key, T > &other) const ;
	int size () const ;
	bool isEmpty () const ;
	int capacity () const ;
	void reserve (int size) ;
	void squeeze () ;
	void detach () ;
	bool isDetached () const ;
	void setSharable (bool sharable) ;
	void clear () ;
	int remove (Key key) ;
	T take (Key key) ;
	bool contains (Key key) const ;
	const Key key (T value) const ;
	const T value (Key key) const ;
	const T value (Key key, T defaultValue) const; 
	
	QList< Key > keys () const ;
	QList< Key > keys (T value) const ;
	QList< T > values () const ;
	QList< T > values (Key key) const ;
	int count (Key key) const ;
	iterator begin () ;
	const_iterator begin () const ;
	const_iterator constBegin () const ;
	iterator end () ;
	const_iterator end () const ;
	const_iterator constEnd () const ;
	iterator erase (iterator it) ;
	int count () const ;
	iterator find (Key key) ;
	const_iterator find (Key key) const ;
	iterator insert (Key key, T value) ;
	iterator insert@set(Key key, T value) ; // because operator[] is gone
	iterator insertMulti (Key key, T value) ;
	QHash< Key, T > & unite (const QHash< Key, T > &other) ;
	bool empty () const;

	const T __operator_sub@get (const Key &key) const ;
};


$#include <QMultiHash>

class QMultiHash {

	TEMPLATE_BIND(Key T, $TYPE_LIST);

	QMultiHash () ;
	QMultiHash (const QHash< Key, T > &other) ;
	QHash< Key, T >::iterator replace (Key key, T value) ;
	QHash< Key, T >::iterator insert (Key key, T value) ;
	QMultiHash< Key, T > & operator+= (const QMultiHash< Key, T > &other) ;
	QMultiHash< Key, T > operator+ (const QMultiHash< Key, T > &other) const;
};


