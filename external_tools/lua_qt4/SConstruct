EnsureSConsVersion(0,14);
#EnsurePythonVersion(2,1); this is buggy in scons, so i commented this out

import os;
import string;
import sys

import methods;

moc_binary = "moc"

########################

scanners = Environment().Dictionary('SCANNERS')
pkgscan = Scanner(name='pkg',
				function = methods.pkg_scan_func,
				skeys = ['.pkg'],
				recursive = True)

env = Environment(SCANNERS = scanners + [pkgscan], tools=['default', 'qt']);

env['QT_LIB'] = ''
env['QT_AUTOSCAN'] = 0

options_file = None
if sys.platform == 'linux2':
	options_file = "linux"

elif 'msvc' in env['TOOLS']:
	options_file = "msvc"
else:
	options_file = "posix"

opts = Options(["config_"+options_file+".py", "custom_"+options_file+".py", 'custom.py'], ARGUMENTS)
opts.Add('CXX', 'The C++ compiler.')
opts.Add('optimize', 'Optimize.', 0)
opts.Add('debug', 'Add debug symbols.', 1)
opts.Add('prefix', 'The installation prefix', '/usr/local')
opts.Add('distcc_hosts', 'List of host for compilation with distcc', None)
opts.Add('profile', 'Add profile symbols.', 0)
opts.Add('lua_libs', 'The Lua libraries.', [])
opts.Add('qt_append', 'Suffix to append to qt libraries', "")
opts.Add('extra_cxx_flags', 'Extra for the C++ compiler', [])
opts.Add('qt_debug', 'Use qt debug libs.', False)
opts.Add('TOLUAPP', 'The tolua++ binary', 'tolua++51')
opts.Add('CPPPATH', 'The include paths.', [])
#opts.Add('QTDIR', 'Qt dir')

opts.Update(env)

Help(opts.GenerateHelpText(env))

env.Append(CPPPATH='#.')
env.Append(CPPPATH='$QTDIR/include')

env.__class__.make_targets = methods.make_targets
env.__class__.LuaBinding = methods.make_tolua_code
env.__class__.pkg_scan_dep = methods.pkg_scan_dep
#env.__class__.Dir = Dir
#env.__class__.Moc = methods.moc_builder
env.build_dir = None
env.make_so = None

distcc = None
if env.has_key('distcc_hosts'):
	distcc = env['distcc_hosts']
else:
	if os.environ.has_key('DISTCC_HOSTS'):
		distcc = os.environ['DISTCC_HOSTS']

if distcc:
	#env['CXX'] = os.environ['CXX']
	env['CXX'] = 'distcc '+env['CXX']
	env['ENV']['DISTCC_HOSTS'] = distcc
	env['ENV']['HOME'] = os.environ['HOME']
	SetOption('num_jobs', len(string.split(distcc))*2)

#detect OSS

if (env['debug'] and not env['optimize']):
	env.Append(CXXFLAGS=['-g','-Wall']);

if os.environ.has_key('USE_STACK_CHECK'):
	env.Append(CXXFLAGS=['-fstack-check']);

if (env['optimize']):
	#env.Append(CXXFLAGS=['-O3','-ffast-math', '-march=athlon']);
	env.Append(CXXFLAGS=['-O2', '-Wall']);

if (env['profile']):
	env.Append(CXXFLAGS=['-pg']);
	env.Append(LINKFLAGS=['-pg']);

env.qt_flags = []
env.qt_libs = ['qt-mt']


env.bin_targets = [];

Export('env');

SConscript('lua_qt4/SCsub');


